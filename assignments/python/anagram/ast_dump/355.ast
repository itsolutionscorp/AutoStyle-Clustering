Module{[FunctionDef{'detect_anagrams', arguments{[Name{'word', Param{}}, Name{'potential_anagrams', Param{}}], None, None, []}, [Assign{[Name{'word', Store{}}], Call{Attribute{Name{'word', Load{}}, 'lower', Load{}}, [], [], None, None}}, Assign{[Name{'word_letters', Store{}}], DictComp{Name{'letter', Load{}}, Call{Attribute{Name{'word', Load{}}, 'count', Load{}}, [Name{'letter', Load{}}], [], None, None}, [comprehension{Name{'letter', Store{}}, Name{'word', Load{}}, []}]}}, Assign{[Name{'anagrams', Store{}}], List{[], Load{}}}, For{Name{'potential_anagram', Store{}}, Name{'potential_anagrams', Load{}}, [Assign{[Name{'potential_anagram_lower', Store{}}], Call{Attribute{Name{'potential_anagram', Load{}}, 'lower', Load{}}, [], [], None, None}}, Assign{[Name{'anagram_letters', Store{}}], DictComp{Name{'letter', Load{}}, Call{Attribute{Name{'potential_anagram_lower', Load{}}, 'count', Load{}}, [Name{'letter', Load{}}], [], None, None}, [comprehension{Name{'letter', Store{}}, Name{'potential_anagram_lower', Load{}}, []}]}}, If{BoolOp{And{}, [Compare{Name{'anagram_letters', Load{}}, [Eq{}], [Name{'word_letters', Load{}}]}, Compare{Call{Attribute{Name{'word', Load{}}, 'lower', Load{}}, [], [], None, None}, [NotEq{}], [Name{'potential_anagram_lower', Load{}}]}]}, [Expr{Call{Attribute{Name{'anagrams', Load{}}, 'append', Load{}}, [Name{'potential_anagram', Load{}}], [], None, None}}], []}], []}, Return{Name{'anagrams', Load{}}}], []}]}
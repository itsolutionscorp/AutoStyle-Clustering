Module{[FunctionDef{'detect_anagrams', arguments{[Name{'word', Param{}}, Name{'candidates', Param{}}], None, None, []}, [Expr{Str{'Returns list of candidates that are anagrams of word'}}, Assign{[Name{'candidates', Store{}}], GeneratorExp{Call{Attribute{Name{'a', Load{}}, 'lower', Load{}}, [], [], None, None}, [comprehension{Name{'a', Store{}}, Name{'candidates', Load{}}, []}]}}, Assign{[Name{'word', Store{}}], Call{Attribute{Name{'word', Load{}}, 'lower', Load{}}, [], [], None, None}}, Assign{[Name{'results', Store{}}], List{[], Load{}}}, For{Name{'e', Store{}}, Name{'candidates', Load{}}, [If{Compare{Name{'e', Load{}}, [Eq{}], [Name{'word', Load{}}]}, [Break{}], []}, Assign{[Name{'copy_list', Store{}}], Call{Name{'list', Load{}}, [Name{'e', Load{}}], [], None, None}}, For{Name{'letter', Store{}}, Name{'word', Load{}}, [If{Compare{Name{'letter', Load{}}, [In{}], [Name{'copy_list', Load{}}]}, [Expr{Call{Attribute{Name{'copy_list', Load{}}, 'remove', Load{}}, [Name{'letter', Load{}}], [], None, None}}], [Break{}]}], []}, If{UnaryOp{Not{}, Name{'copy_list', Load{}}}, [Expr{Call{Attribute{Name{'results', Load{}}, 'append', Load{}}, [Name{'e', Load{}}], [], None, None}}], []}], []}, Return{Name{'results', Load{}}}], []}]}
Module{[Expr{Str{'Finds anagrams of a word in a list of words\n'}}, FunctionDef{'detect_anagrams', arguments{[Name{'anagram', Param{}}, Name{'word_list', Param{}}], None, None, []}, [Expr{Str{'Finds any words in [word_list] that are anagrams of [anagram]'}}, Assign{[Name{'sorted_letters', Store{}}], Call{Attribute{Str{''}, 'join', Load{}}, [Call{Name{'sorted', Load{}}, [Call{Attribute{Name{'anagram', Load{}}, 'lower', Load{}}, [], [], None, None}], [], None, None}], [], None, None}}, Assign{[Name{'anagram_list', Store{}}], List{[], Load{}}}, For{Name{'word', Store{}}, Name{'word_list', Load{}}, [If{BoolOp{And{}, [Compare{Call{Attribute{Str{''}, 'join', Load{}}, [Call{Name{'sorted', Load{}}, [Call{Attribute{Name{'word', Load{}}, 'lower', Load{}}, [], [], None, None}], [], None, None}], [], None, None}, [Eq{}], [Name{'sorted_letters', Load{}}]}, Compare{Call{Attribute{Name{'word', Load{}}, 'lower', Load{}}, [], [], None, None}, [NotEq{}], [Name{'anagram', Load{}}]}]}, [Expr{Call{Attribute{Name{'anagram_list', Load{}}, 'append', Load{}}, [Name{'word', Load{}}], [], None, None}}], []}], []}, Return{Name{'anagram_list', Load{}}}], []}]}
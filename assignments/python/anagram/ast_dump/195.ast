Module{[FunctionDef{'detect_anagrams', arguments{[Name{'word', Param{}}, Name{'list_to_test', Param{}}], None, None, []}, [Assign{[Name{'true_anagrams', Store{}}], List{[], Load{}}}, While{Compare{Call{Name{'len', Load{}}, [Name{'list_to_test', Load{}}], [], None, None}, [Gt{}], [Num{0}]}, [Assign{[Name{'word_to_test', Store{}}], Call{Attribute{Name{'list_to_test', Load{}}, 'pop', Load{}}, [Num{0}], [], None, None}}, If{Compare{Call{Name{'len', Load{}}, [Name{'word_to_test', Load{}}], [], None, None}, [Eq{}], [Call{Name{'len', Load{}}, [Name{'word', Load{}}], [], None, None}]}, [Assign{[Name{'word_breakup', Store{}}], Call{Name{'list', Load{}}, [Name{'word', Load{}}], [], None, None}}, Assign{[Name{'test_breakup', Store{}}], Call{Name{'list', Load{}}, [Name{'word_to_test', Load{}}], [], None, None}}, Assign{[Name{'word_breakup', Store{}}], ListComp{Call{Attribute{Name{'x', Load{}}, 'lower', Load{}}, [], [], None, None}, [comprehension{Name{'x', Store{}}, Name{'word_breakup', Load{}}, []}]}}, Assign{[Name{'test_breakup', Store{}}], ListComp{Call{Attribute{Name{'x', Load{}}, 'lower', Load{}}, [], [], None, None}, [comprehension{Name{'x', Store{}}, Name{'test_breakup', Load{}}, []}]}}, If{Compare{Name{'word_breakup', Load{}}, [NotEq{}], [Name{'test_breakup', Load{}}]}, [Expr{Call{Attribute{Name{'word_breakup', Load{}}, 'sort', Load{}}, [], [], None, None}}, Expr{Call{Attribute{Name{'test_breakup', Load{}}, 'sort', Load{}}, [], [], None, None}}, If{Compare{Name{'word_breakup', Load{}}, [Eq{}], [Name{'test_breakup', Load{}}]}, [Expr{Call{Attribute{Name{'true_anagrams', Load{}}, 'append', Load{}}, [Name{'word_to_test', Load{}}], [], None, None}}], []}], []}], []}], []}, Return{Name{'true_anagrams', Load{}}}], []}]}
Module{[FunctionDef{'detect_anagrams', arguments{[Name{'word', Param{}}, Name{'target_list', Param{}}], None, None, []}, [Assign{[Name{'n', Store{}}], Call{Name{'len', Load{}}, [Name{'word', Load{}}], [], None, None}}, Assign{[Name{'lower', Store{}}], Call{Attribute{Name{'word', Load{}}, 'lower', Load{}}, [], [], None, None}}, Assign{[Name{'counts', Store{}}], DictComp{Name{'c', Load{}}, Call{Attribute{Name{'lower', Load{}}, 'count', Load{}}, [Name{'c', Load{}}], [], None, None}, [comprehension{Name{'c', Store{}}, Name{'lower', Load{}}, []}]}}, Return{ListComp{Name{'w', Load{}}, [comprehension{Name{'w', Store{}}, Name{'target_list', Load{}}, [BoolOp{And{}, [Compare{Call{Attribute{Name{'w', Load{}}, 'lower', Load{}}, [], [], None, None}, [NotEq{}], [Call{Attribute{Name{'word', Load{}}, 'lower', Load{}}, [], [], None, None}]}, Compare{Name{'counts', Load{}}, [Eq{}], [DictComp{Name{'c', Load{}}, Call{Attribute{Call{Attribute{Name{'w', Load{}}, 'lower', Load{}}, [], [], None, None}, 'count', Load{}}, [Name{'c', Load{}}], [], None, None}, [comprehension{Name{'c', Store{}}, Call{Attribute{Name{'w', Load{}}, 'lower', Load{}}, [], [], None, None}, []}]}]}]}]}]}}], []}]}
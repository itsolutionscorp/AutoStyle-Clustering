Module{[ImportFrom{'itertools', [alias{'permutations', None}], 0}, FunctionDef{'detect_anagrams', arguments{[Name{'word', Param{}}, Name{'word_list', Param{}}], None, None, []}, [Assign{[Name{'word', Store{}}], Call{Attribute{Name{'word', Load{}}, 'lower', Load{}}, [], [], None, None}}, Assign{[Name{'variants', Store{}}], Call{Name{'list', Load{}}, [Call{Name{'permutations', Load{}}, [Name{'word', Load{}}], [], None, None}], [], None, None}}, Return{ListComp{Name{'anagram', Load{}}, [comprehension{Name{'anagram', Store{}}, Name{'word_list', Load{}}, [BoolOp{And{}, [Compare{Name{'word', Load{}}, [NotEq{}], [Call{Attribute{Name{'anagram', Load{}}, 'lower', Load{}}, [], [], None, None}]}, Compare{Call{Name{'len', Load{}}, [Name{'word', Load{}}], [], None, None}, [Eq{}], [Call{Name{'len', Load{}}, [Name{'anagram', Load{}}], [], None, None}]}, Compare{Call{Name{'tuple', Load{}}, [Call{Attribute{Name{'anagram', Load{}}, 'lower', Load{}}, [], [], None, None}], [], None, None}, [In{}], [Name{'variants', Load{}}]}]}]}]}}], []}]}
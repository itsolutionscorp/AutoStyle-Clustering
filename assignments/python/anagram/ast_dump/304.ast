Module{[ImportFrom{'collections', [alias{'Counter', None}], 0}, Expr{Str{'\nreturns all anagrams of word found in list_of_words\n'}}, FunctionDef{'detect_anagrams', arguments{[Name{'word', Param{}}, Name{'list_of_words', Param{}}], None, None, []}, [Assign{[Name{'ret_list', Store{}}], List{[], Load{}}}, Assign{[Name{'lower_word', Store{}}], Call{Attribute{Name{'word', Load{}}, 'lower', Load{}}, [], [], None, None}}, Assign{[Name{'word_map', Store{}}], Call{Name{'Counter', Load{}}, [Name{'lower_word', Load{}}], [], None, None}}, For{Name{'candidate_word', Store{}}, Name{'list_of_words', Load{}}, [Assign{[Name{'lower_candidate_word', Store{}}], Call{Attribute{Name{'candidate_word', Load{}}, 'lower', Load{}}, [], [], None, None}}, If{BoolOp{And{}, [Compare{Call{Name{'len', Load{}}, [Name{'candidate_word', Load{}}], [], None, None}, [Eq{}], [Call{Name{'len', Load{}}, [Name{'word', Load{}}], [], None, None}]}, Compare{Name{'lower_candidate_word', Load{}}, [NotEq{}], [Name{'lower_word', Load{}}]}]}, [Assign{[Name{'candidate_word_map', Store{}}], Call{Name{'Counter', Load{}}, [Name{'lower_candidate_word', Load{}}], [], None, None}}, If{Compare{Name{'word_map', Load{}}, [Eq{}], [Name{'candidate_word_map', Load{}}]}, [Expr{Call{Attribute{Name{'ret_list', Load{}}, 'append', Load{}}, [Name{'candidate_word', Load{}}], [], None, None}}], []}], []}], []}, Return{Name{'ret_list', Load{}}}], []}]}
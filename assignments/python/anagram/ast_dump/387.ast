Module{[FunctionDef{'detect_anagrams', arguments{[Name{'word', Param{}}, Name{'wlist', Param{}}], None, None, []}, [Assign{[Name{'toReturn', Store{}}], List{[], Load{}}}, Assign{[Name{'word', Store{}}], Call{Attribute{Name{'word', Load{}}, 'lower', Load{}}, [], [], None, None}}, For{Name{'i', Store{}}, Name{'wlist', Load{}}, [If{Compare{Name{'i', Load{}}, [Eq{}], [Name{'word', Load{}}]}, [Break{}], []}, Assign{[Name{'current', Store{}}], Call{Attribute{Name{'i', Load{}}, 'lower', Load{}}, [], [], None, None}}, For{Name{'j', Store{}}, Name{'word', Load{}}, [If{Compare{Name{'j', Load{}}, [In{}], [Name{'current', Load{}}]}, [Assign{[Name{'current', Store{}}], BinOp{Subscript{Name{'current', Load{}}, Slice{None, Call{Attribute{Name{'current', Load{}}, 'find', Load{}}, [Name{'j', Load{}}], [], None, None}, None}, Load{}}, Add{}, Subscript{Name{'current', Load{}}, Slice{BinOp{Call{Attribute{Name{'current', Load{}}, 'find', Load{}}, [Name{'j', Load{}}], [], None, None}, Add{}, Num{1}}, None, None}, Load{}}}}], [Break{}]}], []}, If{Compare{Name{'current', Load{}}, [Eq{}], [Str{''}]}, [Expr{Call{Attribute{Name{'toReturn', Load{}}, 'append', Load{}}, [Name{'i', Load{}}], [], None, None}}], []}], []}, Return{Name{'toReturn', Load{}}}], []}]}
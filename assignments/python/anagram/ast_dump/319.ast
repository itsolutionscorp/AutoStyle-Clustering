Module{[FunctionDef{'detect_anagrams', arguments{[Name{'what', Param{}}, Name{'string_of_whats', Param{}}], None, None, []}, [Assign{[Name{'count', Store{}}], Dict{[], []}}, Assign{[Name{'count2', Store{}}], Dict{[], []}}, Assign{[Name{'playbook', Store{}}], List{[], Load{}}}, For{Name{'char', Store{}}, ListComp{Call{Attribute{Name{'x', Load{}}, 'lower', Load{}}, [], [], None, None}, [comprehension{Name{'x', Store{}}, Call{Name{'list', Load{}}, [Name{'what', Load{}}], [], None, None}, []}]}, [If{Compare{Name{'char', Load{}}, [In{}], [Name{'count', Load{}}]}, [AugAssign{Subscript{Name{'count', Load{}}, Index{Name{'char', Load{}}}, Store{}}, Add{}, Num{1}}], [Assign{[Subscript{Name{'count', Load{}}, Index{Name{'char', Load{}}}, Store{}}], Num{1}}]}], []}, For{Name{'word', Store{}}, Name{'string_of_whats', Load{}}, [If{Compare{Name{'word', Load{}}, [Eq{}], [Name{'what', Load{}}]}, [Return{List{[], Load{}}}], []}, For{Name{'char', Store{}}, ListComp{Call{Attribute{Name{'x', Load{}}, 'lower', Load{}}, [], [], None, None}, [comprehension{Name{'x', Store{}}, Call{Name{'list', Load{}}, [Name{'word', Load{}}], [], None, None}, []}]}, [If{Compare{Name{'char', Load{}}, [In{}], [Name{'count2', Load{}}]}, [AugAssign{Subscript{Name{'count2', Load{}}, Index{Name{'char', Load{}}}, Store{}}, Add{}, Num{1}}], [Assign{[Subscript{Name{'count2', Load{}}, Index{Name{'char', Load{}}}, Store{}}], Num{1}}]}], []}, If{Compare{Name{'count', Load{}}, [Eq{}], [Name{'count2', Load{}}]}, [Expr{Call{Attribute{Name{'playbook', Load{}}, 'append', Load{}}, [Name{'word', Load{}}], [], None, None}}], []}, Assign{[Name{'count2', Store{}}], Dict{[], []}}], []}, Return{Name{'playbook', Load{}}}, Print{None, [Name{'count', Load{}}], True}, Print{None, [Name{'string_of_whats', Load{}}], True}], []}]}
Module{[FunctionDef{'detect_anagrams', arguments{[Name{'word', Param{}}, Name{'pool', Param{}}], None, None, []}, [Assign{[Name{'word', Store{}}], Call{Attribute{Name{'word', Load{}}, 'lower', Load{}}, [], [], None, None}}, Assign{[Name{'pool', Store{}}], ListComp{Name{'i', Load{}}, [comprehension{Name{'i', Store{}}, Name{'pool', Load{}}, [Compare{Call{Attribute{Name{'i', Load{}}, 'lower', Load{}}, [], [], None, None}, [NotEq{}], [Name{'word', Load{}}]}]}]}}, Assign{[Name{'possible', Store{}}], ListComp{Name{'i', Load{}}, [comprehension{Name{'i', Store{}}, Name{'pool', Load{}}, [Compare{Call{Name{'set', Load{}}, [Name{'word', Load{}}], [], None, None}, [Eq{}], [Call{Name{'set', Load{}}, [Call{Attribute{Name{'i', Load{}}, 'lower', Load{}}, [], [], None, None}], [], None, None}]}]}]}}, Assign{[Name{'letter_count', Store{}}], DictComp{Name{'i', Load{}}, Call{Attribute{Name{'word', Load{}}, 'count', Load{}}, [Name{'i', Load{}}], [], None, None}, [comprehension{Name{'i', Store{}}, Name{'word', Load{}}, []}]}}, Assign{[Name{'anagrams', Store{}}], List{[], Load{}}}, For{Name{'i', Store{}}, Name{'possible', Load{}}, [If{Compare{DictComp{Name{'j', Load{}}, Call{Attribute{Call{Attribute{Name{'i', Load{}}, 'lower', Load{}}, [], [], None, None}, 'count', Load{}}, [Name{'j', Load{}}], [], None, None}, [comprehension{Name{'j', Store{}}, Call{Attribute{Name{'i', Load{}}, 'lower', Load{}}, [], [], None, None}, []}]}, [Eq{}], [Name{'letter_count', Load{}}]}, [Expr{Call{Attribute{Name{'anagrams', Load{}}, 'append', Load{}}, [Name{'i', Load{}}], [], None, None}}], []}], []}, Return{Name{'anagrams', Load{}}}], []}]}
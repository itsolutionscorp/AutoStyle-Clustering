Module{[FunctionDef{'detect_anagrams', arguments{[Name{'wordInput', Param{}}, Name{'listInput', Param{}}], None, None, []}, [Assign{[Name{'wordList', Store{}}], ListComp{Call{Attribute{Name{'i', Load{}}, 'strip', Load{}}, [], [], None, None}, [comprehension{Name{'i', Store{}}, Name{'listInput', Load{}}, []}]}}, Assign{[Name{'testString', Store{}}], Call{Attribute{Str{''}, 'join', Load{}}, [Call{Name{'sorted', Load{}}, [Call{Attribute{Name{'wordInput', Load{}}, 'lower', Load{}}, [], [], None, None}], [], None, None}], [], None, None}}, Assign{[Name{'testVal', Store{}}], Call{Attribute{Name{'wordInput', Load{}}, 'lower', Load{}}, [], [], None, None}}, Assign{[Name{'output', Store{}}], List{[], Load{}}}, For{Name{'i', Store{}}, Name{'wordList', Load{}}, [Assign{[Name{'testI', Store{}}], Call{Attribute{Str{''}, 'join', Load{}}, [Call{Name{'sorted', Load{}}, [Call{Attribute{Name{'i', Load{}}, 'lower', Load{}}, [], [], None, None}], [], None, None}], [], None, None}}, Assign{[Name{'testIlow', Store{}}], Call{Attribute{Name{'i', Load{}}, 'lower', Load{}}, [], [], None, None}}, If{Compare{Name{'testI', Load{}}, [Eq{}], [Name{'testString', Load{}}]}, [If{Compare{Name{'testVal', Load{}}, [NotEq{}], [Name{'testIlow', Load{}}]}, [Expr{Call{Attribute{Name{'output', Load{}}, 'append', Load{}}, [Name{'i', Load{}}], [], None, None}}], []}], []}], []}, Return{Name{'output', Load{}}}], []}]}
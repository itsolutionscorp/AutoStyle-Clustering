Module{[Expr{Str{'\nTry using sorted lowercase word as mapping value, instead of Counter{} object\n'}}, ImportFrom{'collections', [alias{'Counter', None}], 0}, FunctionDef{'detect_anagrams', arguments{[Name{'n', Param{}}, Name{'words', Param{}}], None, None, []}, [Expr{Str{'\n\tReturn sublist of words which are anagrams of `n` but not `n` itself\n\t'}}, Assign{[Name{'counters', Store{}}], Dict{[], []}}, Assign{[Name{'lowercase_words', Store{}}], ListComp{Call{Attribute{Name{'x', Load{}}, 'lower', Load{}}, [], [], None, None}, [comprehension{Name{'x', Store{}}, Name{'words', Load{}}, []}]}}, For{Name{'word', Store{}}, Name{'lowercase_words', Load{}}, [Assign{[Subscript{Name{'counters', Load{}}, Index{Name{'word', Load{}}}, Store{}}], Call{Name{'Counter', Load{}}, [Name{'word', Load{}}], [], None, None}}], []}, Assign{[Name{'n_lower', Store{}}], Call{Attribute{Name{'n', Load{}}, 'lower', Load{}}, [], [], None, None}}, Assign{[Name{'n_count', Store{}}], Call{Name{'Counter', Load{}}, [Name{'n_lower', Load{}}], [], None, None}}, Assign{[Name{'result', Store{}}], List{[], Load{}}}, For{Tuple{[Name{'word', Store{}}, Name{'word_lower', Store{}}], Store{}}, Call{Name{'zip', Load{}}, [Name{'words', Load{}}, Name{'lowercase_words', Load{}}], [], None, None}, [If{BoolOp{And{}, [Compare{Subscript{Name{'counters', Load{}}, Index{Name{'word_lower', Load{}}}, Load{}}, [Eq{}], [Name{'n_count', Load{}}]}, Compare{Name{'word_lower', Load{}}, [NotEq{}], [Name{'n_lower', Load{}}]}]}, [Expr{Call{Attribute{Name{'result', Load{}}, 'append', Load{}}, [Name{'word', Load{}}], [], None, None}}], []}], []}, Return{Name{'result', Load{}}}], []}]}
Module{[Import{[alias{'collections', None}]}, Assign{[Name{'compare', Store{}}], Lambda{arguments{[Name{'x', Param{}}, Name{'y', Param{}}], None, None, []}, Compare{Call{Attribute{Name{'collections', Load{}}, 'Counter', Load{}}, [Name{'x', Load{}}], [], None, None}, [Eq{}], [Call{Attribute{Name{'collections', Load{}}, 'Counter', Load{}}, [Name{'y', Load{}}], [], None, None}]}}}, FunctionDef{'detect_anagrams', arguments{[Name{'n', Param{}}, Name{'lists', Param{}}], None, None, []}, [Assign{[Name{'returned', Store{}}], List{[], Load{}}}, Assign{[Name{'charray', Store{}}], Call{Name{'list', Load{}}, [Call{Attribute{Name{'n', Load{}}, 'upper', Load{}}, [], [], None, None}], [], None, None}}, For{Name{'k', Store{}}, Name{'lists', Load{}}, [Assign{[Name{'tempk', Store{}}], Call{Name{'list', Load{}}, [Call{Attribute{Name{'k', Load{}}, 'upper', Load{}}, [], [], None, None}], [], None, None}}, If{BoolOp{And{}, [Call{Name{'compare', Load{}}, [Name{'charray', Load{}}, Name{'tempk', Load{}}], [], None, None}, Compare{Call{Attribute{Name{'k', Load{}}, 'upper', Load{}}, [], [], None, None}, [NotEq{}], [Call{Attribute{Name{'n', Load{}}, 'upper', Load{}}, [], [], None, None}]}]}, [Expr{Call{Attribute{Name{'returned', Load{}}, 'append', Load{}}, [Name{'k', Load{}}], [], None, None}}], []}], []}, Return{Name{'returned', Load{}}}], []}]}
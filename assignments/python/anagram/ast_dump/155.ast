Module{[FunctionDef{'detect_anagrams', arguments{[Name{'word', Param{}}, Name{'list_of_possibilities', Param{}}], None, None, []}, [If{Compare{Call{Name{'type', Load{}}, [Name{'word', Load{}}], [], None, None}, [NotEq{}], [Call{Name{'type', Load{}}, [Str{'hello'}], [], None, None}]}, [Return{Str{'Word is invalid'}}], []}, Assign{[Name{'word', Store{}}], Call{Attribute{Name{'word', Load{}}, 'lower', Load{}}, [], [], None, None}}, If{Compare{Call{Name{'type', Load{}}, [Name{'list_of_possibilities', Load{}}], [], None, None}, [Eq{}], [Call{Name{'type', Load{}}, [List{[Str{'hello'}, Str{'world'}, Str{'python'}], Load{}}], [], None, None}]}, [Assign{[Name{'pos', Store{}}], Name{'list_of_possibilities', Load{}}}], [Return{Str{'You must input a valid list of possibilities'}}]}, Assign{[Name{'letters', Store{}}], List{[], Load{}}}, Assign{[Name{'posreturn', Store{}}], Name{'list_of_possibilities', Load{}}}, For{Name{'posib', Store{}}, Name{'pos', Load{}}, [Print{None, [BinOp{Call{Name{'str', Load{}}, [Name{'posreturn', Load{}}], [], None, None}, Add{}, Str{' POS return'}}], True}, Print{None, [BinOp{Call{Name{'str', Load{}}, [Name{'list_of_possibilities', Load{}}], [], None, None}, Add{}, Str{' List_of_possibilities'}}], True}, Print{None, [BinOp{Call{Name{'str', Load{}}, [Name{'pos', Load{}}], [], None, None}, Add{}, Str{' POS'}}], True}, For{Name{'letter', Store{}}, Name{'word', Load{}}, [Expr{Call{Attribute{Name{'letters', Load{}}, 'append', Load{}}, [Name{'letter', Load{}}], [], None, None}}], []}, Assign{[Name{'removed', Store{}}], Name{'False', Load{}}}, Assign{[Name{'posibl', Store{}}], Call{Attribute{Name{'posib', Load{}}, 'lower', Load{}}, [], [], None, None}}, Print{None, [Name{'posib', Load{}}], True}, Print{None, [Name{'posibl', Load{}}], True}, Print{None, [Str{'\n'}], True}, If{Compare{Name{'word', Load{}}, [Eq{}], [Name{'posibl', Load{}}]}, [Print{None, [Name{'removed', Load{}}], True}, If{Compare{Name{'removed', Load{}}, [Eq{}], [Name{'False', Load{}}]}, [Expr{Call{Attribute{Name{'posreturn', Load{}}, 'remove', Load{}}, [Name{'posib', Load{}}], [], None, None}}, Expr{Compare{Name{'removed', Load{}}, [Eq{}], [Name{'True', Load{}}]}}], []}], []}, Assign{[Name{'let', Store{}}], List{[], Load{}}}, For{Name{'letter', Store{}}, Name{'posibl', Load{}}, [Expr{Call{Attribute{Name{'let', Load{}}, 'append', Load{}}, [Name{'letter', Load{}}], [], None, None}}], []}, For{Name{'letter', Store{}}, Name{'let', Load{}}, [Print{None, [BinOp{BinOp{Call{Name{'str', Load{}}, [Name{'letters', Load{}}], [], None, None}, Add{}, Str{' '}}, Add{}, Name{'letter', Load{}}}], True}, TryExcept{[Expr{Call{Attribute{Name{'letters', Load{}}, 'remove', Load{}}, [Name{'letter', Load{}}], [], None, None}}], [ExceptHandler{None, None, [Print{None, [Call{Name{'str', Load{}}, [Name{'reuseletters', Load{}}], [], None, None}], True}, Print{None, [BinOp{Name{'posib', Load{}}, Add{}, Str{' FINAL'}}], True}, Print{None, [Name{'removed', Load{}}], True}, If{Compare{Name{'removed', Load{}}, [Eq{}], [Name{'False', Load{}}]}, [Expr{Call{Attribute{Name{'posreturn', Load{}}, 'remove', Load{}}, [Name{'posib', Load{}}], [], None, None}}, Expr{Compare{Name{'removed', Load{}}, [Eq{}], [Name{'True', Load{}}]}}], []}]}], []}], []}, If{Compare{Call{Name{'len', Load{}}, [Name{'letters', Load{}}], [], None, None}, [NotEq{}], [Num{0}]}, [Print{None, [Name{'removed', Load{}}], True}, If{Compare{Name{'removed', Load{}}, [Eq{}], [Name{'False', Load{}}]}, [Expr{Call{Attribute{Name{'posreturn', Load{}}, 'remove', Load{}}, [Name{'posib', Load{}}], [], None, None}}, Expr{Compare{Name{'removed', Load{}}, [Eq{}], [Name{'True', Load{}}]}}], []}], []}], []}, Return{Name{'posreturn', Load{}}}], []}]}
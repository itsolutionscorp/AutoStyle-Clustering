Module{[FunctionDef{'detect_anagrams', arguments{[Name{'test_word', Param{}}, Name{'list_of_words', Param{}}], None, None, []}, [Assign{[Name{'test_word', Store{}}], Call{Attribute{Name{'test_word', Load{}}, 'lower', Load{}}, [], [], None, None}}, Print{None, [Name{'test_word', Load{}}], True}, Assign{[Name{'list_of_anagrams', Store{}}], List{[], Load{}}}, For{Name{'word', Store{}}, Name{'list_of_words', Load{}}, [Assign{[Name{'word_holder', Store{}}], Name{'word', Load{}}}, Assign{[Name{'word', Store{}}], Call{Attribute{Name{'word', Load{}}, 'lower', Load{}}, [], [], None, None}}, If{Compare{Name{'test_word', Load{}}, [Eq{}], [Name{'word', Load{}}]}, [Pass{}], [For{Name{'letter', Store{}}, Name{'test_word', Load{}}, [If{Compare{Name{'letter', Load{}}, [In{}], [Name{'word', Load{}}]}, [Assign{[Name{'pos', Store{}}], Call{Attribute{Name{'word', Load{}}, 'index', Load{}}, [Name{'letter', Load{}}], [], None, None}}, Assign{[Name{'word', Store{}}], BinOp{Subscript{Name{'word', Load{}}, Slice{None, Name{'pos', Load{}}, None}, Load{}}, Add{}, Subscript{Name{'word', Load{}}, Slice{BinOp{Name{'pos', Load{}}, Add{}, Num{1}}, None, None}, Load{}}}}], [Break{}]}], [If{UnaryOp{Not{}, Name{'word', Load{}}}, [Expr{Call{Attribute{Name{'list_of_anagrams', Load{}}, 'append', Load{}}, [Name{'word_holder', Load{}}], [], None, None}}], []}]}]}], []}, Return{Name{'list_of_anagrams', Load{}}}], []}]}
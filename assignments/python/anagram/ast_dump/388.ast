Module{[FunctionDef{'detect_anagrams', arguments{[Name{'word', Param{}}, Name{'candidate_list', Param{}}], None, None, []}, [Assign{[Name{'return_list', Store{}}], List{[], Load{}}}, Assign{[Name{'word_letters', Store{}}], ListComp{Name{'letter', Load{}}, [comprehension{Name{'letter', Store{}}, Call{Attribute{Name{'word', Load{}}, 'lower', Load{}}, [], [], None, None}, []}]}}, Expr{Call{Attribute{Name{'word_letters', Load{}}, 'sort', Load{}}, [], [], None, None}}, For{Name{'candidate', Store{}}, Name{'candidate_list', Load{}}, [Assign{[Name{'candidate_letters', Store{}}], ListComp{Name{'letter', Load{}}, [comprehension{Name{'letter', Store{}}, Call{Attribute{Name{'candidate', Load{}}, 'lower', Load{}}, [], [], None, None}, []}]}}, Expr{Call{Attribute{Name{'candidate_letters', Load{}}, 'sort', Load{}}, [], [], None, None}}, If{BoolOp{And{}, [Compare{Name{'word_letters', Load{}}, [Eq{}], [Name{'candidate_letters', Load{}}]}, Compare{Call{Attribute{Name{'word', Load{}}, 'lower', Load{}}, [], [], None, None}, [NotEq{}], [Call{Attribute{Name{'candidate', Load{}}, 'lower', Load{}}, [], [], None, None}]}]}, [Expr{Call{Attribute{Name{'return_list', Load{}}, 'append', Load{}}, [Name{'candidate', Load{}}], [], None, None}}], []}], []}, Return{Name{'return_list', Load{}}}], []}]}
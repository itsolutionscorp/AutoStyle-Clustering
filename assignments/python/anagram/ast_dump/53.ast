Module{[Assign{[Name{'__author__', Store{}}], Str{'Greg'}}, FunctionDef{'detect_anagrams', arguments{[Name{'word', Param{}}, Name{'possible_anagrams', Param{}}], None, None, []}, [Expr{Str{'\n    compares string word to list of strings possible_anagrams for anagrams, \n    ignoring capitalization, excluding exact order matches. Returns list of \n    strings.\n    '}}, Assign{[Name{'matches', Store{}}], List{[], Load{}}}, Assign{[Name{'word', Store{}}], Call{Attribute{Name{'word', Load{}}, 'lower', Load{}}, [], [], None, None}}, Assign{[Name{'sort_word', Store{}}], Call{Name{'sorted', Load{}}, [Name{'word', Load{}}], [], None, None}}, For{Name{'x', Store{}}, Call{Name{'range', Load{}}, [Call{Name{'len', Load{}}, [Name{'possible_anagrams', Load{}}], [], None, None}], [], None, None}, [Assign{[Name{'lower_possible', Store{}}], Call{Attribute{Subscript{Name{'possible_anagrams', Load{}}, Index{Name{'x', Load{}}}, Load{}}, 'lower', Load{}}, [], [], None, None}}, If{BoolOp{And{}, [Compare{Call{Name{'sorted', Load{}}, [Name{'lower_possible', Load{}}], [], None, None}, [Eq{}], [Name{'sort_word', Load{}}]}, Compare{Name{'lower_possible', Load{}}, [NotEq{}], [Name{'word', Load{}}]}]}, [Expr{Call{Attribute{Name{'matches', Load{}}, 'append', Load{}}, [Subscript{Name{'possible_anagrams', Load{}}, Index{Name{'x', Load{}}}, Load{}}], [], None, None}}], []}], []}, Return{Name{'matches', Load{}}}], []}]}
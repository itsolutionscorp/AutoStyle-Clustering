Module{[ImportFrom{'itertools', [alias{'permutations', None}], 0}, FunctionDef{'detect_anagrams', arguments{[Name{'word', Param{}}, Name{'full_list', Param{}}], None, None, []}, [Assign{[Name{'anagram_list', Store{}}], ListComp{Call{Attribute{Str{''}, 'join', Load{}}, [Name{'p', Load{}}], [], None, None}, [comprehension{Name{'p', Store{}}, Call{Name{'permutations', Load{}}, [Name{'word', Load{}}], [], None, None}, []}]}}, Assign{[Name{'return_sub_list', Store{}}], List{[], Load{}}}, For{Name{'list_word', Store{}}, Name{'full_list', Load{}}, [For{Name{'anagram', Store{}}, Name{'anagram_list', Load{}}, [If{BoolOp{And{}, [Compare{Call{Attribute{Call{Name{'str', Load{}}, [Name{'anagram', Load{}}], [], None, None}, 'lower', Load{}}, [], [], None, None}, [Eq{}], [Call{Attribute{Call{Name{'str', Load{}}, [Name{'list_word', Load{}}], [], None, None}, 'lower', Load{}}, [], [], None, None}]}, Compare{Call{Attribute{Call{Name{'str', Load{}}, [Name{'list_word', Load{}}], [], None, None}, 'lower', Load{}}, [], [], None, None}, [NotEq{}], [Name{'word', Load{}}]}]}, [Expr{Call{Attribute{Name{'return_sub_list', Load{}}, 'append', Load{}}, [Name{'list_word', Load{}}], [], None, None}}, Break{}], []}], []}], []}, Return{Name{'return_sub_list', Load{}}}], []}]}
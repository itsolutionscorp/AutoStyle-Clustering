Module{[FunctionDef{'detect_anagrams', arguments{[Name{'word', Param{}}, Name{'phrase', Param{}}], None, None, []}, [Expr{Str{'\n    return a list of words in phrase that are an anagram of word\n    '}}, Return{ListComp{Name{'s', Load{}}, [comprehension{Name{'s', Store{}}, Name{'phrase', Load{}}, [BoolOp{And{}, [Compare{Call{Name{'sorted', Load{}}, [Call{Attribute{Name{'word', Load{}}, 'lower', Load{}}, [], [], None, None}], [], None, None}, [Eq{}], [Call{Name{'sorted', Load{}}, [Call{Attribute{Name{'s', Load{}}, 'lower', Load{}}, [], [], None, None}], [], None, None}]}, Compare{Call{Attribute{Name{'word', Load{}}, 'lower', Load{}}, [], [], None, None}, [NotEq{}], [Call{Attribute{Name{'s', Load{}}, 'lower', Load{}}, [], [], None, None}]}]}]}]}}], []}]}
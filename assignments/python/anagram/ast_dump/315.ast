Module{[Import{[alias{'operator', None}]}, FunctionDef{'detect_anagrams', arguments{[Name{'testword', Param{}}, Name{'wordlist', Param{}}], None, None, []}, [Assign{[Name{'anagrams', Store{}}], List{[], Load{}}}, Assign{[Name{'testdict', Store{}}], DictComp{Name{'x', Load{}}, Call{Attribute{Call{Attribute{Name{'testword', Load{}}, 'lower', Load{}}, [], [], None, None}, 'count', Load{}}, [Name{'x', Load{}}], [], None, None}, [comprehension{Name{'x', Store{}}, Call{Attribute{Name{'testword', Load{}}, 'lower', Load{}}, [], [], None, None}, []}]}}, For{Name{'word', Store{}}, Name{'wordlist', Load{}}, [Assign{[Name{'worddict', Store{}}], DictComp{Name{'x', Load{}}, Call{Attribute{Call{Attribute{Name{'word', Load{}}, 'lower', Load{}}, [], [], None, None}, 'count', Load{}}, [Name{'x', Load{}}], [], None, None}, [comprehension{Name{'x', Store{}}, Call{Attribute{Name{'word', Load{}}, 'lower', Load{}}, [], [], None, None}, []}]}}, If{BoolOp{And{}, [Compare{Name{'testdict', Load{}}, [Eq{}], [Name{'worddict', Load{}}]}, Compare{Call{Attribute{Name{'testword', Load{}}, 'lower', Load{}}, [], [], None, None}, [NotEq{}], [Call{Attribute{Name{'word', Load{}}, 'lower', Load{}}, [], [], None, None}]}]}, [Expr{Call{Attribute{Name{'anagrams', Load{}}, 'append', Load{}}, [Name{'word', Load{}}], [], None, None}}], []}], []}, Return{Name{'anagrams', Load{}}}], []}]}
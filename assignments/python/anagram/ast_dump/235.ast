Module{[Expr{Str{'\nloop through each possible_anagram in the list provided\nchecks are case-insensitive\nif the word is not identical to the possible_anagram and\nthe sorted word matches the sorted possible_anagram\nadd the possible_anagram to the answer list\n'}}, FunctionDef{'detect_anagrams', arguments{[Name{'word', Param{}}, Name{'possible_anagrams', Param{}}], None, None, []}, [Assign{[Name{'anagrams', Store{}}], List{[], Load{}}}, For{Name{'possible_anagram', Store{}}, Name{'possible_anagrams', Load{}}, [If{BoolOp{And{}, [Compare{Call{Attribute{Name{'word', Load{}}, 'lower', Load{}}, [], [], None, None}, [NotEq{}], [Call{Attribute{Name{'possible_anagram', Load{}}, 'lower', Load{}}, [], [], None, None}]}, Compare{Call{Name{'sorted', Load{}}, [Call{Attribute{Name{'word', Load{}}, 'lower', Load{}}, [], [], None, None}], [], None, None}, [Eq{}], [Call{Name{'sorted', Load{}}, [Call{Attribute{Name{'possible_anagram', Load{}}, 'lower', Load{}}, [], [], None, None}], [], None, None}]}]}, [Expr{Call{Attribute{Name{'anagrams', Load{}}, 'append', Load{}}, [Name{'possible_anagram', Load{}}], [], None, None}}], []}], []}, Return{Name{'anagrams', Load{}}}], []}]}
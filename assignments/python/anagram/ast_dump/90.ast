Module{[Import{[alias{'collections', None}]}, FunctionDef{'detect_anagrams', arguments{[Name{'word', Param{}}, Name{'candidates', Param{}}], None, None, []}, [Expr{Str{'\n    detect_anagrams{str, list of str} -> list of str\n    Return the list of strings from candidates that are anagrams to word.\n    '}}, Assign{[Name{'word_lower', Store{}}], Call{Attribute{Name{'word', Load{}}, 'lower', Load{}}, [], [], None, None}}, Assign{[Name{'word_key', Store{}}], Call{Attribute{Name{'collections', Load{}}, 'Counter', Load{}}, [Name{'word_lower', Load{}}], [], None, None}}, Assign{[Name{'anagrams', Store{}}], Call{Name{'list', Load{}}, [], [], None, None}}, For{Name{'candidate', Store{}}, Name{'candidates', Load{}}, [Assign{[Name{'candidate_lower', Store{}}], Call{Attribute{Name{'candidate', Load{}}, 'lower', Load{}}, [], [], None, None}}, If{BoolOp{And{}, [Compare{Name{'word_lower', Load{}}, [NotEq{}], [Name{'candidate_lower', Load{}}]}, Compare{Name{'word_key', Load{}}, [Eq{}], [Call{Attribute{Name{'collections', Load{}}, 'Counter', Load{}}, [Name{'candidate_lower', Load{}}], [], None, None}]}]}, [Expr{Call{Attribute{Name{'anagrams', Load{}}, 'append', Load{}}, [Name{'candidate', Load{}}], [], None, None}}], []}], []}, Return{Name{'anagrams', Load{}}}], []}]}
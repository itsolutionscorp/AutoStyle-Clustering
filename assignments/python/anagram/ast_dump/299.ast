Module{[FunctionDef{'detect_anagrams', arguments{[Name{'word1', Param{}}, Name{'wordlist', Param{}}], None, None, []}, [Expr{Str{'\n    Return True if anagram of word1 found in wordList else False\n    param word1 String\n    param wordlist List of Strings\n    return bool\n    '}}, Assign{[Name{'newlist', Store{}}], ListComp{Name{'x', Load{}}, [comprehension{Name{'x', Store{}}, Name{'wordlist', Load{}}, [BoolOp{And{}, [Compare{Call{Name{'len', Load{}}, [Name{'word1', Load{}}], [], None, None}, [Eq{}], [Call{Name{'len', Load{}}, [Name{'x', Load{}}], [], None, None}]}, Compare{Call{Attribute{Name{'x', Load{}}, 'lower', Load{}}, [], [], None, None}, [NotEq{}], [Call{Attribute{Name{'word1', Load{}}, 'lower', Load{}}, [], [], None, None}]}]}]}]}}, Assign{[Name{'newlist2', Store{}}], ListComp{Call{Attribute{Name{'idx', Load{}}, 'lower', Load{}}, [], [], None, None}, [comprehension{Name{'idx', Store{}}, Name{'newlist', Load{}}, []}]}}, For{Name{'c', Store{}}, Call{Attribute{Name{'word1', Load{}}, 'lower', Load{}}, [], [], None, None}, [Assign{[Name{'newlist2', Store{}}], ListComp{Call{Attribute{Name{'word', Load{}}, 'replace', Load{}}, [Name{'c', Load{}}, Str{''}, Num{1}], [], None, None}, [comprehension{Name{'word', Store{}}, Name{'newlist2', Load{}}, []}]}}], []}, Return{ListComp{Subscript{Name{'newlist', Load{}}, Index{Name{'idx', Load{}}}, Load{}}, [comprehension{Name{'idx', Store{}}, Call{Name{'range', Load{}}, [Call{Name{'len', Load{}}, [Name{'newlist2', Load{}}], [], None, None}], [], None, None}, [Compare{Call{Name{'len', Load{}}, [Subscript{Name{'newlist2', Load{}}, Index{Name{'idx', Load{}}}, Load{}}], [], None, None}, [Eq{}], [Num{0}]}]}]}}], []}]}
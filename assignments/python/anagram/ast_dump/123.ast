Module{[FunctionDef{'detect_anagrams', arguments{[Name{'source', Param{}}, Name{'wordlist', Param{}}], None, None, []}, [Expr{Str{'detect_anagrams\n  detect_anagrams takes a source word and searchs a given list\n  for any anagrams in that list, returning a list of anagrams\n  Args\n      param source the string which we are searching for anagrams for\n      param wordlist a list of strings that are potential anagrams\n  Returns\n      A list of anagrams, which may be empty\n  '}}, Assign{[Name{'src', Store{}}], Call{Name{'list', Load{}}, [Call{Attribute{Name{'source', Load{}}, 'lower', Load{}}, [], [], None, None}], [], None, None}}, Assign{[Name{'words', Store{}}], Call{Name{'list', Load{}}, [], [], None, None}}, For{Name{'word', Store{}}, Name{'wordlist', Load{}}, [Assign{[Name{'s', Store{}}], Call{Name{'list', Load{}}, [Name{'src', Load{}}], [], None, None}}, Assign{[Name{'w', Store{}}], Call{Name{'list', Load{}}, [Call{Attribute{Name{'word', Load{}}, 'lower', Load{}}, [], [], None, None}], [], None, None}}, For{Name{'ch', Store{}}, Name{'src', Load{}}, [If{Compare{Name{'ch', Load{}}, [In{}], [Name{'w', Load{}}]}, [Expr{Call{Attribute{Name{'w', Load{}}, 'remove', Load{}}, [Name{'ch', Load{}}], [], None, None}}, Expr{Call{Attribute{Name{'s', Load{}}, 'remove', Load{}}, [Name{'ch', Load{}}], [], None, None}}], []}], []}, If{BoolOp{And{}, [Compare{Call{Name{'len', Load{}}, [Name{'w', Load{}}], [], None, None}, [Eq{}], [Num{0}]}, Compare{Call{Name{'len', Load{}}, [Name{'s', Load{}}], [], None, None}, [Eq{}], [Num{0}]}, Compare{Call{Attribute{Name{'source', Load{}}, 'lower', Load{}}, [], [], None, None}, [NotEq{}], [Call{Attribute{Name{'word', Load{}}, 'lower', Load{}}, [], [], None, None}]}]}, [Expr{Call{Attribute{Name{'words', Load{}}, 'append', Load{}}, [Name{'word', Load{}}], [], None, None}}], []}], []}, Return{Name{'words', Load{}}}], []}]}
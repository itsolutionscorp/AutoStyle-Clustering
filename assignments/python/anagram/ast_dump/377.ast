Module{[Expr{Str{'\nanagram - a module for detecing anagrams.\n'}}, ImportFrom{'itertools', [alias{'permutations', None}], 0}, FunctionDef{'detect_anagrams', arguments{[Name{'word', Param{}}, Name{'candidates', Param{}}], None, None, []}, [Expr{Str{'\n    Filter out all entries among the candidates that are not anagrams of the given word.\n    '}}, Assign{[Name{'word', Store{}}], Call{Attribute{Name{'word', Load{}}, 'lower', Load{}}, [], [], None, None}}, Assign{[Name{'anagrams', Store{}}], SetComp{Call{Attribute{Str{''}, 'join', Load{}}, [Name{'permutation', Load{}}], [], None, None}, [comprehension{Name{'permutation', Store{}}, Call{Name{'permutations', Load{}}, [Name{'word', Load{}}], [], None, None}, []}]}}, Expr{Call{Attribute{Name{'anagrams', Load{}}, 'remove', Load{}}, [Name{'word', Load{}}], [], None, None}}, Return{ListComp{Name{'candidate', Load{}}, [comprehension{Name{'candidate', Store{}}, Name{'candidates', Load{}}, [Compare{Call{Attribute{Name{'candidate', Load{}}, 'lower', Load{}}, [], [], None, None}, [In{}], [Name{'anagrams', Load{}}]}]}]}}], []}]}
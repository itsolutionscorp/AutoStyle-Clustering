Module{[Expr{Str{'\n.. moduleauthor Timothy Helton <timothy.j.helton@gmail.com>\n'}}, ImportFrom{'collections', [alias{'Counter', None}], 0}, FunctionDef{'detect_anagrams', arguments{[Name{'word', Param{}}, Name{'candidates', Param{}}], None, None, []}, [Expr{Str{'\n    Determine if anagram of word exists in the given list of candidates.\n    param str word word to be tested\n    param list candidates potential list of anagrams\n    return item from candidates that is an anagram of word if one exists\n    rtype list\n    '}}, Assign{[Name{'letters', Store{}}], Call{Name{'Counter', Load{}}, [Call{Attribute{Name{'word', Load{}}, 'lower', Load{}}, [], [], None, None}], [], None, None}}, Return{ListComp{Name{'x', Load{}}, [comprehension{Name{'x', Store{}}, Name{'candidates', Load{}}, [BoolOp{And{}, [Compare{Call{Attribute{Name{'x', Load{}}, 'lower', Load{}}, [], [], None, None}, [NotEq{}], [Call{Attribute{Name{'word', Load{}}, 'lower', Load{}}, [], [], None, None}]}, Compare{Call{Name{'Counter', Load{}}, [Call{Attribute{Name{'x', Load{}}, 'lower', Load{}}, [], [], None, None}], [], None, None}, [Eq{}], [Name{'letters', Load{}}]}]}]}]}}], []}, If{Compare{Name{'__name__', Load{}}, [Eq{}], [Str{'__main__'}]}, [Print{None, [Call{Name{'detect_anagrams', Load{}}, [Str{'banana'}, List{[Str{'banana'}], Load{}}], [], None, None}], True}, Assign{[Name{'profile_statement', Store{}}], Str{''}}, Assign{[Name{'timing', Store{}}], Name{'False', Load{}}}, Assign{[Tuple{[Name{'benchmarking', Store{}}, Name{'repeat', Store{}}, Name{'number', Store{}}], Store{}}], Tuple{[Name{'False', Load{}}, Num{3}, Num{1000000.0}], Load{}}}, Assign{[Name{'setup', Store{}}], Name{'None', Load{}}}, If{Name{'timing', Load{}}, [Import{[alias{'cProfile', None}]}, Import{[alias{'subprocess', None}]}, Assign{[Name{'filename', Store{}}], Call{Attribute{Str{'{0}.profile'}, 'format', Load{}}, [Call{Attribute{Name{'__file__', Load{}}, 'rstrip', Load{}}, [Str{'.py'}], [], None, None}], [], None, None}}, Expr{Call{Attribute{Name{'cProfile', Load{}}, 'run', Load{}}, [Name{'profile_statement', Load{}}], [keyword{'filename', Name{'filename', Load{}}}], None, None}}, Expr{Call{Attribute{Name{'subprocess', Load{}}, 'call', Load{}}, [List{[Str{'snakeviz'}, Name{'filename', Load{}}], Load{}}], [], None, None}}], []}, If{Name{'benchmarking', Load{}}, [Import{[alias{'timeit', None}]}, Assign{[Name{'t_b', Store{}}], Call{Attribute{Name{'timeit', Load{}}, 'Timer', Load{}}, [], [keyword{'stmt', Name{'profile_statement', Load{}}}, keyword{'setup', Name{'setup', Load{}}}], None, None}}, Assign{[Name{'r_b', Store{}}], Call{Name{'int', Load{}}, [Name{'repeat', Load{}}], [], None, None}}, Assign{[Name{'n_b', Store{}}], Call{Name{'int', Load{}}, [Name{'number', Load{}}], [], None, None}}, Assign{[Name{'timing_info', Store{}}], Call{Attribute{Name{'t_b', Load{}}, 'repeat', Load{}}, [], [keyword{'repeat', Name{'r_b', Load{}}}, keyword{'number', Name{'n_b', Load{}}}], None, None}}, Assign{[Name{'timing_result', Store{}}], ListComp{BinOp{Name{'x_b', Load{}}, Div{}, Name{'n_b', Load{}}}, [comprehension{Name{'x_b', Store{}}, Name{'timing_info', Load{}}, []}]}}], []}], []}]}
Module{[FunctionDef{'detect_anagrams', arguments{[Name{'str1', Param{}}, Name{'lst1', Param{}}], None, None, []}, [Assign{[Name{'s1', Store{}}], ListComp{Name{'x', Load{}}, [comprehension{Name{'x', Store{}}, Call{Attribute{Name{'str1', Load{}}, 'lower', Load{}}, [], [], None, None}, []}]}}, Expr{Call{Attribute{Name{'s1', Load{}}, 'sort', Load{}}, [], [], None, None}}, Assign{[Name{'ret', Store{}}], List{[], Load{}}}, For{Name{'s', Store{}}, Name{'lst1', Load{}}, [If{Compare{Name{'s', Load{}}, [Eq{}], [Name{'str1', Load{}}]}, [Break{}], []}, Assign{[Name{'s2', Store{}}], ListComp{Name{'x', Load{}}, [comprehension{Name{'x', Store{}}, Call{Attribute{Name{'s', Load{}}, 'lower', Load{}}, [], [], None, None}, []}]}}, Expr{Call{Attribute{Name{'s2', Load{}}, 'sort', Load{}}, [], [], None, None}}, If{Compare{Name{'s2', Load{}}, [Eq{}], [Name{'s1', Load{}}]}, [Expr{Call{Attribute{Name{'ret', Load{}}, 'append', Load{}}, [Name{'s', Load{}}], [], None, None}}], []}], []}, Return{Name{'ret', Load{}}}], []}]}
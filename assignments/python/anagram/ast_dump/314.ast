Module{[ImportFrom{'itertools', [alias{'permutations', None}], 0}, FunctionDef{'detect_anagrams', arguments{[Name{'original_word', Param{}}, Name{'words_to_check', Param{}}], None, None, []}, [Assign{[Name{'original_word', Store{}}], Call{Attribute{Name{'original_word', Load{}}, 'lower', Load{}}, [], [], None, None}}, Assign{[Name{'anagrams_of_word', Store{}}], ListComp{Call{Attribute{Str{''}, 'join', Load{}}, [Name{'p', Load{}}], [], None, None}, [comprehension{Name{'p', Store{}}, Call{Name{'permutations', Load{}}, [Name{'original_word', Load{}}], [], None, None}, []}]}}, Assign{[Name{'detected', Store{}}], Call{Name{'list', Load{}}, [], [], None, None}}, For{Name{'word', Store{}}, Name{'words_to_check', Load{}}, [If{BoolOp{And{}, [Compare{Call{Attribute{Name{'word', Load{}}, 'lower', Load{}}, [], [], None, None}, [In{}], [Name{'anagrams_of_word', Load{}}]}, UnaryOp{Not{}, Compare{Call{Attribute{Name{'word', Load{}}, 'lower', Load{}}, [], [], None, None}, [Eq{}], [Name{'original_word', Load{}}]}}]}, [Expr{Call{Attribute{Name{'detected', Load{}}, 'append', Load{}}, [Name{'word', Load{}}], [], None, None}}], []}], []}, Return{Name{'detected', Load{}}}], []}]}
Module{[Assign{[Name{'__author__', Store{}}], Str{'Greg'}}, FunctionDef{'detect_anagrams', arguments{[Name{'base_word', Param{}}, Name{'possible_anagrams', Param{}}], None, None, []}, [Expr{Str{'\n    compares string base_word to list of strings possible_anagrams for\n    for anagrams, ignoring capitalization, excluding exact matches. \n    Returns list of strings.\n    '}}, Assign{[Name{'solutions', Store{}}], List{[], Load{}}}, Assign{[Name{'base_word', Store{}}], Call{Attribute{Name{'base_word', Load{}}, 'lower', Load{}}, [], [], None, None}}, Assign{[Name{'sorted_base_word', Store{}}], Call{Name{'sorted', Load{}}, [Name{'base_word', Load{}}], [], None, None}}, For{Name{'x', Store{}}, Call{Name{'range', Load{}}, [Call{Name{'len', Load{}}, [Name{'possible_anagrams', Load{}}], [], None, None}], [], None, None}, [If{BoolOp{And{}, [Compare{Call{Name{'sorted', Load{}}, [Call{Attribute{Subscript{Name{'possible_anagrams', Load{}}, Index{Name{'x', Load{}}}, Load{}}, 'lower', Load{}}, [], [], None, None}], [], None, None}, [Eq{}], [Name{'sorted_base_word', Load{}}]}, Compare{Call{Attribute{Subscript{Name{'possible_anagrams', Load{}}, Index{Name{'x', Load{}}}, Load{}}, 'lower', Load{}}, [], [], None, None}, [NotEq{}], [Name{'base_word', Load{}}]}]}, [Expr{Call{Attribute{Name{'solutions', Load{}}, 'append', Load{}}, [Subscript{Name{'possible_anagrams', Load{}}, Index{Name{'x', Load{}}}, Load{}}], [], None, None}}], []}], []}, Return{Name{'solutions', Load{}}}], []}]}
Module{[FunctionDef{'detect_anagrams', arguments{[Name{'wordRef', Param{}}, Name{'propositions', Param{}}], None, None, []}, [Assign{[Name{'result', Store{}}], List{[], Load{}}}, For{Name{'maybe', Store{}}, Name{'propositions', Load{}}, [Assign{[Name{'isIt', Store{}}], Name{'True', Load{}}}, If{BoolOp{And{}, [Compare{Call{Name{'len', Load{}}, [Name{'maybe', Load{}}], [], None, None}, [Eq{}], [Call{Name{'len', Load{}}, [Name{'wordRef', Load{}}], [], None, None}]}, UnaryOp{Not{}, Compare{Call{Attribute{Name{'maybe', Load{}}, 'lower', Load{}}, [], [], None, None}, [Eq{}], [Call{Attribute{Name{'wordRef', Load{}}, 'lower', Load{}}, [], [], None, None}]}}]}, [For{Name{'letter', Store{}}, Call{Attribute{Name{'maybe', Load{}}, 'lower', Load{}}, [], [], None, None}, [If{BoolOp{Or{}, [UnaryOp{Not{}, Compare{Name{'letter', Load{}}, [In{}], [Call{Attribute{Name{'wordRef', Load{}}, 'lower', Load{}}, [], [], None, None}]}}, Compare{Call{Attribute{Call{Attribute{Name{'wordRef', Load{}}, 'lower', Load{}}, [], [], None, None}, 'count', Load{}}, [Name{'letter', Load{}}], [], None, None}, [NotEq{}], [Call{Attribute{Call{Attribute{Name{'maybe', Load{}}, 'lower', Load{}}, [], [], None, None}, 'count', Load{}}, [Name{'letter', Load{}}], [], None, None}]}]}, [Assign{[Name{'isIt', Store{}}], Name{'False', Load{}}}, Break{}], []}], []}, If{Name{'isIt', Load{}}, [Assign{[Name{'result', Store{}}], BinOp{Name{'result', Load{}}, Add{}, List{[Name{'maybe', Load{}}], Load{}}}}], []}], []}], []}, Return{Name{'result', Load{}}}], []}]}
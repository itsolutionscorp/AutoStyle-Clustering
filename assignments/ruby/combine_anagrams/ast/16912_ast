s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :dup_words, s(:call, s(:const, :Array), :new, s(:lvar, :words))), s(:lasgn, :index, s(:lit, 0)), s(:lasgn, :len, s(:call, s(:lvar, :dup_words), :length)), s(:iter, s(:call, s(:lvar, :dup_words), :each), s(:args, :t), s(:block, s(:call, s(:lvar, :dup_words), :push, s(:call, s(:call, s(:call, s(:call, s(:call, s(:call, s(:lvar, :t), :downcase), :split, s(:lit, //)), :sort), :join), :+, s(:str, "_")), :+, s(:call, s(:lvar, :index), :to_s))), s(:lasgn, :index, s(:call, s(:lvar, :index), :+, s(:lit, 1))), s(:if, s(:call, s(:lvar, :index), :==, s(:lvar, :len)), s(:break), nil))), s(:call, s(:lvar, :dup_words), :slice!, s(:lit, 0), s(:call, s(:call, s(:lvar, :dup_words), :length), :/, s(:lit, 2))), s(:call, s(:lvar, :dup_words), :sort!), s(:lasgn, :last_elem, s(:nil)), s(:lasgn, :ans, s(:call, s(:const, :Array), :new)), s(:lasgn, :sub_ans, s(:call, s(:const, :Array), :new)), s(:iter, s(:call, s(:lvar, :dup_words), :each), s(:args, :t), s(:block, s(:match2, s(:lit, /([a-z]+)_(\d+)/), s(:lvar, :t)), s(:if, s(:call, s(:lvar, :last_elem), :==, s(:nth_ref, 1)), s(:call, s(:lvar, :sub_ans), :push, s(:call, s(:lvar, :words), :[], s(:call, s(:nth_ref, 2), :to_i))), s(:block, s(:if, s(:call, s(:lvar, :last_elem), :!=, s(:nil)), s(:call, s(:lvar, :ans), :push, s(:lvar, :sub_ans)), nil), s(:lasgn, :sub_ans, s(:call, s(:const, :Array), :new)), s(:call, s(:lvar, :sub_ans), :push, s(:call, s(:lvar, :words), :[], s(:call, s(:nth_ref, 2), :to_i))), s(:lasgn, :last_elem, s(:nth_ref, 1)))))), s(:if, s(:call, s(:lvar, :last_elem), :!=, s(:nil)), s(:call, s(:lvar, :ans), :push, s(:lvar, :sub_ans)), nil), s(:return, s(:lvar, :ans)))
s(:block, s(:defn, :palindrome?, s(:args, :string), s(:call, nil, :puts, s(:lvar, :string)), s(:lasgn, :newS, s(:call, s(:call, s(:lvar, :string), :downcase), :gsub!, s(:lit, /\W?/i), s(:str, ""))), s(:return, s(:call, s(:lvar, :newS), :==, s(:call, s(:lvar, :newS), :reverse)))), s(:defn, :count_words, s(:args, :string), s(:iter, s(:call, s(:call, s(:call, s(:lvar, :string), :downcase), :split), :each), s(:args, :e), s(:if, s(:call, s(:call, nil, :h), :has_key?, s(:lvar, :e)), s(:attrasgn, s(:call, nil, :h), :[]=, s(:lvar, :e), s(:call, s(:lit, 1), :+, s(:call, s(:call, nil, :h), :[], s(:lvar, :e)))), s(:attrasgn, s(:call, nil, :h), :[]=, s(:lvar, :e), s(:lit, 1)))), s(:call, nil, :puts, s(:call, nil, :h))), s(:class, :WrongNumberOfPlayersError, s(:const, :StandardError)), s(:class, :NoSuchStrategyError, s(:const, :StandardError)), s(:defn, :rps_game_winner, s(:args, :game), s(:if, s(:call, s(:call, s(:lvar, :game), :length), :==, s(:lit, 2)), nil, s(:call, nil, :raise, s(:const, :WrongNumberOfPlayersError))), s(:lasgn, :map, s(:hash, s(:str, "R"), s(:str, "S"), s(:str, "P"), s(:str, "R"), s(:str, "S"), s(:str, "P"))), s(:iter, s(:call, s(:lvar, :game), :each), s(:args, :key, :value), s(:if, s(:call, s(:lvar, :map), :has_key?, s(:lvar, :value)), nil, s(:call, nil, :raise, s(:const, :NoSuchStrategyError)))), s(:if, s(:call, s(:call, s(:call, s(:lvar, :map), :[], s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 1)), :[], s(:lit, 1))), :downcase), :==, s(:call, s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 0)), :[], s(:lit, 1)), :downcase)), s(:return, s(:call, s(:lvar, :game), :[], s(:lit, 1))), s(:return, s(:call, s(:lvar, :game), :[], s(:lit, 0))))), s(:defn, :rps_tournament_winner, s(:args, :tourney), s(:if, s(:call, s(:call, s(:call, s(:lvar, :tourney), :first), :length), :==, s(:lit, 2)), nil, s(:return, s(:lvar, :tourney))), s(:lasgn, :winners, s(:call, s(:const, :Array), :new)), s(:iter, s(:call, s(:lvar, :tourney), :each), s(:args, :subT), s(:call, s(:lvar, :winners), :push, s(:call, nil, :rps_tournament_winner, s(:lvar, :subT)))), s(:return, s(:call, nil, :rps_game_winner, s(:lvar, :winners)))), s(:lasgn, :a, s(:array, s(:array, s(:str, "Armando"), s(:str, "P")), s(:array, s(:str, "Dave"), s(:str, "S")), s(:array, s(:str, "Fail"), s(:str, "S")))), s(:lasgn, :a, s(:array, s(:array, s(:str, "Dave"), s(:str, "S")))), s(:lasgn, :a, s(:array, s(:array, s(:str, "Armando"), s(:str, "X")), s(:array, s(:str, "Dave"), s(:str, "S")))), s(:lasgn, :a, s(:array, s(:array, s(:str, "Armando"), s(:str, "P")), s(:array, s(:str, "Dave"), s(:str, "S")))), s(:lasgn, :a, s(:array, s(:array, s(:str, "Armando"), s(:str, "S")), s(:array, s(:str, "Dave"), s(:str, "P")))), s(:lasgn, :a, s(:array, s(:array, s(:str, "Armando"), s(:str, "S")), s(:array, s(:str, "Dave"), s(:str, "S")))), s(:lasgn, :tourney, s(:array, s(:array, s(:str, "Richard"), s(:str, "R")), s(:array, s(:str, "Michael"), s(:str, "S")))), s(:lasgn, :tourney, s(:array, s(:array, s(:array, s(:array, s(:str, "Armando"), s(:str, "P")), s(:array, s(:str, "Dave"), s(:str, "S"))), s(:array, s(:array, s(:str, "Richard"), s(:str, "R")), s(:array, s(:str, "Michael"), s(:str, "S")))), s(:array, s(:array, s(:array, s(:str, "Allen"), s(:str, "S")), s(:array, s(:str, "Omer"), s(:str, "P"))), s(:array, s(:array, s(:str, "David E."), s(:str, "R")), s(:array, s(:str, "Richard X."), s(:str, "P")))))), s(:lasgn, :tourney, s(:array, s(:array, s(:array, s(:str, "Allen"), s(:str, "S")), s(:array, s(:str, "Omer"), s(:str, "P"))), s(:array, s(:array, s(:str, "David E."), s(:str, "R")), s(:array, s(:str, "Richard X."), s(:str, "P"))))), s(:defn, :combine_anagrams, s(:args, :input), s(:lasgn, :result, s(:call, s(:const, :Hash), :new)), s(:iter, s(:call, s(:lvar, :input), :each), s(:args, :word), s(:block, s(:lasgn, :ana, s(:call, s(:call, s(:call, s(:lvar, :word), :downcase), :scan, s(:lit, /./)), :sort)), s(:lasgn, :list, s(:call, s(:lvar, :result), :[], s(:lvar, :ana))), s(:if, s(:call, s(:lvar, :list), :!), s(:lasgn, :list, s(:call, s(:const, :Array), :new)), nil), s(:attrasgn, s(:lvar, :result), :[]=, s(:lvar, :ana), s(:call, s(:lvar, :list), :push, s(:lvar, :word))))), s(:return, s(:call, s(:lvar, :result), :values))), s(:lasgn, :input, s(:array, s(:str, "cars"), s(:str, "for"), s(:str, "potatoes"), s(:str, "Racs"), s(:str, "four"), s(:str, "scar"), s(:str, "creams"), s(:str, "scream"))))
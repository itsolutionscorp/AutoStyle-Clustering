s(:block, s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :ana_list, s(:array)), s(:lasgn, :sorted_list, s(:array)), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word), s(:block, s(:lasgn, :word, s(:call, s(:lvar, :word), :downcase)), s(:lasgn, :temp_list, s(:call, s(:lvar, :word), :scan, s(:lit, /./))), s(:call, s(:lvar, :temp_list), :sort!), s(:call, s(:lvar, :sorted_list), :push, s(:lvar, :temp_list)))), s(:for, s(:dot2, s(:lit, 0), s(:call, s(:call, s(:lvar, :sorted_list), :size), :-, s(:lit, 1))), s(:lasgn, :i), s(:block, s(:lasgn, :exist, s(:false)), s(:iter, s(:call, s(:lvar, :ana_list), :each), s(:args, :item), s(:if, s(:call, s(:lvar, :item), :include?, s(:call, s(:lvar, :words), :[], s(:lvar, :i))), s(:block, s(:lasgn, :exist, s(:true)), s(:break)), nil)), s(:if, s(:call, s(:lvar, :exist), :!), s(:block, s(:lasgn, :temp_list, s(:array)), s(:for, s(:dot2, s(:lvar, :i), s(:call, s(:call, s(:lvar, :sorted_list), :size), :-, s(:lit, 1))), s(:lasgn, :j), s(:if, s(:call, s(:call, s(:lvar, :sorted_list), :[], s(:lvar, :i)), :==, s(:call, s(:lvar, :sorted_list), :[], s(:lvar, :j))), s(:call, s(:lvar, :temp_list), :push, s(:call, s(:lvar, :words), :[], s(:lvar, :j))), nil)), s(:call, s(:lvar, :ana_list), :push, s(:lvar, :temp_list))), nil))), s(:return, s(:lvar, :ana_list))))
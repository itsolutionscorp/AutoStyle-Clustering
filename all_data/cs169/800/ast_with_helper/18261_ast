s(:block, s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :counter, s(:lit, 0)), s(:lasgn, :anaList, s(:call, s(:const, :Array), :new)), s(:lasgn, :firstArray, s(:call, s(:const, :Array), :new)), s(:for, s(:dot3, s(:lit, 0), s(:call, s(:lvar, :words), :length)), s(:lasgn, :i), s(:if, s(:call, s(:lvar, :i), :==, s(:lit, 0)), s(:block, s(:attrasgn, s(:lvar, :firstArray), :[]=, s(:lit, 0), s(:call, s(:lvar, :words), :[], s(:lvar, :i))), s(:attrasgn, s(:lvar, :anaList), :[]=, s(:lit, 0), s(:lvar, :firstArray))), s(:block, s(:for, s(:dot3, s(:lit, 0), s(:call, s(:lvar, :anaList), :length)), s(:lasgn, :j), s(:block, s(:lasgn, :mf, s(:false)), s(:if, s(:call, nil, :is_anagram, s(:call, s(:lvar, :words), :[], s(:lvar, :i)), s(:call, s(:call, s(:lvar, :anaList), :[], s(:lvar, :j)), :[], s(:lit, 0))), s(:block, s(:call, nil, :add_word, s(:call, s(:lvar, :anaList), :[], s(:lvar, :j)), s(:call, s(:lvar, :words), :[], s(:lvar, :i))), s(:lasgn, :mf, s(:true)), s(:break)), nil))), s(:if, s(:call, s(:lvar, :mf), :!), s(:block, s(:lasgn, :nextArray, s(:call, s(:const, :Array), :new)), s(:attrasgn, s(:lvar, :nextArray), :[]=, s(:lit, 0), s(:call, s(:lvar, :words), :[], s(:lvar, :i))), s(:lasgn, :anaLn, s(:call, s(:lvar, :anaList), :length)), s(:attrasgn, s(:lvar, :anaList), :[]=, s(:lvar, :anaLn), s(:lvar, :nextArray))), nil)))), s(:return, s(:lvar, :anaList))), s(:defn, :is_anagram, s(:args, :testWord, :baseWord), s(:if, s(:call, s(:call, s(:lvar, :testWord), :length), :!=, s(:call, s(:lvar, :baseWord), :length)), s(:return, s(:false)), nil), s(:lasgn, :a, s(:call, s(:call, s(:call, s(:lvar, :testWord), :downcase), :scan, s(:lit, /[a-zA-Z]/)), :sort)), s(:lasgn, :b, s(:call, s(:call, s(:call, s(:lvar, :baseWord), :downcase), :scan, s(:lit, /[a-zA-Z]/)), :sort)), s(:if, s(:call, s(:lvar, :a), :==, s(:lvar, :b)), s(:return, s(:true)), s(:return, s(:false)))), s(:defn, :add_word, s(:args, :arrayIn, :word), s(:lasgn, :len, s(:call, s(:lvar, :arrayIn), :length)), s(:attrasgn, s(:lvar, :arrayIn), :[]=, s(:lvar, :len), s(:lvar, :word)), s(:return, s(:lvar, :arrayIn))))
s(:block, s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :output, s(:array)), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :x), s(:block, s(:lasgn, :exist, s(:false)), s(:lasgn, :outputAux, s(:call, s(:const, :Array), :new, s(:lvar, :output))), s(:iter, s(:call, s(:lvar, :output), :each), s(:args, :y), s(:if, s(:call, s(:call, s(:call, s(:call, s(:call, s(:lvar, :y), :[], s(:lit, 0)), :downcase), :split, s(:lit, //)), :sort), :==, s(:call, s(:call, s(:call, s(:lvar, :x), :downcase), :split, s(:lit, //)), :sort)), s(:block, s(:call, s(:lvar, :outputAux), :delete, s(:lvar, :y)), s(:call, s(:lvar, :outputAux), :<<, s(:call, s(:lvar, :y), :<<, s(:lvar, :x))), s(:lasgn, :exist, s(:true))), nil)), s(:lasgn, :output, s(:lvar, :outputAux)), s(:if, s(:call, s(:lvar, :exist), :==, s(:false)), s(:call, s(:lvar, :output), :<<, s(:array, s(:lvar, :x))), nil))), s(:return, s(:lvar, :output))))
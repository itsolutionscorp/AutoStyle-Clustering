s(:block, s(:defn, :processWord, s(:args, :word), s(:lasgn, :char_map, s(:hash)), s(:iter, s(:call, s(:lvar, :word), :each_char), s(:args, :c), s(:if, s(:call, s(:lvar, :char_map), :has_key?, s(:call, s(:lvar, :c), :downcase)), s(:op_asgn1, s(:lvar, :char_map), s(:arglist, s(:call, s(:lvar, :c), :downcase)), :+, s(:lit, 1)), s(:attrasgn, s(:lvar, :char_map), :[]=, s(:call, s(:lvar, :c), :downcase), s(:lit, 1)))), s(:return, s(:array, s(:lvar, :word), s(:call, s(:lvar, :word), :size), s(:lvar, :char_map)))), s(:defn, :compareProcessedWord, s(:args, :w1, :w2), s(:lasgn, :word_map1, s(:call, s(:lvar, :w1), :[], s(:lit, 2))), s(:lasgn, :word_map2, s(:call, s(:lvar, :w2), :[], s(:lit, 2))), s(:if, s(:call, s(:call, s(:call, s(:lvar, :word_map1), :keys), :size), :!=, s(:call, s(:call, s(:lvar, :word_map2), :keys), :size)), s(:block, s(:call, nil, :puts, s(:str, "gg3")), s(:return, s(:false))), nil), s(:iter, s(:call, s(:call, s(:lvar, :word_map1), :keys), :each), s(:args, :key1), s(:block, s(:if, s(:call, s(:call, s(:lvar, :word_map2), :has_key?, s(:lvar, :key1)), :==, s(:false)), s(:block, s(:return, s(:false)), s(:call, nil, :puts, s(:str, "gg1"))), nil), s(:if, s(:call, s(:call, s(:lvar, :word_map1), :[], s(:lvar, :key1)), :!=, s(:call, s(:lvar, :word_map2), :[], s(:lvar, :key1))), s(:block, s(:return, s(:false)), s(:call, nil, :puts, s(:str, "gg2"))), nil))), s(:return, s(:true))), s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :words_with_info, s(:iter, s(:call, s(:lvar, :words), :map), s(:args, :element), s(:call, nil, :processWord, s(:lvar, :element)))), s(:lasgn, :word_map, s(:hash)), s(:iter, s(:call, s(:lvar, :words_with_info), :each), s(:args, :word_with_info), s(:if, s(:call, s(:lvar, :word_map), :has_key?, s(:call, s(:lvar, :word_with_info), :[], s(:lit, 1))), s(:call, s(:call, s(:lvar, :word_map), :[], s(:call, s(:lvar, :word_with_info), :[], s(:lit, 1))), :push, s(:lvar, :word_with_info)), s(:attrasgn, s(:lvar, :word_map), :[]=, s(:call, s(:lvar, :word_with_info), :[], s(:lit, 1)), s(:array, s(:lvar, :word_with_info))))), s(:lasgn, :output, s(:array)), s(:iter, s(:call, s(:lvar, :word_map), :each_key), s(:args, :key), s(:block, s(:lasgn, :words_same_size, s(:call, s(:lvar, :word_map), :[], s(:lvar, :key))), s(:while, s(:call, s(:call, s(:lvar, :words_same_size), :size), :>, s(:lit, 0)), s(:block, s(:lasgn, :word, s(:call, s(:lvar, :words_same_size), :pop)), s(:lasgn, :word_collection, s(:array, s(:call, s(:lvar, :word), :[], s(:lit, 0)))), s(:lasgn, :i, s(:call, s(:call, s(:lvar, :words_same_size), :size), :-, s(:lit, 1))), s(:while, s(:call, s(:lvar, :i), :>=, s(:lit, 0)), s(:block, s(:lasgn, :w, s(:call, s(:lvar, :words_same_size), :[], s(:lvar, :i))), s(:if, s(:call, nil, :compareProcessedWord, s(:lvar, :word), s(:lvar, :w)), s(:block, s(:call, s(:lvar, :word_collection), :push, s(:call, s(:lvar, :w), :[], s(:lit, 0))), s(:call, s(:lvar, :words_same_size), :delete_at, s(:lvar, :i))), nil), s(:lasgn, :i, s(:call, s(:lvar, :i), :-, s(:lit, 1)))), true), s(:call, s(:lvar, :output), :push, s(:lvar, :word_collection))), true))), s(:return, s(:lvar, :output))), s(:lasgn, :inn, s(:array, s(:str, "cars"), s(:str, "for"), s(:str, "potatoes"), s(:str, "racs"), s(:str, "four"), s(:str, "scar"), s(:str, "creams"), s(:str, "scream"))), s(:iter, s(:call, s(:call, nil, :combine_anagrams, s(:lvar, :inn)), :each), s(:args, :e), s(:block, s(:call, nil, :puts, s(:lvar, :e)), s(:call, nil, :puts, s(:str, "\n")))))
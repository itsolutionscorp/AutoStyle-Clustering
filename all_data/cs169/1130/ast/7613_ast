s(:block, s(:defn, :palindrome?, s(:args, :string), s(:lasgn, :string, s(:call, s(:lvar, :string), :gsub, s(:lit, /\W/), s(:str, ""))), s(:return, s(:call, s(:call, s(:call, s(:lvar, :string), :downcase), :reverse), :==, s(:call, s(:lvar, :string), :downcase)))), s(:defn, :count_words, s(:args, :string), s(:lasgn, :sarr, s(:call, s(:lvar, :string), :split)), s(:lasgn, :h, s(:call, s(:const, :Hash), :new)), s(:iter, s(:call, s(:lvar, :sarr), :each), s(:args, :candidate), s(:block, s(:lasgn, :candidate, s(:call, s(:lvar, :candidate), :gsub, s(:lit, /\W/), s(:str, ""))), s(:if, s(:call, s(:call, s(:lvar, :candidate), :length), :==, s(:lit, 0)), s(:next), nil), s(:if, s(:call, s(:lvar, :h), :has_key?, s(:call, s(:lvar, :candidate), :downcase)), s(:op_asgn1, s(:lvar, :h), s(:arglist, s(:call, s(:lvar, :candidate), :downcase)), :+, s(:lit, 1)), s(:attrasgn, s(:lvar, :h), :[]=, s(:call, s(:lvar, :candidate), :downcase), s(:lit, 1))))), s(:return, s(:lvar, :h))), s(:class, :WrongNumberOfPlayersError, s(:const, :StandardError)), s(:class, :NoSuchStrategyError, s(:const, :StandardError)), s(:defn, :rps_game_winner, s(:args, :game), s(:if, s(:call, s(:call, s(:lvar, :game), :length), :==, s(:lit, 2)), nil, s(:call, nil, :raise, s(:const, :WrongNumberOfPlayersError))), s(:lasgn, :strategies, s(:array, s(:str, "p"), s(:str, "r"), s(:str, "s"))), s(:if, s(:call, s(:and, s(:call, s(:lvar, :strategies), :include?, s(:call, s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 0)), :[], s(:lit, 1)), :downcase)), s(:call, s(:lvar, :strategies), :include?, s(:call, s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 1)), :[], s(:lit, 1)), :downcase))), :!), s(:call, nil, :raise, s(:const, :NoSuchStrategyError)), nil), s(:if, s(:call, s(:call, s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 0)), :[], s(:lit, 1)), :downcase), :==, s(:str, "p")), s(:if, s(:or, s(:call, s(:call, s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 1)), :[], s(:lit, 1)), :downcase), :==, s(:str, "p")), s(:call, s(:call, s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 1)), :[], s(:lit, 1)), :downcase), :==, s(:str, "r"))), s(:return, s(:call, s(:lvar, :game), :[], s(:lit, 0))), s(:return, s(:call, s(:lvar, :game), :[], s(:lit, 1)))), s(:if, s(:call, s(:call, s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 0)), :[], s(:lit, 1)), :downcase), :==, s(:str, "r")), s(:if, s(:or, s(:call, s(:call, s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 1)), :[], s(:lit, 1)), :downcase), :==, s(:str, "r")), s(:call, s(:call, s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 1)), :[], s(:lit, 1)), :downcase), :==, s(:str, "s"))), s(:return, s(:call, s(:lvar, :game), :[], s(:lit, 0))), s(:return, s(:call, s(:lvar, :game), :[], s(:lit, 1)))), s(:if, s(:or, s(:call, s(:call, s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 1)), :[], s(:lit, 1)), :downcase), :==, s(:str, "s")), s(:call, s(:call, s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 1)), :[], s(:lit, 1)), :downcase), :==, s(:str, "p"))), s(:return, s(:call, s(:lvar, :game), :[], s(:lit, 0))), s(:return, s(:call, s(:lvar, :game), :[], s(:lit, 1))))))), s(:defn, :rps_tournament_winner, s(:args, :game), s(:lasgn, :player_one, s(:call, s(:lvar, :game), :[], s(:lit, 0))), s(:lasgn, :player_two, s(:call, s(:lvar, :game), :[], s(:lit, 1))), s(:if, s(:call, s(:call, s(:call, s(:lvar, :player_one), :[], s(:lit, 0)), :class), :==, s(:const, :Array)), s(:lasgn, :player_one, s(:call, nil, :rps_tournament_winner, s(:lvar, :player_one))), nil), s(:if, s(:call, s(:call, s(:call, s(:lvar, :player_two), :[], s(:lit, 0)), :class), :==, s(:const, :Array)), s(:lasgn, :player_two, s(:call, nil, :rps_tournament_winner, s(:lvar, :player_two))), nil), s(:return, s(:call, nil, :rps_game_winner, s(:array, s(:lvar, :player_one), s(:lvar, :player_two))))), s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :res_arr, s(:call, s(:const, :Array), :new)), s(:lasgn, :exist_arr, s(:call, s(:const, :Array), :new)), s(:for, s(:call, s(:lit, 1), :upto, s(:call, s(:lvar, :words), :length)), s(:lasgn, :i), s(:call, s(:lvar, :exist_arr), :push, s(:lit, 0))), s(:for, s(:call, s(:lit, 1), :upto, s(:call, s(:lvar, :words), :length)), s(:lasgn, :i), s(:block, s(:if, s(:call, s(:call, s(:call, s(:lvar, :exist_arr), :[], s(:call, s(:lvar, :i), :-, s(:lit, 1))), :==, s(:lit, 0)), :!), s(:next), nil), s(:lasgn, :first, s(:call, s(:call, s(:call, s(:call, s(:lvar, :words), :[], s(:call, s(:lvar, :i), :-, s(:lit, 1))), :downcase), :split, s(:lit, //)), :sort)), s(:call, s(:lvar, :res_arr), :push, s(:array, s(:call, s(:lvar, :words), :[], s(:call, s(:lvar, :i), :-, s(:lit, 1))))), s(:for, s(:call, s(:call, s(:lvar, :i), :+, s(:lit, 1)), :upto, s(:call, s(:lvar, :words), :length)), s(:lasgn, :j), s(:block, s(:if, s(:call, s(:call, s(:call, s(:lvar, :exist_arr), :[], s(:call, s(:lvar, :j), :-, s(:lit, 1))), :==, s(:lit, 0)), :!), s(:next), nil), s(:lasgn, :second, s(:call, s(:call, s(:call, s(:call, s(:lvar, :words), :[], s(:call, s(:lvar, :j), :-, s(:lit, 1))), :downcase), :split, s(:lit, //)), :sort)), s(:if, s(:call, s(:lvar, :first), :==, s(:lvar, :second)), s(:block, s(:attrasgn, s(:lvar, :exist_arr), :[]=, s(:call, s(:lvar, :j), :-, s(:lit, 1)), s(:lit, 1)), s(:call, s(:call, s(:lvar, :res_arr), :[], s(:lit, -1)), :push, s(:call, s(:lvar, :words), :[], s(:call, s(:lvar, :j), :-, s(:lit, 1))))), nil))))), s(:return, s(:lvar, :res_arr))))
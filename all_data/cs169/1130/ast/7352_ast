s(:block, s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :tmp_words, s(:call, s(:const, :Array), :new)), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word), s(:call, s(:lvar, :tmp_words), :<<, s(:call, s(:lvar, :word), :downcase))), s(:lasgn, :anagrams, s(:call, s(:const, :Array), :new)), s(:lasgn, :used, s(:call, s(:const, :Array), :new, s(:call, s(:lvar, :words), :length), s(:false))), s(:iter, s(:call, s(:lvar, :tmp_words), :each_with_index), s(:args, :word, :i), s(:if, s(:call, s(:call, s(:lvar, :used), :[], s(:lvar, :i)), :!), s(:block, s(:lasgn, :arr, s(:array, s(:lvar, :i))), s(:attrasgn, s(:lvar, :used), :[]=, s(:lvar, :i), s(:true)), s(:iter, s(:call, s(:lvar, :tmp_words), :each_with_index), s(:args, :w, :j), s(:if, s(:and, s(:call, s(:call, s(:lvar, :used), :[], s(:lvar, :j)), :!), s(:call, s(:call, s(:call, s(:call, s(:lvar, :word), :chars), :sort), :join), :==, s(:call, s(:call, s(:call, s(:lvar, :w), :chars), :sort), :join))), s(:block, s(:call, s(:lvar, :arr), :<<, s(:lvar, :j)), s(:attrasgn, s(:lvar, :used), :[]=, s(:lvar, :j), s(:true))), nil)), s(:lasgn, :tmp, s(:call, s(:const, :Array), :new)), s(:iter, s(:call, s(:lvar, :arr), :each), s(:args, :i), s(:call, s(:lvar, :tmp), :<<, s(:call, s(:lvar, :words), :[], s(:lvar, :i)))), s(:call, s(:lvar, :anagrams), :<<, s(:lvar, :tmp))), nil)), s(:lvar, :anagrams)), s(:lasgn, :words, s(:array, s(:str, "cars"), s(:str, "for"), s(:str, "potatoes"), s(:str, "racs"), s(:str, "four"), s(:str, "scar"), s(:str, "creams"), s(:str, "scream"))), s(:call, nil, :combine_anagrams, s(:lvar, :words)))
s(:block, s(:defn, :get_code, s(:args, :word), s(:lasgn, :s, s(:call, s(:lvar, :word), :downcase)), s(:lasgn, :s, s(:call, s(:lvar, :s), :split, s(:str, ""))), s(:lasgn, :s, s(:call, s(:lvar, :s), :sort)), s(:lasgn, :code, s(:call, s(:lvar, :s), :join)), s(:return, s(:lvar, :code))), s(:defn, :combine_anagrams, s(:args, :words), s(:call, nil, :puts, s(:dstr, "Process words array #=", s(:evstr, s(:call, s(:lvar, :words), :length)))), s(:lasgn, :hash, s(:hash)), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word), s(:block, s(:lasgn, :code, s(:call, nil, :get_code, s(:lvar, :word))), s(:if, s(:call, s(:call, s(:lvar, :hash), :include?, s(:lvar, :code)), :!), s(:attrasgn, s(:lvar, :hash), :[]=, s(:lvar, :code), s(:array)), nil), s(:lasgn, :list, s(:call, s(:lvar, :hash), :[], s(:lvar, :code))), s(:call, s(:lvar, :list), :<<, s(:lvar, :word)))), s(:call, nil, :puts, s(:call, s(:lvar, :hash), :length)), s(:lasgn, :rsltList, s(:array)), s(:iter, s(:call, s(:lvar, :hash), :each), s(:args, :code, :word_list), s(:call, s(:lvar, :rsltList), :<<, s(:lvar, :word_list))), s(:call, nil, :puts, s(:dstr, "rsltList.length = ", s(:evstr, s(:call, s(:lvar, :rsltList), :length)))), s(:return, s(:lvar, :rsltList))), s(:if, s(:call, s(:str, "(string)"), :==, s(:gvar, :$0)), s(:block, s(:lasgn, :words, s(:array, s(:str, "cars"), s(:str, "for"), s(:str, "potatoes"), s(:str, "racs"), s(:str, "four"), s(:str, "scar"), s(:str, "creams"), s(:str, "scream"))), s(:call, nil, :puts, s(:call, nil, :combine_anagrams, s(:lvar, :words)))), nil))
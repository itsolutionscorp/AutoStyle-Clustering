s(:block, s(:defn, :palindrome?, s(:args, :string), s(:lasgn, :string, s(:call, s(:call, s(:lvar, :string), :gsub, s(:lit, /\W/), s(:str, "")), :downcase)), s(:return, s(:call, s(:call, s(:lvar, :string), :reverse), :==, s(:lvar, :string)))), s(:defn, :count_words, s(:args, :string), s(:lasgn, :counts, s(:call, s(:const, :Hash), :new, s(:lit, 0))), s(:lasgn, :words, s(:iter, s(:call, s(:call, s(:lvar, :string), :scan, s(:lit, /\b.+?\b/)), :reject), s(:args, :x), s(:call, s(:lvar, :x), :match, s(:lit, /\W/)))), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word), s(:op_asgn1, s(:lvar, :counts), s(:arglist, s(:call, s(:lvar, :word), :downcase)), :+, s(:lit, 1))), s(:return, s(:lvar, :counts))), s(:class, :WrongNumberOfPlayersError, s(:const, :StandardError)), s(:class, :NoSuchStrategyError, s(:const, :StandardError)), s(:defn, :rps_game_winner, s(:args, :players), s(:if, s(:call, s(:call, s(:lvar, :players), :length), :==, s(:lit, 2)), nil, s(:call, nil, :raise, s(:const, :WrongNumberOfPlayersError))), s(:lasgn, :loses_to, s(:hash, s(:str, "R"), s(:str, "S"), s(:str, "S"), s(:str, "P"), s(:str, "P"), s(:str, "R"))), s(:if, s(:call, s(:call, s(:lvar, :loses_to), :keys), :include?, s(:call, s(:call, s(:lvar, :players), :[], s(:lit, 0)), :[], s(:lit, 1))), nil, s(:call, nil, :raise, s(:const, :NoSuchStrategyError))), s(:if, s(:call, s(:call, s(:lvar, :loses_to), :keys), :include?, s(:call, s(:call, s(:lvar, :players), :[], s(:lit, 1)), :[], s(:lit, 1))), nil, s(:call, nil, :raise, s(:const, :NoSuchStrategyError))), s(:return, s(:if, s(:call, s(:call, s(:call, s(:lvar, :players), :[], s(:lit, 0)), :[], s(:lit, 1)), :==, s(:call, s(:lvar, :loses_to), :[], s(:call, s(:call, s(:lvar, :players), :[], s(:lit, 1)), :[], s(:lit, 1)))), s(:call, s(:lvar, :players), :[], s(:lit, 1)), s(:call, s(:lvar, :players), :[], s(:lit, 0))))), s(:defn, :rps_tournament_winner, s(:args, :data), s(:if, s(:call, s(:call, s(:lvar, :data), :[], s(:lit, 0)), :is_a?, s(:const, :String)), s(:return, s(:lvar, :data)), nil), s(:return, s(:call, nil, :rps_game_winner, s(:array, s(:call, nil, :rps_tournament_winner, s(:call, s(:lvar, :data), :[], s(:lit, 0))), s(:call, nil, :rps_tournament_winner, s(:call, s(:lvar, :data), :[], s(:lit, 1))))))), s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :table, s(:hash)), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word), s(:block, s(:lasgn, :key, s(:call, s(:call, s(:call, s(:call, s(:lvar, :word), :downcase), :scan, s(:lit, /\w/)), :sort), :to_s)), s(:if, s(:call, s(:lvar, :table), :[], s(:lvar, :key)), nil, s(:attrasgn, s(:lvar, :table), :[]=, s(:lvar, :key), s(:array))), s(:call, s(:call, s(:lvar, :table), :[], s(:lvar, :key)), :<<, s(:lvar, :word)))), s(:return, s(:call, s(:lvar, :table), :values))), s(:class, :Dessert, nil, s(:call, nil, :attr_accessor, s(:lit, :name), s(:lit, :calories)), s(:defn, :initialize, s(:args, :name, :calories), s(:iasgn, :@name, s(:lvar, :name)), s(:iasgn, :@calories, s(:lvar, :calories))), s(:defn, :healthy?, s(:args), s(:return, s(:call, s(:ivar, :@calories), :<, s(:lit, 200)))), s(:defn, :delicious?, s(:args), s(:return, s(:true)))), s(:class, :JellyBean, s(:const, :Dessert), s(:call, nil, :attr_accessor, s(:lit, :flavor)), s(:defn, :initialize, s(:args, :name, :calories, :flavor), s(:super, s(:lvar, :name), s(:lvar, :calories)), s(:iasgn, :@flavor, s(:lvar, :flavor))), s(:defn, :delicious?, s(:args), s(:return, s(:if, s(:call, s(:str, "black licorice"), :==, s(:ivar, :@flavor)), s(:false), s(:super))))), s(:class, :Class, nil, s(:defn, :attr_accessor_with_history, s(:args, :attr_name), s(:lasgn, :attr_name, s(:call, s(:lvar, :attr_name), :to_s)), s(:call, nil, :attr_reader, s(:lvar, :attr_name)), s(:call, nil, :attr_reader, s(:call, s(:lvar, :attr_name), :+, s(:str, "_history"))), s(:call, nil, :class_eval, s(:dstr, "\n      def ", s(:evstr, s(:lvar, :attr_name)), s(:str, "=(value)\n        @"), s(:evstr, s(:lvar, :attr_name)), s(:str, " = value\n        @"), s(:evstr, s(:lvar, :attr_name)), s(:str, "_history = [nil] unless @"), s(:evstr, s(:lvar, :attr_name)), s(:str, "_history\n        @"), s(:evstr, s(:lvar, :attr_name)), s(:str, "_history << value\n      end\n    "))))), s(:class, :Numeric, nil, s(:cvdecl, :@@currencies, s(:hash, s(:str, "yen"), s(:lit, 0.013), s(:str, "euro"), s(:lit, 1.292), s(:str, "rupee"), s(:lit, 0.019), s(:str, "dollar"), s(:lit, 1))), s(:defn, :method_missing, s(:args, :method_id), s(:lasgn, :singular_currency, s(:call, s(:call, s(:lvar, :method_id), :to_s), :gsub, s(:lit, /s$/), s(:str, ""))), s(:if, s(:call, s(:cvar, :@@currencies), :has_key?, s(:lvar, :singular_currency)), s(:call, s(:self), :*, s(:call, s(:cvar, :@@currencies), :[], s(:lvar, :singular_currency))), s(:zsuper))), s(:defn, :in, s(:args, :currency), s(:lasgn, :singular_currency, s(:call, s(:call, s(:lvar, :currency), :to_s), :gsub, s(:lit, /s$/), s(:str, ""))), s(:if, s(:call, s(:cvar, :@@currencies), :has_key?, s(:lvar, :singular_currency)), s(:call, s(:self), :/, s(:call, s(:cvar, :@@currencies), :[], s(:lvar, :singular_currency))), s(:zsuper)))), s(:class, :String, nil, s(:defn, :palindrome?, s(:args), s(:lasgn, :string, s(:call, s(:call, s(:self), :gsub, s(:lit, /\W/), s(:str, "")), :downcase)), s(:return, s(:call, s(:call, s(:lvar, :string), :reverse), :==, s(:lvar, :string))))), s(:module, :Enumerable, s(:defn, :palindrome?, s(:args), s(:return, s(:if, s(:call, nil, :respond_to?, s(:lit, :reverse)), s(:call, s(:self), :==, s(:call, nil, :reverse)), s(:nil))))), s(:class, :CartesianProduct, nil, s(:call, nil, :include, s(:const, :Enumerable)), s(:defn, :initialize, s(:args, :as, :bs), s(:iasgn, :@as, s(:lvar, :as)), s(:iasgn, :@bs, s(:lvar, :bs))), s(:defn, :each, s(:args), s(:iter, s(:call, s(:ivar, :@as), :each), s(:args, :a), s(:iter, s(:call, s(:ivar, :@bs), :each), s(:args, :b), s(:yield, s(:array, s(:lvar, :a), s(:lvar, :b))))))))
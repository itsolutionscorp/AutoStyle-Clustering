s(:block, s(:defn, :palindrome?, s(:args, :string), s(:lasgn, :q, s(:call, s(:call, s(:lvar, :string), :downcase), :gsub, s(:lit, /[^a-z]/), s(:str, ""))), s(:return, s(:call, s(:lvar, :q), :==, s(:call, s(:lvar, :q), :reverse)))), s(:defn, :count_words, s(:args, :string), s(:lasgn, :q, s(:lit, /\b([a-z]+?)\b/)), s(:lasgn, :r, s(:iter, s(:call, s(:const, :Hash), :new), s(:args), s(:lit, 0))), s(:iter, s(:call, s(:call, s(:call, s(:lvar, :string), :downcase), :scan, s(:lvar, :q)), :each), s(:args, :m), s(:op_asgn1, s(:lvar, :r), s(:arglist, s(:call, s(:lvar, :m), :[], s(:lit, 0))), :+, s(:lit, 1))), s(:return, s(:lvar, :r))), s(:class, :WrongNumberOfPlayersError, s(:const, :StandardError)), s(:class, :NoSuchStrategyError, s(:const, :StandardError)), s(:defn, :rps_game_winner, s(:args, :game), s(:if, s(:call, s(:call, s(:lvar, :game), :length), :==, s(:lit, 2)), nil, s(:call, nil, :raise, s(:const, :WrongNumberOfPlayersError))), s(:iter, s(:call, s(:lvar, :game), :each), s(:args, :l), s(:if, s(:match2, s(:lit, /^[rps]$/i), s(:call, s(:lvar, :l), :[], s(:lit, 1))), nil, s(:call, nil, :raise, s(:const, :NoSuchStrategyError)))), s(:lasgn, :r, s(:call, s(:const, :Hash), :[], s(:hash, s(:str, "r"), s(:str, "s"), s(:str, "p"), s(:str, "r"), s(:str, "s"), s(:str, "p")))), s(:lasgn, :p0, s(:call, s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 0)), :[], s(:lit, 1)), :downcase)), s(:lasgn, :p1, s(:call, s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 1)), :[], s(:lit, 1)), :downcase)), s(:if, s(:or, s(:call, s(:lvar, :p0), :==, s(:lvar, :p1)), s(:call, s(:call, s(:lvar, :r), :[], s(:lvar, :p0)), :==, s(:lvar, :p1))), s(:return, s(:call, s(:lvar, :game), :[], s(:lit, 0))), nil), s(:return, s(:call, s(:lvar, :game), :[], s(:lit, 1)))), s(:defn, :rps_tournament_winner, s(:args, :tourn), s(:if, s(:call, s(:call, s(:call, s(:lvar, :tourn), :[], s(:lit, 0)), :class), :!=, s(:const, :Array)), s(:return, s(:lvar, :tourn)), nil), s(:return, s(:call, nil, :rps_game_winner, s(:array, s(:call, nil, :rps_tournament_winner, s(:call, s(:lvar, :tourn), :[], s(:lit, 0))), s(:call, nil, :rps_tournament_winner, s(:call, s(:lvar, :tourn), :[], s(:lit, 1))))))), s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :a, s(:iter, s(:call, s(:const, :Hash), :new), s(:args), s(:array))), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :w), s(:op_asgn1, s(:lvar, :a), s(:arglist, s(:call, s(:call, s(:call, s(:call, s(:lvar, :w), :downcase), :split, s(:str, "")), :sort), :join)), :<<, s(:lvar, :w))), s(:return, s(:iter, s(:call, s(:lvar, :a), :map), s(:args, :k, :v), s(:lvar, :v)))), s(:class, :Dessert, nil, s(:call, nil, :attr_accessor, s(:lit, :name), s(:lit, :calories)), s(:defn, :initialize, s(:args, :name, :calories), s(:iasgn, :@name, s(:lvar, :name)), s(:iasgn, :@calories, s(:lvar, :calories))), s(:defn, :healthy?, s(:args), s(:call, s(:ivar, :@calories), :<, s(:lit, 200))), s(:defn, :delicious?, s(:args), s(:true))), s(:class, :JellyBean, s(:const, :Dessert), s(:call, nil, :attr_accessor, s(:lit, :flavor)), s(:defn, :initialize, s(:args, :name, :calories, :flavor), s(:super, s(:lvar, :name), s(:lvar, :calories)), s(:iasgn, :@flavor, s(:lvar, :flavor))), s(:defn, :delicious?, s(:args), s(:if, s(:call, s(:ivar, :@flavor), :==, s(:str, "black licorice")), s(:return, s(:false)), nil), s(:zsuper))), s(:class, :Class, nil, s(:defn, :attr_accessor_with_history, s(:args, :attr_name), s(:lasgn, :attr_name, s(:call, s(:lvar, :attr_name), :to_s)), s(:lasgn, :attr_hist, s(:call, s(:lvar, :attr_name), :+, s(:str, "_history"))), s(:call, nil, :attr_reader, s(:lvar, :attr_name)), s(:call, nil, :attr_reader, s(:lvar, :attr_hist)), s(:call, nil, :class_eval, s(:dstr, "\n            \n            def ", s(:evstr, s(:lvar, :attr_name)), s(:str, "=(value)\n\n                @"), s(:evstr, s(:lvar, :attr_hist)), s(:str, " = [] << "), s(:evstr, s(:lvar, :attr_name)), s(:str, " if @"), s(:evstr, s(:lvar, :attr_hist)), s(:str, ".nil?\n                @"), s(:evstr, s(:lvar, :attr_name)), s(:str, " = value\n                @"), s(:evstr, s(:lvar, :attr_hist)), s(:str, " <<= value\n            end\n        "))))), s(:class, :Numeric, nil, s(:cvdecl, :@@currencies, s(:hash, s(:str, "yen"), s(:lit, 0.013), s(:str, "euro"), s(:lit, 1.292), s(:str, "rupee"), s(:lit, 0.019), s(:str, "dollar"), s(:lit, 1.0))), s(:defn, :method_missing, s(:args, :method_id), s(:lasgn, :singular_currency, s(:call, s(:call, s(:lvar, :method_id), :to_s), :gsub, s(:lit, /s$/), s(:str, ""))), s(:if, s(:call, s(:cvar, :@@currencies), :has_key?, s(:lvar, :singular_currency)), s(:call, s(:self), :*, s(:call, s(:cvar, :@@currencies), :[], s(:lvar, :singular_currency))), s(:zsuper))), s(:defn, :in, s(:args, :target_curr), s(:lasgn, :singular_currency, s(:call, s(:call, s(:lvar, :target_curr), :id2name), :gsub, s(:lit, /s$/), s(:str, ""))), s(:if, s(:call, s(:cvar, :@@currencies), :has_key?, s(:lvar, :singular_currency)), s(:call, s(:self), :/, s(:call, s(:cvar, :@@currencies), :[], s(:lvar, :singular_currency))), s(:zsuper)))), s(:iter, s(:call, s(:const, :String), :send, s(:lit, :define_method), s(:lit, :palindrome?)), s(:args), s(:call, s(:const, :Object), :send, s(:lit, :palindrome?), s(:self))), s(:iter, s(:call, s(:const, :Enumerable), :send, s(:lit, :define_method), s(:lit, :palindrome?)), s(:args), s(:call, s(:call, s(:self), :entries), :==, s(:call, s(:call, s(:self), :entries), :reverse))), s(:class, :CartesianProduct, nil, s(:call, nil, :include, s(:const, :Enumerable)), s(:defn, :initialize, s(:args, :a, :b), s(:iasgn, :@a, s(:lvar, :a)), s(:iasgn, :@b, s(:lvar, :b))), s(:defn, :each, s(:args), s(:iter, s(:call, s(:ivar, :@a), :each), s(:args, :aa), s(:iter, s(:call, s(:ivar, :@b), :each), s(:args, :bb), s(:yield, s(:array, s(:lvar, :aa), s(:lvar, :bb))))))))
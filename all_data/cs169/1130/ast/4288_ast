s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :anagrams, s(:call, s(:const, :Hash), :new)), s(:lasgn, :t, s(:call, s(:const, :Hash), :new)), s(:lasgn, :a, s(:array)), s(:lasgn, :final, s(:array)), s(:lasgn, :works, s(:call, s(:iter, s(:call, s(:lvar, :words), :group_by), s(:args, :word), s(:call, s(:call, s(:lvar, :word), :chars), :sort)), :values)), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :k), s(:if, s(:call, s(:call, s(:lvar, :a), :include?, s(:call, s(:call, s(:call, s(:lvar, :k), :chars), :sort), :join)), :!), s(:block, s(:call, s(:lvar, :a), :<<, s(:call, s(:call, s(:call, s(:lvar, :k), :chars), :sort), :join)), s(:attrasgn, s(:lvar, :anagrams), :[]=, s(:lvar, :k), s(:call, s(:call, s(:call, s(:lvar, :k), :chars), :sort), :join))), s(:attrasgn, s(:lvar, :t), :[]=, s(:lvar, :k), s(:call, s(:call, s(:call, s(:lvar, :k), :chars), :sort), :join)))), s(:iter, s(:call, s(:lvar, :anagrams), :each), s(:args, :k, :v), s(:iter, s(:call, s(:lvar, :t), :each), s(:args, :key, :value), s(:if, s(:call, s(:lvar, :v), :==, s(:lvar, :value)), nil, s(:call, s(:lvar, :final), :<<, s(:lvar, :key))))), s(:return, s(:lvar, :works)))
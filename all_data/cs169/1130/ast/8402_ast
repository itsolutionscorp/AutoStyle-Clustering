s(:block, s(:defn, :palindrome?, s(:args, :str), s(:lasgn, :exp, s(:lit, /[\W]+/)), s(:return, s(:call, s(:call, s(:call, s(:lvar, :str), :downcase), :gsub, s(:lvar, :exp), s(:str, "")), :==, s(:call, s(:call, s(:call, s(:lvar, :str), :reverse), :downcase), :gsub, s(:lvar, :exp), s(:str, ""))))), s(:defn, :count_words, s(:args, :str), s(:lasgn, :exp, s(:lit, /\b([\w]+)\b/)), s(:lasgn, :counts, s(:hash)), s(:iter, s(:call, s(:call, s(:lvar, :str), :downcase), :gsub, s(:lvar, :exp)), s(:args, :s), s(:attrasgn, s(:lvar, :counts), :[]=, s(:lvar, :s), s(:if, s(:call, s(:lvar, :counts), :has_key?, s(:lvar, :s)), s(:call, s(:call, s(:lvar, :counts), :[], s(:lvar, :s)), :+, s(:lit, 1)), s(:lit, 1)))), s(:return, s(:lvar, :counts))), s(:class, :WrongNumberOfPlayersError, s(:const, :StandardError)), s(:class, :NoSuchStrategyError, s(:const, :StandardError)), s(:defn, :rps_game_winner, s(:args, :game), s(:if, s(:call, s(:call, s(:lvar, :game), :length), :==, s(:lit, 2)), nil, s(:call, nil, :raise, s(:const, :WrongNumberOfPlayersError))), s(:lasgn, :p1, s(:array, s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 0)), :[], s(:lit, 0)), s(:call, s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 0)), :[], s(:lit, 1)), :upcase))), s(:lasgn, :p2, s(:array, s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 1)), :[], s(:lit, 0)), s(:call, s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 1)), :[], s(:lit, 1)), :upcase))), s(:lasgn, :strategies, s(:array, s(:str, "R"), s(:str, "S"), s(:str, "P"))), s(:if, s(:and, s(:call, s(:lvar, :strategies), :include?, s(:call, s(:lvar, :p1), :[], s(:lit, 1))), s(:call, s(:lvar, :strategies), :include?, s(:call, s(:lvar, :p2), :[], s(:lit, 1)))), nil, s(:call, nil, :raise, s(:const, :NoSuchStrategyError))), s(:lasgn, :outcomes, s(:hash, s(:str, "RS"), s(:lit, 0), s(:str, "RP"), s(:lit, 1), s(:str, "SR"), s(:lit, 1), s(:str, "SP"), s(:lit, 0), s(:str, "PR"), s(:lit, 0), s(:str, "PS"), s(:lit, 1), s(:str, "PP"), s(:lit, 0), s(:str, "SS"), s(:lit, 0), s(:str, "RR"), s(:lit, 0))), s(:return, s(:call, s(:lvar, :game), :[], s(:call, s(:lvar, :outcomes), :[], s(:call, s(:call, s(:lvar, :p1), :[], s(:lit, 1)), :+, s(:call, s(:lvar, :p2), :[], s(:lit, 1))))))), s(:defn, :rps_tournament_winner, s(:args, :tournament), s(:if, s(:call, s(:call, s(:call, s(:lvar, :tournament), :[], s(:lit, 0)), :[], s(:lit, 0)), :kind_of?, s(:const, :String)), s(:return, s(:call, nil, :rps_game_winner, s(:lvar, :tournament))), s(:return, s(:call, nil, :rps_tournament_winner, s(:array, s(:call, nil, :rps_tournament_winner, s(:call, s(:lvar, :tournament), :[], s(:lit, 0))), s(:call, nil, :rps_tournament_winner, s(:call, s(:lvar, :tournament), :[], s(:lit, 1)))))))), s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :anagrams, s(:iter, s(:call, s(:const, :Hash), :new), s(:args, :h, :k), s(:attrasgn, s(:lvar, :h), :[]=, s(:lvar, :k), s(:array)))), s(:iter, s(:call, s(:lvar, :words), :map), s(:args, :word), s(:call, s(:call, s(:lvar, :anagrams), :[], s(:call, s(:call, s(:call, s(:lvar, :word), :downcase), :split, s(:str, "")), :sort)), :<<, s(:lvar, :word))), s(:return, s(:call, s(:lvar, :anagrams), :values))), s(:lasgn, :i, s(:array, s(:str, "CaRs"), s(:str, "fOr"), s(:str, "potatoes"), s(:str, "racs"), s(:str, "four"), s(:str, "scar"), s(:str, "creams"), s(:str, "scream"))), s(:call, nil, :puts, s(:call, s(:call, nil, :combine_anagrams, s(:lvar, :i)), :[], s(:lit, 0))), s(:class, :Class, nil, s(:defn, :attr_accessor_with_history, s(:args, :attr_name), s(:lasgn, :attr_name, s(:call, s(:lvar, :attr_name), :to_s)), s(:call, nil, :attr_reader, s(:lvar, :attr_name)), s(:call, nil, :attr_reader, s(:call, s(:lvar, :attr_name), :+, s(:str, "_history"))), s(:call, nil, :class_eval, s(:dstr, "\r\n      def ", s(:evstr, s(:lvar, :attr_name)), s(:str, "=(value)\r\n        if !defined? @"), s(:evstr, s(:lvar, :attr_name)), s(:str, "_history\r\n          @"), s(:evstr, s(:lvar, :attr_name)), s(:str, "_history = [nil]\r\n        end\r\n        @"), s(:evstr, s(:lvar, :attr_name)), s(:str, " = value\r\n        @"), s(:evstr, s(:lvar, :attr_name)), s(:str, "_history << value\r\n      end\r\n\r\n      def "), s(:evstr, s(:lvar, :attr_name)), s(:str, "\r\n        @"), s(:evstr, s(:lvar, :attr_name)), s(:str, "\r\n      end\r\n\r\n      def "), s(:evstr, s(:lvar, :attr_name)), s(:str, "_history\r\n        @"), s(:evstr, s(:lvar, :attr_name)), s(:str, "_history\r\n      end"))))))
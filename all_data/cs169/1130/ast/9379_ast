s(:block, s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :output, s(:call, s(:const, :Array), :new)), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word), s(:if, s(:call, s(:call, s(:lvar, :output), :length), :eql?, s(:lit, 0)), s(:call, s(:lvar, :output), :push, s(:array, s(:lvar, :word))), s(:block, s(:lasgn, :found, s(:false)), s(:iter, s(:call, s(:lvar, :output), :each), s(:args, :anagram), s(:if, s(:call, s(:call, s(:call, s(:call, s(:call, s(:call, s(:lvar, :anagram), :[], s(:lit, 0)), :downcase), :chars), :sort), :join), :eql?, s(:call, s(:call, s(:call, s(:call, s(:lvar, :word), :downcase), :chars), :sort), :join)), s(:block, s(:call, s(:lvar, :anagram), :push, s(:lvar, :word)), s(:lasgn, :found, s(:true))), nil)), s(:if, s(:call, s(:lvar, :found), :eql?, s(:false)), s(:call, s(:lvar, :output), :push, s(:array, s(:lvar, :word))), nil)))), s(:lvar, :output)), s(:lasgn, :input, s(:array, s(:str, "cars"), s(:str, "for"), s(:str, "potatoes"), s(:str, "racs"), s(:str, "four"), s(:str, "scar"), s(:str, "creams"), s(:str, "scream"))), s(:lasgn, :output, s(:call, nil, :combine_anagrams, s(:lvar, :input))), s(:iter, s(:call, s(:lvar, :output), :each), s(:args, :anagram), s(:call, nil, :print, s(:dstr, "\tANAGRAM ", s(:evstr, s(:lvar, :anagram)), s(:str, "\n")))))
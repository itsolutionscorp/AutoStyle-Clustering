s(:block, s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :seedArray, s(:array)), s(:lasgn, :wordArray, s(:array)), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word), s(:block, s(:lasgn, :seed, s(:call, s(:call, s(:call, s(:call, s(:lvar, :word), :downcase), :split, s(:lit, /[.]?/)), :sort), :join)), s(:call, s(:lvar, :wordArray), :push, s(:array, s(:lvar, :word), s(:lvar, :seed))), s(:call, s(:lvar, :seedArray), :push, s(:lvar, :seed)))), s(:lasgn, :seedHash, s(:hash)), s(:iter, s(:call, s(:lvar, :seedArray), :each), s(:args, :seed), s(:attrasgn, s(:lvar, :seedHash), :[]=, s(:lvar, :seed), s(:call, s(:lvar, :seedArray), :count, s(:lvar, :seed)))), s(:lasgn, :anagramArray, s(:array)), s(:iter, s(:call, s(:lvar, :seedHash), :each), s(:args, :seed1, :count), s(:block, s(:lasgn, :anagram, s(:array)), s(:iter, s(:call, s(:lvar, :wordArray), :each), s(:args, :word, :seed2), s(:if, s(:call, s(:lvar, :seed1), :==, s(:lvar, :seed2)), s(:call, s(:lvar, :anagram), :push, s(:lvar, :word)), nil)), s(:call, s(:lvar, :anagramArray), :push, s(:lvar, :anagram)))), s(:return, s(:lvar, :anagramArray))), s(:call, nil, :print, s(:str, "\n\n__________ Part 3 __________\n\n")), s(:lasgn, :words, s(:array, s(:str, "apple"), s(:str, "apple"), s(:str, "Cars"), s(:str, "Pealp"), s(:str, "for"), s(:str, "potatoes"), s(:str, "racs"), s(:str, "apple"), s(:str, "four"), s(:str, "scar"), s(:str, "creams"), s(:str, "scream"))), s(:call, nil, :print, s(:str, "Word list is ")), s(:call, nil, :print, s(:lvar, :words)), s(:call, nil, :print, s(:str, "\n")), s(:call, nil, :print, s(:str, "Anagrams are ")), s(:call, nil, :print, s(:call, nil, :combine_anagrams, s(:lvar, :words))), s(:call, nil, :print, s(:str, "\n\n")))
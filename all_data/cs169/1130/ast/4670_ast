s(:block, s(:call, nil, :require, s(:str, "test/unit")), s(:defn, :normalize, s(:args, :word), s(:return, s(:call, s(:call, s(:call, s(:call, s(:lvar, :word), :downcase), :chars), :sort), :join))), s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :groups, s(:array)), s(:while, s(:call, s(:call, s(:lvar, :words), :empty?), :!), s(:block, s(:lasgn, :cl, s(:call, nil, :normalize, s(:call, s(:lvar, :words), :[], s(:lit, 0)))), s(:lasgn, :group, s(:iter, s(:call, s(:lvar, :words), :select), s(:args, :word), s(:call, s(:call, nil, :normalize, s(:lvar, :word)), :==, s(:lvar, :cl)))), s(:iter, s(:call, s(:lvar, :words), :delete_if), s(:args, :word), s(:call, s(:lvar, :group), :include?, s(:lvar, :word))), s(:call, s(:lvar, :groups), :push, s(:lvar, :group))), true), s(:return, s(:lvar, :groups))), s(:class, :TestCombineAnagrams, s(:colon2, s(:colon2, s(:const, :Test), :Unit), :TestCase), s(:defn, :test_combine_anagrams, s(:args), s(:lasgn, :data, s(:array, s(:str, "Cars"), s(:str, "for"), s(:str, "potatoes"), s(:str, "racs"), s(:str, "four"), s(:str, "scar"), s(:str, "creams"), s(:str, "scream"))), s(:call, nil, :puts, s(:call, s(:call, nil, :combine_anagrams, s(:lvar, :data)), :inspect)))))
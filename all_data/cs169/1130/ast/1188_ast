s(:block, s(:defn, :palindrome?, s(:args, :string), s(:lasgn, :string, s(:call, s(:call, s(:lvar, :string), :downcase), :gsub, s(:lit, /[^a-z]/), s(:str, ""))), s(:call, s(:call, s(:lvar, :string), :[], s(:dot2, s(:lit, 0), s(:call, s(:call, s(:call, s(:lvar, :string), :length), :/, s(:lit, 2)), :-, s(:lit, 1)))), :==, s(:call, s(:call, s(:lvar, :string), :reverse), :[], s(:dot2, s(:lit, 0), s(:call, s(:call, s(:call, s(:lvar, :string), :length), :/, s(:lit, 2)), :-, s(:lit, 1)))))), s(:defn, :count_words, s(:args, :string), s(:lasgn, :string, s(:call, s(:call, s(:lvar, :string), :downcase), :gsub, s(:lit, /[^a-z\b\s]/), s(:str, ""))), s(:lasgn, :ret, s(:hash)), s(:attrasgn, s(:lvar, :ret), :default=, s(:lit, 0)), s(:iter, s(:call, s(:call, s(:lvar, :string), :split, s(:lit, /[\b\s]+/)), :each), s(:args, :el), s(:op_asgn1, s(:lvar, :ret), s(:arglist, s(:lvar, :el)), :+, s(:lit, 1))), s(:lvar, :ret)), s(:class, :WrongNumberOfPlayersError, s(:const, :StandardError)), s(:class, :NoSuchStrategyError, s(:const, :StandardError)), s(:defn, :is_strategy?, s(:args, :s), s(:and, s(:call, s(:lvar, :s), :!=, s(:nil)), s(:call, s(:call, s(:lvar, :s), :downcase), :match, s(:lit, /[rps]/)))), s(:defn, :rps_game_winner, s(:args, :game), s(:if, s(:call, s(:call, s(:lvar, :game), :length), :==, s(:lit, 2)), nil, s(:call, nil, :raise, s(:const, :WrongNumberOfPlayersError))), s(:if, s(:and, s(:call, nil, :is_strategy?, s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 0)), :[], s(:lit, 1))), s(:call, nil, :is_strategy?, s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 1)), :[], s(:lit, 1)))), nil, s(:call, nil, :raise, s(:const, :NoSuchStrategyError))), s(:lasgn, :lose, s(:hash, s(:str, "s"), s(:str, "r"), s(:str, "r"), s(:str, "p"), s(:str, "p"), s(:str, "s"))), s(:if, s(:call, s(:call, s(:lvar, :lose), :[], s(:call, s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 0)), :[], s(:lit, 1)), :downcase)), :==, s(:call, s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 1)), :[], s(:lit, 1)), :downcase)), nil, s(:return, s(:call, s(:lvar, :game), :[], s(:lit, 0)))), s(:return, s(:call, s(:lvar, :game), :[], s(:lit, 1)))), s(:defn, :rps_tournament_winner, s(:args, :tournament), s(:if, s(:call, s(:call, s(:call, s(:lvar, :tournament), :[], s(:lit, 0)), :[], s(:lit, 0)), :is_a?, s(:const, :Array)), nil, s(:return, s(:call, nil, :rps_game_winner, s(:lvar, :tournament)))), s(:call, nil, :rps_game_winner, s(:array, s(:call, nil, :rps_tournament_winner, s(:call, s(:lvar, :tournament), :[], s(:lit, 0))), s(:call, nil, :rps_tournament_winner, s(:call, s(:lvar, :tournament), :[], s(:lit, 1)))))), s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :hash, s(:hash)), s(:attrasgn, s(:lvar, :hash), :default=, s(:array)), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :el), s(:op_asgn1, s(:lvar, :hash), s(:arglist, s(:call, s(:call, s(:call, s(:lvar, :el), :downcase), :chars), :sort)), :+, s(:array, s(:lvar, :el)))), s(:call, s(:lvar, :hash), :values)))
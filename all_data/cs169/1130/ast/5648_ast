s(:block, s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :allCounts, s(:call, s(:const, :Array), :new)), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word), s(:block, s(:lasgn, :counts, s(:call, s(:const, :Hash), :new)), s(:iter, s(:call, s(:call, s(:lvar, :word), :downcase), :each_char), s(:args, :char), s(:if, s(:call, s(:lvar, :counts), :has_key?, s(:lvar, :char)), s(:attrasgn, s(:lvar, :counts), :[]=, s(:lvar, :char), s(:call, s(:call, s(:lvar, :counts), :[], s(:lvar, :char)), :+, s(:lit, 1))), s(:attrasgn, s(:lvar, :counts), :[]=, s(:lvar, :char), s(:lit, 1)))), s(:lasgn, :found, s(:false)), s(:iter, s(:call, s(:lvar, :allCounts), :each), s(:args, :checkCount), s(:if, s(:call, s(:call, s(:lvar, :checkCount), :[], s(:lit, 0)), :==, s(:lvar, :counts)), s(:block, s(:call, s(:call, s(:lvar, :checkCount), :[], s(:lit, 1)), :<<, s(:lvar, :word)), s(:lasgn, :found, s(:true))), nil)), s(:if, s(:call, s(:lvar, :found), :!), s(:call, s(:lvar, :allCounts), :<<, s(:array, s(:lvar, :counts), s(:array, s(:lvar, :word)))), nil))), s(:lasgn, :out, s(:call, s(:const, :Array), :new)), s(:iter, s(:call, s(:lvar, :allCounts), :each), s(:args, :entry), s(:call, s(:lvar, :out), :<<, s(:call, s(:lvar, :entry), :[], s(:lit, 1)))), s(:return, s(:lvar, :out))), s(:call, nil, :puts, s(:call, s(:call, nil, :combine_anagrams, s(:array, s(:str, "cars"), s(:str, "for"), s(:str, "potatoes"), s(:str, "racs"), s(:str, "four"), s(:str, "scar"), s(:str, "creams"), s(:str, "scream"))), :inspect)))
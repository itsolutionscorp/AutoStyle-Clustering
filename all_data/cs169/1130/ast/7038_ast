s(:block, s(:call, nil, :require, s(:str, "pp")), s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :map, s(:hash)), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :w), s(:block, s(:call, nil, :puts, s(:call, s(:str, "w: "), :+, s(:lvar, :w))), s(:lasgn, :sorted, s(:call, s(:call, s(:call, s(:lvar, :w), :chars), :sort), :join)), s(:call, nil, :puts, s(:call, s(:str, "sorted: "), :+, s(:lvar, :sorted))), s(:if, s(:call, s(:call, s(:lvar, :map), :[], s(:lvar, :sorted)), :nil?), s(:attrasgn, s(:lvar, :map), :[]=, s(:lvar, :sorted), s(:array)), nil), s(:attrasgn, s(:lvar, :map), :[]=, s(:lvar, :sorted), s(:call, s(:call, s(:lvar, :map), :[], s(:lvar, :sorted)), :+, s(:array, s(:lvar, :w)))), s(:call, nil, :puts, s(:call, s(:str, "added to: "), :+, s(:call, s(:call, s(:call, s(:lvar, :map), :[], s(:lvar, :sorted)), :length), :to_s))))), s(:lasgn, :result, s(:array)), s(:iter, s(:call, s(:lvar, :map), :each), s(:args, :key), s(:block, s(:call, nil, :pp, s(:lvar, :key)), s(:call, nil, :puts, s(:str, "key[1]: ")), s(:call, nil, :pp, s(:call, s(:lvar, :key), :[], s(:lit, 1))), s(:lasgn, :result, s(:call, s(:lvar, :result), :+, s(:array, s(:call, s(:lvar, :key), :[], s(:lit, 1))))))), s(:lvar, :result)), s(:lasgn, :w, s(:array, s(:str, "cars"), s(:str, "for"), s(:str, "potatoes"), s(:str, "racs"), s(:str, "four"), s(:str, "scar"), s(:str, "creams"), s(:str, "scream"))), s(:call, nil, :pp, s(:call, nil, :combine_anagrams, s(:lvar, :w))))
s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :a, s(:call, s(:const, :Array), :new)), s(:if, s(:call, s(:lvar, :words), :==, s(:array)), s(:lasgn, :a, s(:array)), s(:block, s(:lasgn, :s, s(:call, s(:const, :Array), :[], s(:call, s(:call, s(:lvar, :words), :[], s(:lit, 0)), :to_s))), s(:lasgn, :a, s(:call, s(:const, :Array), :[], s(:lvar, :s))), s(:for, s(:dot2, s(:lit, 1), s(:call, s(:call, s(:lvar, :words), :length), :-, s(:lit, 1))), s(:lasgn, :k), s(:block, s(:lasgn, :found, s(:false)), s(:for, s(:dot2, s(:lit, 0), s(:call, s(:call, s(:lvar, :a), :length), :-, s(:lit, 1))), s(:lasgn, :i), s(:block, s(:if, s(:call, s(:call, s(:lvar, :a), :[], s(:lvar, :i)), :kind_of?, s(:const, :Array)), s(:for, s(:dot2, s(:lit, 0), s(:call, s(:call, s(:call, s(:lvar, :a), :[], s(:lvar, :i)), :length), :-, s(:lit, 1))), s(:lasgn, :l), s(:block, s(:lasgn, :s1, s(:call, s(:call, s(:call, s(:lvar, :a), :[], s(:lvar, :i)), :[], s(:lvar, :l)), :to_s)), s(:if, s(:call, s(:call, s(:lvar, :s1), :length), :>, s(:lit, 1)), s(:block, s(:lasgn, :s1, s(:call, s(:call, s(:lvar, :s1), :downcase), :split, s(:lit, //))), s(:lasgn, :s1, s(:call, s(:call, s(:lvar, :s1), :sort), :join))), s(:lasgn, :s1, s(:call, s(:lvar, :s1), :downcase))), s(:lasgn, :s2, s(:call, s(:call, s(:lvar, :words), :[], s(:lvar, :k)), :to_s)), s(:if, s(:call, s(:call, s(:lvar, :s2), :length), :>, s(:lit, 1)), s(:block, s(:lasgn, :s2, s(:call, s(:call, s(:lvar, :s2), :downcase), :split, s(:lit, //))), s(:lasgn, :s2, s(:call, s(:call, s(:lvar, :s2), :sort), :join))), s(:lasgn, :s2, s(:call, s(:lvar, :s2), :downcase))), s(:if, s(:call, s(:lvar, :s1), :==, s(:lvar, :s2)), s(:block, s(:call, s(:call, s(:lvar, :a), :[], s(:lvar, :i)), :push, s(:call, s(:call, s(:lvar, :words), :[], s(:lvar, :k)), :to_s)), s(:lasgn, :found, s(:true))), nil), s(:if, s(:lvar, :found), s(:break), nil))), s(:block, s(:lasgn, :s1, s(:call, s(:call, s(:lvar, :a), :[], s(:lvar, :i)), :to_s)), s(:if, s(:call, s(:call, s(:lvar, :s1), :length), :>, s(:lit, 1)), s(:block, s(:lasgn, :s1, s(:call, s(:call, s(:lvar, :s1), :downcase), :split, s(:lit, //))), s(:lasgn, :s1, s(:call, s(:call, s(:lvar, :s1), :sort), :join))), s(:lasgn, :s1, s(:call, s(:lvar, :s1), :downcase))), s(:lasgn, :s2, s(:call, s(:call, s(:lvar, :words), :[], s(:lvar, :k)), :to_s)), s(:if, s(:call, s(:call, s(:lvar, :s2), :length), :>, s(:lit, 1)), s(:block, s(:lasgn, :s2, s(:call, s(:call, s(:lvar, :s2), :downcase), :split, s(:lit, //))), s(:lasgn, :s2, s(:call, s(:call, s(:lvar, :s2), :sort), :join))), s(:lasgn, :s2, s(:call, s(:lvar, :s2), :downcase))), s(:if, s(:call, s(:lvar, :s1), :==, s(:lvar, :s2)), s(:block, s(:lasgn, :u, s(:call, s(:const, :Array), :[], s(:call, s(:lvar, :a), :[], s(:lvar, :i)), s(:call, s(:lvar, :words), :[], s(:lvar, :k)))), s(:attrasgn, s(:lvar, :a), :[]=, s(:lvar, :i), s(:lvar, :u)), s(:lasgn, :found, s(:true))), nil), s(:if, s(:lvar, :found), s(:break), nil))), s(:if, s(:lvar, :found), s(:break), nil))), s(:if, s(:call, s(:lvar, :found), :!), s(:block, s(:lasgn, :s, s(:call, s(:const, :Array), :[], s(:call, s(:lvar, :words), :[], s(:lvar, :k)))), s(:attrasgn, s(:lvar, :a), :[]=, s(:call, s(:lvar, :a), :length), s(:lvar, :s))), nil))))), s(:return, s(:lvar, :a)))
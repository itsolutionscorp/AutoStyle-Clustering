s(:block, s(:defn, :palindrome?, s(:args, :string), s(:lasgn, :string, s(:call, s(:call, s(:lvar, :string), :downcase), :gsub, s(:lit, /[\W]/), s(:str, ""))), s(:call, s(:lvar, :string), :==, s(:call, s(:lvar, :string), :reverse))), s(:defn, :count_words, s(:args, :string), s(:call, s(:lvar, :string), :downcase!), s(:lasgn, :my_array, s(:call, s(:const, :Hash), :new, s(:lit, 0))), s(:iter, s(:call, s(:call, s(:lvar, :string), :split, s(:lit, /[ ,-]+/)), :each), s(:args, :word), s(:attrasgn, s(:lvar, :my_array), :[]=, s(:lvar, :word), s(:call, s(:call, s(:lvar, :my_array), :[], s(:lvar, :word)), :+, s(:lit, 1)))), s(:return, s(:lvar, :my_array))), s(:class, :WrongNumberOfPlayersError, s(:const, :StandardError)), s(:class, :NoSuchStrategyError, s(:const, :StandardError)), s(:class, :Gambler, nil, s(:call, nil, :attr_accessor, s(:lit, :player), s(:lit, :strategy)), s(:defn, :initialize, s(:args), s(:iasgn, :@player, s(:str, "player1")), s(:iasgn, :@strategy, s(:str, "P")))), s(:class, :Mover, nil, s(:call, nil, :include, s(:const, :Comparable)), s(:call, nil, :attr_accessor, s(:lit, :player), s(:lit, :strategy)), s(:defn, :initialize, s(:args, :a), s(:iasgn, :@player, s(:call, s(:lvar, :a), :[], s(:lit, 0))), s(:iasgn, :@strategy, s(:call, s(:lvar, :a), :[], s(:lit, 1)))), s(:defn, :my_array, s(:args, :a), s(:iasgn, :@player, s(:call, s(:lvar, :a), :[], s(:lit, 0))), s(:iasgn, :@strategy, s(:call, s(:lvar, :a), :[], s(:lit, 1)))), s(:defn, :<=>, s(:args, :other_mover), s(:if, s(:or, s(:and, s(:call, s(:call, s(:call, s(:self), :strategy), :downcase), :==, s(:str, "p")), s(:call, s(:call, s(:call, s(:lvar, :other_mover), :strategy), :downcase), :==, s(:str, "r"))), s(:or, s(:and, s(:call, s(:call, s(:call, s(:self), :strategy), :downcase), :==, s(:str, "r")), s(:call, s(:call, s(:call, s(:lvar, :other_mover), :strategy), :downcase), :==, s(:str, "s"))), s(:and, s(:call, s(:call, s(:call, s(:self), :strategy), :downcase), :==, s(:str, "s")), s(:call, s(:call, s(:call, s(:lvar, :other_mover), :strategy), :downcase), :==, s(:str, "p"))))), s(:lit, 1), s(:if, s(:call, s(:call, s(:call, s(:self), :strategy), :downcase), :==, s(:call, s(:call, s(:lvar, :other_mover), :strategy), :downcase)), s(:lit, 0), s(:lit, -1)))), s(:defn, :inspect, s(:args), s(:call, s(:const, :Array), :new, s(:call, s(:self), :player), s(:call, s(:self), :strategy)))), s(:defn, :rps_game_winner, s(:args, :game), s(:if, s(:call, s(:call, s(:lvar, :game), :length), :==, s(:lit, 2)), nil, s(:call, nil, :raise, s(:const, :WrongNumberOfPlayersError))), s(:iter, s(:call, s(:lvar, :game), :each), s(:args, :player, :strategy), s(:block, s(:if, s(:match3, s(:lit, /^[PRS]$/i), s(:lvar, :strategy)), nil, s(:call, nil, :raise, s(:const, :NoSuchStrategyError))), s(:call, nil, :puts, s(:dstr, "", s(:evstr, s(:lvar, :player)), s(:str, " "), s(:evstr, s(:lvar, :strategy)))))), s(:masgn, s(:array, s(:lasgn, :player1), s(:lasgn, :strategy1), s(:lasgn, :player2), s(:lasgn, :strategy2)), s(:to_ary, s(:call, s(:lvar, :game), :flatten))), s(:lasgn, :mover1, s(:call, s(:const, :Mover), :new, s(:array, s(:lvar, :player1), s(:lvar, :strategy1)))), s(:lasgn, :mover2, s(:call, s(:const, :Mover), :new, s(:array, s(:lvar, :player2), s(:lvar, :strategy2)))), s(:if, s(:call, s(:lvar, :mover1), :>, s(:lvar, :mover2)), s(:return, s(:array, s(:lvar, :player1), s(:lvar, :strategy1))), s(:if, s(:call, s(:lvar, :mover2), :>, s(:lvar, :mover1)), s(:return, s(:array, s(:lvar, :player2), s(:lvar, :strategy2))), s(:return, s(:array, s(:lvar, :player1), s(:lvar, :strategy1)))))), s(:defn, :rps_tournament_winner, s(:args, :bracketed_array), s(:call, nil, :p, s(:lvar, :bracketed_array)), s(:lasgn, :flatten_array, s(:call, s(:lvar, :bracketed_array), :flatten)), s(:call, nil, :puts, s(:dstr, "bracketed_array.length is ", s(:evstr, s(:call, s(:lvar, :bracketed_array), :length)))), s(:call, nil, :puts, s(:dstr, "flatten_array.length is ", s(:evstr, s(:call, s(:lvar, :flatten_array), :length)))), s(:lasgn, :new_array, s(:array)), s(:iter, s(:call, s(:lvar, :flatten_array), :each_index), s(:args, :index), s(:if, s(:call, s(:call, s(:lvar, :index), :%, s(:lit, 4)), :==, s(:lit, 0)), s(:call, s(:lvar, :new_array), :<<, s(:call, s(:call, nil, :rps_game_winner, s(:array, s(:array, s(:call, s(:lvar, :flatten_array), :[], s(:lvar, :index)), s(:call, s(:lvar, :flatten_array), :[], s(:call, s(:lvar, :index), :+, s(:lit, 1)))), s(:array, s(:call, s(:lvar, :flatten_array), :[], s(:call, s(:lvar, :index), :+, s(:lit, 2))), s(:call, s(:lvar, :flatten_array), :[], s(:call, s(:lvar, :index), :+, s(:lit, 3)))))), :flatten)), s(:next))), s(:if, s(:call, s(:call, s(:call, s(:lvar, :new_array), :flatten), :size), :>, s(:lit, 2)), s(:call, nil, :rps_tournament_winner, s(:lvar, :new_array)), s(:return, s(:call, s(:lvar, :new_array), :flatten)))), s(:defn, :combine_anagrams, s(:args, :input), s(:call, nil, :p, s(:lvar, :input)), s(:lasgn, :answer, s(:array)), s(:lasgn, :my_hash, s(:call, s(:const, :Hash), :new)), s(:iter, s(:call, s(:lvar, :input), :each), s(:args, :word), s(:block, s(:call, nil, :p, s(:lvar, :word)), s(:lasgn, :downcase_word, s(:call, s(:lvar, :word), :downcase)), s(:lasgn, :temp_array, s(:array)), s(:iter, s(:call, s(:lvar, :downcase_word), :each_char), s(:args, :ch), s(:call, s(:lvar, :temp_array), :<<, s(:lvar, :ch))), s(:lasgn, :sorted_array, s(:call, s(:lvar, :temp_array), :sort)), s(:call, nil, :puts, s(:dstr, "word is ", s(:evstr, s(:lvar, :word)))), s(:lasgn, :sorted_string, s(:call, s(:lvar, :sorted_array), :join, s(:str, ""))), s(:call, nil, :puts, s(:dstr, "sorted_string is ", s(:evstr, s(:lvar, :sorted_string)))), s(:call, nil, :p, s(:lvar, :my_hash)), s(:op_asgn1, s(:lvar, :my_hash), s(:arglist, s(:lvar, :sorted_string)), :"||", s(:array)), s(:attrasgn, s(:lvar, :my_hash), :[]=, s(:lvar, :sorted_string), s(:call, s(:call, s(:lvar, :my_hash), :[], s(:lvar, :sorted_string)), :push, s(:lvar, :word))), s(:call, nil, :p, s(:lvar, :my_hash)))), s(:iter, s(:call, s(:lvar, :my_hash), :each_pair), s(:args, :key, :value), s(:block, s(:call, nil, :puts, s(:dstr, "key is ", s(:evstr, s(:lvar, :key)))), s(:call, nil, :puts, s(:dstr, "value is ", s(:evstr, s(:lvar, :value)))), s(:call, s(:lvar, :answer), :<<, s(:lvar, :value)))), s(:return, s(:lvar, :answer))))
s(:block, s(:iasgn, :@debug, s(:false)), s(:iasgn, :@test, s(:false)), s(:defn, :dups, s(:args), s(:call, s(:iter, s(:call, s(:iter, s(:call, nil, :inject, s(:hash)), s(:args, :h, :v), s(:block, s(:attrasgn, s(:lvar, :h), :[]=, s(:lvar, :v), s(:call, s(:call, s(:call, s(:lvar, :h), :[], s(:lvar, :v)), :to_i), :+, s(:lit, 1))), s(:lvar, :h))), :reject), s(:args, :k, :v), s(:call, s(:lvar, :v), :==, s(:lit, 1))), :keys)), s(:defn, :sameWord, s(:args, :word1, :word2), s(:lasgn, :answer, s(:false)), s(:if, s(:call, s(:lvar, :word1), :==, s(:lvar, :word2)), s(:lasgn, :answer, s(:true)), s(:if, s(:call, s(:call, s(:lvar, :word1), :upcase), :==, s(:call, s(:lvar, :word2), :upcase)), s(:lasgn, :answer, s(:true)), nil)), s(:return, s(:lvar, :answer))), s(:defn, :anagram?, s(:args, :word1, :word2), s(:lasgn, :word1, s(:call, s(:lvar, :word1), :upcase)), s(:lasgn, :word2, s(:call, s(:lvar, :word2), :upcase)), s(:lasgn, :word1, s(:call, s(:call, s(:call, s(:lvar, :word1), :split, s(:str, "")), :sort), :join)), s(:lasgn, :word2, s(:call, s(:call, s(:call, s(:lvar, :word2), :split, s(:str, "")), :sort), :join)), s(:if, s(:ivar, :@debug), s(:block, s(:call, nil, :puts, s(:dstr, "", s(:evstr, s(:lvar, :word1)))), s(:call, nil, :puts, s(:dstr, "", s(:evstr, s(:lvar, :word2))))), nil), s(:lasgn, :answer, s(:false)), s(:if, s(:call, s(:lvar, :word1), :==, s(:lvar, :word2)), s(:lasgn, :answer, s(:true)), nil), s(:return, s(:lvar, :answer))), s(:defn, :pause, s(:args), s(:call, s(:call, nil, :gets), :chomp)), s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :returnMe, s(:array)), s(:if, s(:ivar, :@debug), s(:block, s(:call, nil, :puts, s(:dstr, "GIVEN        : ", s(:evstr, s(:lvar, :words)))), s(:call, nil, :puts, s(:dstr, "STARTING WITH: ", s(:evstr, s(:lvar, :returnMe)))), s(:call, nil, :pause)), nil), s(:lasgn, :words, s(:call, s(:lvar, :words), :uniq)), s(:if, s(:ivar, :@debug), s(:block, s(:call, nil, :puts, s(:dstr, "Now using  : ", s(:evstr, s(:lvar, :words)))), s(:call, nil, :pause)), nil), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word), s(:if, s(:call, s(:call, s(:lvar, :returnMe), :length), :==, s(:lit, 0)), s(:block, s(:call, s(:lvar, :returnMe), :<<, s(:array, s(:lvar, :word))), s(:if, s(:ivar, :@debug), s(:block, s(:call, nil, :puts, s(:str, "adding first list with first word into ouptut array")), s(:call, nil, :puts, s(:dstr, "OUTPUT ARRAY: ", s(:evstr, s(:lvar, :returnMe)))), s(:call, nil, :pause)), nil)), s(:iter, s(:call, s(:lvar, :returnMe), :each), s(:args, :wordList), s(:block, s(:lasgn, :dup, s(:false)), s(:iter, s(:call, s(:lvar, :wordList), :each), s(:args, :eWord), s(:block, s(:call, nil, :puts, s(:dstr, "comparing ", s(:evstr, s(:lvar, :eWord)), s(:str, " and "), s(:evstr, s(:lvar, :word)))), s(:if, s(:call, nil, :sameWord, s(:lvar, :eWord), s(:lvar, :word)), s(:block, s(:call, nil, :puts, s(:str, "Found SAME word!")), s(:lasgn, :dup, s(:true)), s(:break)), nil))), s(:if, s(:call, s(:lvar, :dup), :!), s(:if, s(:call, nil, :anagram?, s(:call, s(:lvar, :wordList), :[], s(:lit, 0)), s(:lvar, :word)), s(:block, s(:call, s(:lvar, :wordList), :<<, s(:lvar, :word)), s(:break)), s(:block, s(:call, s(:lvar, :returnMe), :<<, s(:array, s(:lvar, :word))), s(:break))), s(:call, nil, :puts, s(:str, "Skipping duplicate word"))))))), s(:return, s(:lvar, :returnMe))), s(:if, s(:ivar, :@test), s(:block, s(:lasgn, :wList, s(:array, s(:str, "cars"), s(:str, "for"), s(:str, "potatoes"), s(:str, "racs"), s(:str, "four"), s(:str, "scar"), s(:str, "creams"), s(:str, "for"), s(:str, "scream"))), s(:call, nil, :puts, s(:dstr, "", s(:evstr, s(:call, nil, :anagram?, s(:str, "dasd"), s(:str, "das"))))), s(:call, nil, :puts, s(:dstr, "", s(:evstr, s(:call, nil, :combine_anagrams, s(:lvar, :wList)))))), nil))
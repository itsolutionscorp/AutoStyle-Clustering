s(:block, s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :word1_id, s(:lit, 0)), s(:lasgn, :output, s(:call, s(:const, :Array), :new)), s(:lasgn, :checked, s(:call, s(:const, :Array), :new)), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word1), s(:block, s(:if, s(:call, s(:call, s(:lvar, :checked), :include?, s(:lvar, :word1)), :!), s(:block, s(:lasgn, :group_output, s(:call, s(:const, :Array), :new, s(:lit, 0))), s(:call, s(:lvar, :group_output), :push, s(:lvar, :word1)), s(:lasgn, :word2_id, s(:lit, 0)), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word2), s(:block, s(:if, s(:and, s(:call, nil, :check_words, s(:lvar, :word1), s(:lvar, :word2)), s(:call, s(:lvar, :word1_id), :!=, s(:lvar, :word2_id))), s(:block, s(:call, s(:lvar, :group_output), :push, s(:lvar, :word2)), s(:call, s(:lvar, :checked), :push, s(:lvar, :word2))), nil), s(:lasgn, :word2_id, s(:call, s(:lvar, :word2_id), :+, s(:lit, 1))))), s(:call, s(:lvar, :output), :push, s(:lvar, :group_output))), nil), s(:lasgn, :word1_id, s(:call, s(:lvar, :word1_id), :+, s(:lit, 1))))), s(:call, nil, :puts, s(:call, s(:lvar, :output), :inspect)), s(:return, s(:lvar, :output))), s(:defn, :check_words, s(:args, :word1, :word2), s(:if, s(:call, s(:call, s(:call, s(:call, s(:call, s(:lvar, :word1), :downcase), :scan, s(:lit, /./)), :sort), :join), :==, s(:call, s(:call, s(:call, s(:call, s(:lvar, :word2), :downcase), :scan, s(:lit, /./)), :sort), :join)), s(:return, s(:true)), s(:return, s(:false)))), s(:lasgn, :words, s(:array, s(:str, "cars"), s(:str, "cars"), s(:str, "for"), s(:str, "potatoes"), s(:str, "racs"), s(:str, "four"), s(:str, "scar"), s(:str, "creams"), s(:str, "scream"))), s(:call, nil, :combine_anagrams, s(:lvar, :words)))
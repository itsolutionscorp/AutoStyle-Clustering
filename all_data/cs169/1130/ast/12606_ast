s(:block, s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :cloned, s(:call, s(:lvar, :words), :clone)), s(:lasgn, :allword, s(:iter, s(:call, s(:lvar, :words), :collect), s(:args, :word), s(:call, s(:call, s(:call, s(:call, s(:lvar, :word), :downcase), :split, s(:lit, //)), :sort), :join))), s(:lasgn, :combined, s(:call, s(:const, :Hash), :new)), s(:iter, s(:call, s(:call, s(:lvar, :allword), :uniq), :each), s(:args, :word), s(:attrasgn, s(:lvar, :combined), :[]=, s(:lvar, :word), s(:call, s(:const, :Array), :new))), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :eachword), s(:call, s(:call, s(:lvar, :combined), :[], s(:call, s(:call, s(:call, s(:call, s(:lvar, :eachword), :downcase), :split, s(:lit, //)), :sort), :join)), :<<, s(:lvar, :eachword))), s(:iter, s(:call, s(:lvar, :combined), :collect), s(:args, :key, :value), s(:lvar, :value))), s(:call, nil, :puts, s(:call, s(:call, nil, :combine_anagrams, s(:array, s(:str, "cARs"), s(:str, "for"), s(:str, "potatoes"), s(:str, "rAcs"), s(:str, "four"), s(:str, "scar"), s(:str, "creams"), s(:str, "scream"))), :inspect)))
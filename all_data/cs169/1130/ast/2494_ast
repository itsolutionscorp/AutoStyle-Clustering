s(:block, s(:defn, :compare, s(:args, :word1, :word2), s(:lasgn, :word1, s(:call, s(:call, s(:call, s(:call, s(:lvar, :word1), :downcase), :split, s(:lit, //)), :sort), :join)), s(:lasgn, :word2, s(:call, s(:call, s(:call, s(:call, s(:lvar, :word2), :downcase), :split, s(:lit, //)), :sort), :join)), s(:return, s(:call, s(:lvar, :word1), :==, s(:lvar, :word2)))), s(:defn, :do_match, s(:args, :word, :words), s(:lasgn, :result, s(:array, s(:lvar, :word))), s(:lasgn, :new_words, s(:call, s(:const, :Array), :new, s(:lvar, :words))), s(:lasgn, :indices, s(:array)), s(:iter, s(:call, s(:lvar, :words), :each_with_index), s(:args, :t, :index), s(:if, s(:call, nil, :compare, s(:lvar, :word), s(:lvar, :t)), s(:block, s(:call, s(:lvar, :result), :<<, s(:lvar, :t)), s(:call, s(:lvar, :indices), :<<, s(:lvar, :index))), nil)), s(:call, s(:call, s(:lvar, :indices), :sort!), :reverse!), s(:iter, s(:call, s(:lvar, :indices), :each), s(:args, :i), s(:call, s(:lvar, :words), :delete_at, s(:lvar, :i))), s(:return, s(:array, s(:call, s(:lvar, :result), :sort), s(:lvar, :words)))), s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :result, s(:call, s(:const, :Array), :new)), s(:while, s(:call, s(:call, s(:lvar, :words), :length), :>, s(:lit, 0)), s(:block, s(:lasgn, :word, s(:call, s(:lvar, :words), :[], s(:lit, 0))), s(:call, s(:lvar, :words), :delete_at, s(:lit, 0)), s(:lasgn, :output, s(:call, nil, :do_match, s(:lvar, :word), s(:lvar, :words))), s(:call, s(:lvar, :result), :<<, s(:call, s(:lvar, :output), :[], s(:lit, 0))), s(:lasgn, :words, s(:call, s(:lvar, :output), :[], s(:lit, 1)))), true), s(:lvar, :result)), s(:call, nil, :puts, s(:call, s(:call, nil, :combine_anagrams, s(:array, s(:str, "a"), s(:str, "b"), s(:str, "A"), s(:str, "B"), s(:str, "B"), s(:str, "A"))), :inspect)))
s(:block, s(:defn, :palindrome?, s(:args, :string), s(:lasgn, :string, s(:call, s(:lvar, :string), :downcase)), s(:call, s(:lvar, :string), :gsub!, s(:lit, /\W/), s(:str, "")), s(:lasgn, :midway, s(:call, s(:call, s(:call, s(:call, s(:lvar, :string), :length), :/, s(:lit, 2)), :+, s(:call, s(:call, s(:lvar, :string), :length), :%, s(:lit, 2))), :-, s(:lit, 1))), s(:return, s(:call, s(:call, s(:lvar, :string), :[], s(:dot2, s(:lit, 0), s(:lvar, :midway))), :==, s(:call, s(:call, s(:lvar, :string), :[], s(:dot2, s(:call, s(:call, s(:lvar, :string), :length), :/, s(:lit, 2)), s(:call, s(:lvar, :string), :length))), :reverse)))), s(:defn, :count_words, s(:args, :s), s(:lasgn, :s, s(:call, s(:lvar, :s), :downcase)), s(:call, s(:lvar, :s), :gsub!, s(:lit, /\W+/), s(:str, " ")), s(:lasgn, :s, s(:call, s(:lvar, :s), :split, s(:str, " "))), s(:lasgn, :freqs, s(:call, s(:const, :Hash), :new, s(:lit, 0))), s(:iter, s(:call, s(:lvar, :s), :each), s(:args, :word), s(:op_asgn1, s(:lvar, :freqs), s(:arglist, s(:lvar, :word)), :+, s(:lit, 1))), s(:return, s(:lvar, :freqs))), s(:class, :WrongNumberOfPlayersError, s(:const, :StandardError)), s(:class, :NoSuchStrategyError, s(:const, :StandardError)), s(:defn, :rps_game_winner, s(:args, :game), s(:if, s(:call, s(:call, s(:lvar, :game), :length), :==, s(:lit, 2)), nil, s(:call, nil, :raise, s(:const, :WrongNumberOfPlayersError))), s(:iter, s(:call, s(:lvar, :game), :each), s(:args, :player), s(:if, s(:match3, s(:lit, /^(r|p|s)$/), s(:call, s(:call, s(:lvar, :player), :[], s(:lit, 1)), :downcase)), nil, s(:call, nil, :raise, s(:const, :NoSuchStrategyError)))), s(:if, s(:match3, s(:lit, /^(sp|pr|rs|ss|pp|rr)$/), s(:call, s(:call, s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 0)), :[], s(:lit, 1)), :+, s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 1)), :[], s(:lit, 1))), :downcase)), s(:return, s(:call, s(:lvar, :game), :[], s(:lit, 0))), s(:return, s(:call, s(:lvar, :game), :[], s(:lit, 1))))), s(:defn, :rps_tournament_winner, s(:args, :tournament), s(:if, s(:call, s(:call, s(:call, s(:lvar, :tournament), :[], s(:lit, 0)), :[], s(:lit, 1)), :is_a?, s(:const, :String)), s(:block, s(:lasgn, :player_1, s(:call, s(:lvar, :tournament), :[], s(:lit, 0))), s(:lasgn, :player_2, s(:call, s(:lvar, :tournament), :[], s(:lit, 1)))), s(:block, s(:lasgn, :player_1, s(:call, nil, :rps_tournament_winner, s(:call, s(:lvar, :tournament), :[], s(:lit, 0)))), s(:lasgn, :player_2, s(:call, nil, :rps_tournament_winner, s(:call, s(:lvar, :tournament), :[], s(:lit, 1)))))), s(:return, s(:call, nil, :rps_game_winner, s(:array, s(:lvar, :player_1), s(:lvar, :player_2))))), s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :words_hash, s(:iter, s(:call, s(:const, :Hash), :new), s(:args, :hash, :key), s(:attrasgn, s(:lvar, :hash), :[]=, s(:lvar, :key), s(:array)))), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word), s(:block, s(:lasgn, :word_key, s(:call, s(:call, s(:call, s(:call, s(:lvar, :word), :downcase), :chars), :sort), :join)), s(:attrasgn, s(:lvar, :words_hash), :[]=, s(:lvar, :word_key), s(:call, s(:call, s(:lvar, :words_hash), :[], s(:lvar, :word_key)), :<<, s(:lvar, :word))))), s(:lasgn, :words_list, s(:call, s(:const, :Array), :new)), s(:iter, s(:call, s(:call, s(:lvar, :words_hash), :keys), :each), s(:args, :key), s(:call, s(:lvar, :words_list), :<<, s(:call, s(:lvar, :words_hash), :[], s(:lvar, :key)))), s(:return, s(:lvar, :words_list))), s(:call, nil, :print, s(:call, nil, :combine_anagrams, s(:array, s(:str, "C"), s(:str, "c")))), s(:call, nil, :print, s(:call, nil, :combine_anagrams, s(:array, s(:str, "C"), s(:str, "C")))), s(:class, :Dessert, nil, s(:call, nil, :attr_accessor, s(:lit, :name), s(:lit, :calories)), s(:defn, :initialize, s(:args, :name, :calories), s(:iasgn, :@name, s(:lvar, :name)), s(:iasgn, :@calories, s(:lvar, :calories))), s(:defn, :healthy?, s(:args), s(:return, s(:call, s(:ivar, :@calories), :<, s(:lit, 200)))), s(:defn, :delicious?, s(:args), s(:return, s(:true)))), s(:class, :JellyBean, s(:const, :Dessert), s(:call, nil, :attr_accessor, s(:lit, :flavor)), s(:defn, :initialize, s(:args, :name, :calories, :flavor), s(:iasgn, :@flavor, s(:lvar, :flavor))), s(:defn, :delicious?, s(:args), s(:return, s(:not, s(:match3, s(:lit, /black +licorice/), s(:call, s(:ivar, :@flavor), :downcase)))))), s(:class, :Class, nil, s(:defn, :attr_accessor_with_history, s(:args, :attr_name), s(:lasgn, :attr_name, s(:call, s(:lvar, :attr_name), :to_s)), s(:call, nil, :attr_reader, s(:lvar, :attr_name)), s(:call, nil, :attr_reader, s(:call, s(:lvar, :attr_name), :+, s(:str, "_history"))), s(:call, nil, :class_eval, s(:dstr, "\n      def ", s(:evstr, s(:lvar, :attr_name)), s(:str, "=(attr_name)\n        @attr_name = attr_name\n        if @"), s(:evstr, s(:lvar, :attr_name)), s(:str, "_history then\n          @"), s(:evstr, s(:lvar, :attr_name)), s(:str, "_history << attr_name\n        else\n          @"), s(:evstr, s(:lvar, :attr_name)), s(:str, "_history = Array.new\n          @"), s(:evstr, s(:lvar, :attr_name)), s(:str, "_history << nil\n          @"), s(:evstr, s(:lvar, :attr_name)), s(:str, "_history << attr_name\n        end\n      end\n    "))))), s(:class, :Foo, nil, s(:call, nil, :attr_accessor_with_history, s(:lit, :bar))))
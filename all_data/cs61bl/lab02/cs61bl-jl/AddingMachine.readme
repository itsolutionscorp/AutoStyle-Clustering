{\rtf1\ansi\ansicpg1252\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 1. We used one while loop (the one given). \
2. Using the other method, you could create a while loop inside the given while loop, which takes care of cases when k != 0. Within this while loop, we will keep track of the subtotal, unless the next k == 0, in which case, it will exit the while loop. Additionally, there will be a counter that keeps track of how many times the user inputs 0 consecutively. This will be defined outside the initial while loop and will reset every time k != 0. When it exits the inner while loop, which indicates that k == 0, the program will first assign total = total + subtotal, then it will check whether the counter is 2. If it is, it will print the total and exit the function. If not, it will just print the subtotal and continue with the outer while loop.\
3. One-Loop Version: We prefer this version, because it is more intuitive to us. Also, we believe it is more readable. \
Two-Loop Version: This version is concise and will run the outer while loop fewer times, since the inner while loop takes care of all the cases where k != 0.}
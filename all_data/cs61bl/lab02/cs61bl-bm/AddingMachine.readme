My partner and I implemented the version using only the single loop. 

I would imagine that the other version implements an inner while loop that continues 
looping as long as the user-inputted integer is a non-zero value. It thus creates a running 
subtotal and prints/resets that subtotal as soon as the user inputs a zero. And if the previous 
input was a zero as well, the total would be printed and the program would terminate. 

In my opinion, the second option (with two loops) is actually a much more intuitive solution, 
since the code reflects the idea of adding numbers up WHILE the user is inputting non-zero 
integers. The code is thus easier to read and follow. In addition, the code for the two-loop 
version can be written more elegantly than the one-loop version, simply because it does not 
require multiple if/else statements like the one-loop version does (or at least it did in our 
solution).

Of course, the one-loop version has its benefits as well. It is somewhat easier to set up 
because it does not require you to think about and set up an additional while loop. Rather, we 
were able to "brute force" our way to a solution by using several if statements. Moreover, we 
did not need to manage the additional "justStarting" boolean variable, which the two-loop 
solution might have required. 

(In terms of efficiency, there may be a difference, though I am not entirely sure how one 
would be better than the other.)

I'd actually prefer to do the two-loop method if I had not already done the one-loop method. 
I picked the version somewhat arbitrarily.
In the AddingMachine exercise, I implemented the one-loop version. I imagine that the second while loop in the two-loop version would have the condition that k is not equal to 0. Within that while loop, we would check to see if justStarting evaluates to "true," and (if it does) set it to false. Otherwise, we would add k to the subtotal and total, and set k to the next integer. After the second while loop, we want to check if justStarting evaluates to "true." If it does, we simply printout the subtotal. Otherwise, we check to see if the subtotal is equal to 0. The point of this is to see if it is the first 0 entered. If it is the first 0 entered, then we print the subtotal and reset it. If not, then we print out the total and quit the main method.

Two advantages to the one-loop version is that it would be better if the integers that we entered into the program were frequently interspersed with zeros, and that it neatly divides the conditions into branches (if that is one's programming style). Two advantages to the two-loop version is that it seems much cleaner (in that there are less brackets floating around in between conditional statements) and that it would be efficient if we entered a long list of non-zero integers.
1. We implemented the one loop Adding Machine.

2. We think that the two loop would work by having an inner while-loop which calculates the subtotal between each single occurrence of a "0," 
while the outer while-loop will run until it is terminated by consecutive "0"'s, executes the inner while-loop, and prints out the subtotal 
after each run of the inner while-loop.

Here is Another Adding Machine that uses the two loops:
import java.util.Scanner;

public class AnotherAddingMachine {

	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		boolean justStarting = true;
		int total = 0;
		int subtotal = 0;
		int k = scanner.nextInt();
		
		while (true) {
		    // TODO Your code here
			while (k != 0) {
				subtotal = subtotal + k;
				k = scanner.nextInt();
			}
			total = total + subtotal;
			System.out.println ("subtotal " + subtotal);
			subtotal = 0;
			k = scanner.nextInt();
			if (k == 0) {
				System.out.println ("total " + total);
				return;
			}
			
	}

}
}

3. We prefer the one loop, because everything is on the surface for the programmer. Thus, it is easier to program intuitively and, at least for us, the first 
thing we think of (which is useful when you are on a time-crunch to submit an assignment). The two loop is better for someone looking at the code, because it 
is easier to read, separating the two actions. The 'easier' action where k is non-zero is executed within the inner while loop and the rest of the outer while loop 
handles the exception when k is 0 and when there are 2 consecutive zeros in k. 
The one loop works case-by-case while the two loop works action-by-action. In other words, the one loop modularizes the single occurrence of a 0,
the occurrence of two 0's in a row, and the occurrence of an input not 0, while, on the other hand, the two loop separates the two actions of subtotal and total. Thus,
it is easier to add or modify code for a specific case with the one loop, but it is easier to add or modify code for one of the two general actions with the two loop.
For example, if someone wants the program to terminate after calculating the total instead of it going on forever, it is easier to find the place to put the "return;"
in the two loop, whereas if someone wants the program to also do something else when k = 5, it is easier to find the place to put the extra code in the one loop.
Nikat (do) & Shaswat (mj)

Experiment 1

We selected the following tasks to highlight the differences between ArrayList and LinkedList in Java:
a) Getting the kth item from an ArrayList is a constant time, O(1) operation while for LinkedList, it is O(min( k, n-k ))
b) Setting the value of the kth item in an ArrayList should be O(1), whereas for LinkedList it should be O(min( k, n-k ))
c) Adding another list of size m to the end of the list should be O(k) for ArrayList and O(1) for LinkedList

The respective runtimes support our hypotheses except for addition of a list of the same size which we think has not been implemented efficiently.

Runtimes:
Getting (n/2)th item:
Size 100,000	:	0 ms (ArrayList)	1 ms (LinkedList) 
Size 1,000,000	:	0 ms (ArrayList)	6 ms (LinkedList) 
Size 10,000,000	: 	0 ms (ArrayList)	39 ms (LinkedList)

Setting the value of (n/2)th item:
Size 100,000	: 	0 ms (ArrayList)	1 ms (LinkedList) 
Size 1,000,000	:	0 ms (ArrayList)	6 ms (LinkedList) 
Size 10,000,000	: 	0 ms (ArrayList)	32 ms (LinkedList) 

Adding list of same size at end of list (using addAll):
Size 100,000	: 	 1 ms (ArrayList)	10 ms (LinkedList) 
Size 1,000,000	:	3 ms (ArrayList)	974 ms (LinkedList) 
Size 10,000,000	: 	67 ms (ArrayList)	6479 ms (LinkedList)  


Experiment 2

If LinkedList is implemented as a doubly-linked list, then deleting the last item should be constant time i.e. O(1) whereas for singly linked lists, it is expected to take O(n) where n is the number of elements in the linked list.

We timed deleting the last item using lists of size 10,000 and 100,000 and there was no significant difference in runtimes which supports the claim that LinkedList is implemented as a doubly-linked list.

Runtimes:
Deleting last tiem:
Size 100,000	: 	0 ms (LinkedList) 
Size 1,000,000	:	0 ms (LinkedList) 
Size 10,000,000	: 	0 ms (LinkedList)

Note: All timings were recorded using bash
We created 40 million-length ArrayLists and LinkedLists to see how long it would take to retrieve an arbitrary object from each, namely ones that are “far down” each list. Getting the information from the LinkedList took 37 milliseconds, while from the ArrayList, the timer did not even reach the 1 millisecond mark. This is because accessing elements in ArrayLists takes O(1) time, whereas LinkedLists run in O(n) time.
DoublyLinkedLists are going to have a deletion runtime of O(1) because of the pointer to the previous element, whereas SinglyLinkedLists will have runtime of O(n) because simply finding the parent, which the DoublyLinkedList does by having the previous pointer, requires iterating through the entire list. When we ran the deletion experiment for a LinkedList of 30 million elements, the timer did not hit the 1 millisecond mark, implying that LinkedLists in Java do, in fact, have a doubly-linked structure.

// import java.util.*;
//
// public class Timing {
//     public static void main(String[] args) {
//         Timer t = new Timer();
//         ArrayList<Integer> arr = new ArrayList<Integer>();
//         LinkedList<Integer> link = new LinkedList<Integer>();
//         for (int i = 0; i < 40000000; i++) {
//             arr.add(i);
//             link.add(i);
//         }
//         t.start();
//         arr.get(39000000);
//         t.stop();
//         System.out.println(t.elapsed());
//         t.reset();
//         t.start();
//         int dan = link.get(39000000);
//         t.stop();
//         System.out.println(t.elapsed());
//         t.reset();
//         t.start();
//         link.remove(dan);
//         t.stop();
//         System.out.println(t.elapsed());
//         t.reset();
//     }
// }

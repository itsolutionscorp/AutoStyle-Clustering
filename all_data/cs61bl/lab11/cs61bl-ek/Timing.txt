{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh5980\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 Experiment 1: Run the function and run one of the methods. Stop the time and store it. Then, start another timer and run the same method but for the object you want to compare. Stop the time and record it. Then, compare the times. And we do that for every method that the two classes share. Because we have a lot of items, we want to get the position of a very small and a very large index. If these times are similar, we have an arrayList because it can get from any index. But if they differ a lot, it should be a LinkedList because it goes in N time. \
\
Experiment 2: Make a short linked list and a long linked list. IN our online documentation, we have our getLast method. We want to run the timer before we have that. But then we stop the timer when we complete the method. It\'92s a doubly-linked list if our short list and long list have roughly the same time. But the linked list implementation for java might be a single linked list if they differ. }
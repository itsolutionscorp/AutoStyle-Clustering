/* our code
import java.util.ArrayList;
import java.util.LinkedList;


public class TimingExp {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Timer timer = new Timer();
		ArrayList<Integer> test = new ArrayList<Integer>();
		timer.start();
		for (int i = 0; i < 100000; i++) {
			test.add((int) Math.random());
		}
		timer.stop();
		System.out.println("Time for Arraylist to add : " + timer.elapsed());
		
		
		
		timer.reset();
		LinkedList list = new LinkedList();
		timer.start();
		for (int i = 0; i < 100000; i++) {
			list.add((int) Math.random());
		}
		timer.stop();
		System.out.println("Time for LinkedList to add : " + timer.elapsed());
		
		
		timer.reset();
		LinkedList list2 = new LinkedList();
		for (int i = 0; i < 100000; i ++) {
			list2.add((int) Math.random());
		}
		timer.start();
		list2.get(99999);
		timer.stop();
		System.out.println("Time for doubly linkedlist to get the last elements : " + timer.elapsed());
		
		
		timer.reset();
		List list3 = new List();
		for (int i = 0; i < 100000; i ++) {
			list3.add((int) Math.random());
		}
		timer.start();
		list3.get(99999);
		timer.stop();
		System.out.println("Time for doubly linkedlist to get the last elements : " + timer.elapsed());
	}

}

Time for Arraylist to add : 8
Time for LinkedList to add : 6
Time for doubly linkedlist to get the last elements : 0
Time for doubly linkedlist to get the last elements : 3
*/

Experiment 1
	In experiment one, we distinguished between an ArrayList and a LinkedList by testing how
	long it took to add things to each respective data structure.  In this experiment, we discovered that the Arraylist
	took longer to add lots of elements to over time.
	
Experiment 2
	If the list is a doubly-linked list and we want to get the last element in the list, we can just find the previous of
	 the first element. However, if it is a singly-linked list, we need to go through all the elements to get the last one
	 so it can be very slow.
	 This cause the java linkedlist to run much faster than a list that is not doubly-linked list.

	
	
	
	

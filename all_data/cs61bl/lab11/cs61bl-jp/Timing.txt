For experiment 1, we would design a basic add, remove(pos i), and multi-store(for quick storage) method for the differing data structures. Then, we would call these methods for differing sizes of each structure: e.g. when the differing lists have 10, 100, 1000, 10000, 100000 elements in them. This would allow us to see accurately how the time takes for each of the List types, as their size's increase. The timing would differ between sizes because of how the Lists work. In the worst case, you would need to cycle through all the elements of the Linked List in order to remove an element (since the LinkedList is not doublely Linked and does not tell you the last "Node"), while in an Array, you can just Index.

For experiment 2, we would design a remove function(pos i) for the Linked List class, where you would go from the bottom to the top if the pos was closer to the size of the Linked List rather than 0, and start from the top to the bottom if the pos was closer to 0 than size. This would allow us to index, remove an item faster. 
Jennifer Chen (BX) & Kai-li Yen (EL)

Alpha: Alpha is heap sort because we will remove the min n times from the heap, where n is the number of elements in the list. Each removal will at worst take log n time. This had similar runtime to delta (merge sort), but this had less comparisons than delta. 
Beta: Beta is insertion sort because it had the best comparisons when the list was in order because you don't have to traverse through the entire list for each element. You can exit the iteration once you find the correct place, which would be at the end of what you have sorted so far. In the case that the list is in order, the list is essentially already sorted. In addition, the comparison and movement counts were around the same. 
Gamma: Gamma is quick sort because there were significantly more comparisons when the list was ordered (in or reverse). The run time was best when the list was random. This holds true for quick sort because if the divider is the first element, the rest of the list would fall on to the same side of the divider when the list is ordered. 
Delta: Delta is merge sort because no matter how the list was ordered/not ordered, the comparisons and movements were around the same. The comparison count was significantly smaller than the other sort methods, but was bigger than alpha. This is how we determined the difference between alpha and delta. Merge sort should have more comparisons, thus this was merge. 
Episilon: Episilon is selection sort because the number of comparisons were around the same no matter the order. In addition, the runtimes for inorder vs. reverse order were the same (around n^2), but inorder had 0 movements while reverse order had around the same number of movements as it did comparison. Selection sort compares through the entire list each time to find the smallest element. For this reason, it should have n^2 comparisons.
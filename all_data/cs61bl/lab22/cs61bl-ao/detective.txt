{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 When I change the list properties to Inorder and run all the algorithms, only Epsilon has 0 movements. Thus it must be selection sort. Insertion sort would never have to actually \'93insert\'94 any element since everything would be bigger than its processor. Plus it has a lot of comparisons. Somewhere close to what Insertion sort would need.\
\
Also when I do Inorder of list size n, Beta would give n-1 comparisons and 2n-2 movements. Only Insertion sort would give this constant. It would compare the first 2 add the first to sort and move onto the second and repeat this with the second and third elements. (Thus the n-1 pattern). So Beta is Insertion Sort. \
\
When you run a list of size 20 for all kinds of lists, you will see that Alpha gives you 176 movements every single time. The only method that would give you that is heap sort. \
\
When you run an inorder list of size n, Gamma always give n-1 movements. Thus Gamma must be quick sort.\
\
Thus Delta is MergeSort. }
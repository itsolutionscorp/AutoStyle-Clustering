import java.io.Serializable;
import java.sql.Timestamp;
import java.util.ArrayList;

import java.io.File;
import java.util.*;

/**
 * This class generates a commit which is linked to it's parent and its
 * children. Each commit has it's own message and id. Also, the time at which
 * the commit is created is recorded.
 *
 * @author Sam: EF, Frances: BQ, Alex: BR, Chris: EZ
 */
public class Commit implements Serializable {
	private String message;
	private Timestamp myTime;
	private int myId;
	Commit myParent;
	ArrayList<Commit> myChildren = new ArrayList<Commit>();
	HashMap<String, File> untrackedFiles = new HashMap<String, File>();
	HashMap<String, File> trackedFiles = new HashMap<String, File>();

	/**
	 * Determine if two commit objects equal each other. They equal each other
	 * if they have the same message, parent, id, time stamp, and myChildren.
	 *
	 * @param o
	 *            - an object cast into a commit that is compared to this commit
	 *            object
	 * @return true of the commits are the same, false otherwise
	 */
	@Override
	public boolean equals(Object o) {
		Commit c = (Commit) o;
		if (myParent == null) {
			return (c.myParent == null);
		}
		if (c.myParent == null) {
			return false;
		}
		return (this.message.equals(c.message)
				&& this.myParent.equals(c.myParent) && this.myId == c.myId
				&& this.myTime.equals(c.myTime)
				&& this.myChildren.equals(c.myChildren)
				&& this.untrackedFiles.equals(c.untrackedFiles) && this.trackedFiles
					.equals(c.trackedFiles));
	}

	/**
	 * Create a unique hashCode integer value for the commit
	 *
	 * @return an integer value generated by this hashcode method
	 */
	public int hashCode() {
		int hashCode = 1;
		hashCode = 31 * hashCode + message.hashCode();
		hashCode = 31 * hashCode + myTime.hashCode();
		hashCode = 31 * hashCode + myId;
		hashCode = 31 * hashCode + (myParent == null ? 0 : myParent.hashCode());
		hashCode = 31 * hashCode
				+ (myChildren.isEmpty() ? 0 : myChildren.hashCode());
		hashCode = 31 * hashCode + (untrackedFiles.hashCode());
		hashCode = 31 * hashCode + (trackedFiles.hashCode());
		return hashCode;
	}

	/**
	 * get the message of the commit
	 * 
	 * @return the string message
	 */
	public String getMessage() {
		return message;
	}

	/**
	 * Constructor for the commit object. Also record the timestamp at which the
	 * commit object is created
	 *
	 * @param commitMessage
	 *            - the commit's message
	 * @param commitId
	 *            - the commit's id
	 * @param parent
	 *            - the commit's parent
	 *
	 */
	public Commit(String commitMessage, int commitId, Commit parent) {
		message = commitMessage;
		myId = commitId;
		java.util.Date date = new java.util.Date();
		myTime = new Timestamp(date.getTime());
		myParent = parent;
		if (parent != null) {
			parent.myChildren.add(this);
		}
	}

	/**
	 * Get the Id of the commit
	 * 
	 * @return the integer id
	 */
	public int getId() {
		return myId;
	}

	/**
	 * Prints out the commit's information in the appropriate format
	 */
	public void log() {
		System.out.println("===" + "\r\n" + "Commit " + myId + "\r\n"
				+ myTime.toString() + "\r\n" + message + "\r\n");
	}

	/**
	 * Convert the commit to a readable string
	 * 
	 * @return a string with the commit's information
	 */
	public String toString() {
		return ("===" + "\r\n" + "Commit " + myId + "\r\n" + myTime.toString()
				+ "\r\n" + message);
	}

	/**
	 * Get the parent of the commit
	 * 
	 * @return the parent commit object
	 */
	public Commit parent() {
		return myParent;
	}

	/**
	 * Add a child to the array list of children
	 * 
	 * @param commitMessage
	 *            - the message
	 * @param commitId
	 *            - the commit's id
	 * @param parentId
	 *            - the id of the parent
	 */
	public void addChild(String commitMessage, int commitId, int parentId) {
		if (myId == parentId) {
			Commit child = new Commit(commitMessage, commitId, this);
			myChildren.add(child);
		} else {
			for (Commit a : myChildren) {
				a.addChild(commitMessage, commitId, parentId);
			}
		}
	}

	/**
	 * Helper method for determining the size of the commit tree
	 * 
	 * @return the size of the tree
	 */
	public int size() {
		int mySize = 1;
		for (Commit c : myChildren) {
			mySize = mySize + c.size();
		}
		return mySize;
	}

	/**
	 * Helper method for determining the height of the commit tree
	 * 
	 * @return the height of the tree
	 */
	public int height() {
		int h = 1;
		for (Commit c : myChildren) {
			h = Math.max(h, 1 + c.height());
		}
		return h;
	}
}

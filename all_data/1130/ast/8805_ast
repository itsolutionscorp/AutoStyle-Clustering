s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :groups, s(:call, s(:const, :Hash), :new)), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word), s(:block, s(:lasgn, :alpha_word, s(:call, s(:lvar, :word), :downcase)), s(:lasgn, :alpha_word, s(:call, s(:call, s(:call, s(:call, s(:lvar, :alpha_word), :split, s(:str, "")), :sort!), :join, s(:str, "")), :delete, s(:str, " "))), s(:if, s(:call, s(:call, s(:lvar, :groups), :key?, s(:lvar, :alpha_word)), :==, s(:false)), s(:attrasgn, s(:lvar, :groups), :[]=, s(:lvar, :alpha_word), s(:call, s(:const, :Array), :new)), nil), s(:attrasgn, s(:lvar, :groups), :[]=, s(:lvar, :alpha_word), s(:call, s(:call, s(:lvar, :groups), :[], s(:lvar, :alpha_word)), :+, s(:array, s(:lvar, :word)))), s(:call, nil, :puts, s(:call, s(:lvar, :groups), :[], s(:lvar, :alpha_word))))), s(:return, s(:iter, s(:call, s(:iter, s(:call, s(:call, s(:lvar, :groups), :keys), :sort_by), s(:args, :key), s(:call, s(:lvar, :key), :to_i)), :map), s(:args, :key), s(:call, s(:lvar, :groups), :[], s(:lvar, :key)))))
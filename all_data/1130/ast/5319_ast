s(:block, s(:defn, :palindrome?, s(:args, :string), s(:lasgn, :justChars, s(:call, s(:call, s(:lvar, :string), :gsub, s(:lit, /\W/i), s(:str, "")), :downcase)), s(:call, s(:lvar, :justChars), :==, s(:call, s(:lvar, :justChars), :reverse))), s(:defn, :count_words, s(:args, :string), s(:lasgn, :words, s(:iter, s(:call, s(:call, s(:call, s(:lvar, :string), :downcase), :split, s(:lit, /\b/)), :select), s(:args, :s), s(:match3, s(:lit, /\w/), s(:lvar, :s)))), s(:lasgn, :freqs, s(:call, s(:const, :Hash), :new, s(:lit, 0))), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word), s(:op_asgn1, s(:lvar, :freqs), s(:arglist, s(:lvar, :word)), :+, s(:lit, 1))), s(:lvar, :freqs)), s(:class, :WrongNumberOfPlayersError, s(:const, :StandardError)), s(:class, :NoSuchStrategyError, s(:const, :StandardError)), s(:defn, :rps_game_winner, s(:args, :game), s(:if, s(:call, s(:call, s(:lvar, :game), :length), :==, s(:lit, 2)), nil, s(:call, nil, :raise, s(:const, :WrongNumberOfPlayersError))), s(:if, s(:and, s(:match3, s(:lit, /^[rps]$/i), s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 0)), :[], s(:lit, 1))), s(:match3, s(:lit, /^[rps]$/i), s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 1)), :[], s(:lit, 1)))), nil, s(:call, nil, :raise, s(:const, :NoSuchStrategyError))), s(:if, s(:call, s(:call, s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 0)), :[], s(:lit, 1)), :downcase), :==, s(:call, s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 1)), :[], s(:lit, 1)), :downcase)), s(:call, s(:lvar, :game), :[], s(:lit, 0)), nil), s(:if, s(:match3, s(:lit, /r/i), s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 0)), :[], s(:lit, 1))), s(:if, s(:match3, s(:lit, /p/i), s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 1)), :[], s(:lit, 1))), s(:return, s(:call, s(:lvar, :game), :[], s(:lit, 1))), s(:return, s(:call, s(:lvar, :game), :[], s(:lit, 0)))), s(:if, s(:match3, s(:lit, /p/i), s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 0)), :[], s(:lit, 1))), s(:if, s(:match3, s(:lit, /s/i), s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 1)), :[], s(:lit, 1))), s(:return, s(:call, s(:lvar, :game), :[], s(:lit, 1))), s(:return, s(:call, s(:lvar, :game), :[], s(:lit, 0)))), s(:if, s(:match3, s(:lit, /r/i), s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 1)), :[], s(:lit, 1))), s(:return, s(:call, s(:lvar, :game), :[], s(:lit, 1))), s(:return, s(:call, s(:lvar, :game), :[], s(:lit, 0))))))), s(:defn, :rps_tournament_winner, s(:args, :tournament), s(:if, s(:call, s(:call, s(:call, s(:lvar, :tournament), :flatten), :length), :==, s(:lit, 4)), s(:call, nil, :rps_game_winner, s(:lvar, :tournament)), s(:call, nil, :rps_game_winner, s(:array, s(:call, nil, :rps_tournament_winner, s(:call, s(:lvar, :tournament), :[], s(:lit, 0))), s(:call, nil, :rps_tournament_winner, s(:call, s(:lvar, :tournament), :[], s(:lit, 1))))))), s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :results, s(:call, s(:const, :Array), :new, s(:lit, 0))), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word), s(:block, s(:lasgn, :found, s(:false)), s(:iter, s(:call, s(:lvar, :results), :each), s(:args, :result), s(:if, s(:call, s(:call, s(:call, s(:call, s(:call, s(:call, s(:lvar, :result), :[], s(:lit, 0)), :downcase), :chars), :sort), :join), :==, s(:call, s(:call, s(:call, s(:call, s(:lvar, :word), :downcase), :chars), :sort), :join)), s(:block, s(:call, s(:lvar, :result), :<<, s(:lvar, :word)), s(:lasgn, :found, s(:true))), nil)), s(:if, s(:call, s(:lvar, :found), :!), s(:call, s(:lvar, :results), :<<, s(:array, s(:lvar, :word))), nil))), s(:return, s(:lvar, :results))), s(:class, :Dessert, nil, s(:defn, :initialize, s(:args, :name, :calories), s(:iasgn, :@name, s(:lvar, :name)), s(:iasgn, :@calories, s(:lvar, :calories))), s(:defn, :healthy?, s(:args), s(:call, s(:ivar, :@calories), :<, s(:lit, 200))), s(:defn, :delicious?, s(:args), s(:true))), s(:class, :JellyBean, s(:const, :Dessert), s(:defn, :initialize, s(:args, :name, :calories, :flavor), s(:super, s(:lvar, :name), s(:lvar, :calories)), s(:iasgn, :@flavor, s(:lvar, :flavor))), s(:defn, :delicious?, s(:args), s(:if, s(:call, s(:call, nil, :flavor), :==, s(:str, "black licorice")), s(:return, s(:false)), nil), s(:zsuper))))
s(:block, s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :anagramHash, s(:call, s(:const, :Hash), :new, s(:lit, 0))), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :aWord), s(:block, s(:lasgn, :hashKey, s(:call, s(:call, s(:call, s(:lvar, :aWord), :downcase), :chars), :sort)), s(:if, s(:call, s(:call, s(:lvar, :anagramHash), :[], s(:lvar, :hashKey)), :==, s(:lit, 0)), s(:attrasgn, s(:lvar, :anagramHash), :[]=, s(:lvar, :hashKey), s(:array)), nil), s(:op_asgn1, s(:lvar, :anagramHash), s(:arglist, s(:lvar, :hashKey)), :+, s(:array, s(:lvar, :aWord))))), s(:call, s(:lvar, :anagramHash), :values)), s(:class, :WrongNumberOfPlayersError, s(:const, :StandardError)), s(:class, :NoSuchStrategyError, s(:const, :StandardError)), s(:defn, :rps_game_winner, s(:args, :game), s(:if, s(:call, s(:call, s(:lvar, :game), :length), :==, s(:lit, 2)), nil, s(:call, nil, :raise, s(:const, :WrongNumberOfPlayersError))), s(:lasgn, :p1s, s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 0)), :[], s(:lit, 1))), s(:lasgn, :p2s, s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 1)), :[], s(:lit, 1))), s(:if, s(:or, s(:call, s(:lvar, :p1s), :==, s(:str, "R")), s(:or, s(:call, s(:lvar, :p1s), :==, s(:str, "P")), s(:call, s(:lvar, :p1s), :==, s(:str, "S")))), nil, s(:call, nil, :raise, s(:const, :NoSuchStrategyError))), s(:if, s(:or, s(:call, s(:lvar, :p2s), :==, s(:str, "R")), s(:or, s(:call, s(:lvar, :p2s), :==, s(:str, "P")), s(:call, s(:lvar, :p2s), :==, s(:str, "S")))), nil, s(:call, nil, :raise, s(:const, :NoSuchStrategyError))), s(:lasgn, :winner, s(:call, s(:lvar, :game), :[], s(:lit, 0))), s(:if, s(:or, s(:and, s(:call, s(:lvar, :p2s), :==, s(:str, "R")), s(:call, s(:lvar, :p1s), :==, s(:str, "S"))), s(:or, s(:and, s(:call, s(:lvar, :p2s), :==, s(:str, "P")), s(:call, s(:lvar, :p1s), :==, s(:str, "R"))), s(:and, s(:call, s(:lvar, :p2s), :==, s(:str, "S")), s(:call, s(:lvar, :p1s), :==, s(:str, "P"))))), s(:lasgn, :winner, s(:call, s(:lvar, :game), :[], s(:lit, 1))), nil), s(:lvar, :winner)), s(:defn, :rps_tournament_winner, s(:args, :tree), s(:if, s(:call, s(:call, s(:lvar, :tree), :[], s(:lit, 0)), :==, s(:call, s(:call, s(:lvar, :tree), :[], s(:lit, 0)), :flatten)), s(:call, nil, :rps_game_winner, s(:lvar, :tree)), s(:call, nil, :rps_game_winner, s(:array, s(:call, nil, :rps_tournament_winner, s(:call, s(:lvar, :tree), :[], s(:lit, 0))), s(:call, nil, :rps_tournament_winner, s(:call, s(:lvar, :tree), :[], s(:lit, 1))))))), s(:defn, :palindrome?, s(:args, :string), s(:lasgn, :newString, s(:call, s(:call, s(:lvar, :string), :downcase), :gsub, s(:lit, /[^a-zA-Z]/), s(:str, ""))), s(:call, s(:lvar, :newString), :==, s(:call, s(:lvar, :newString), :reverse))), s(:defn, :count_words, s(:args, :string), s(:lasgn, :wordArray, s(:call, s(:call, s(:lvar, :string), :gsub, s(:lit, /[^\w ]/), s(:str, "")), :scan, s(:lit, /\w+/))), s(:lasgn, :countHash, s(:call, s(:const, :Hash), :new, s(:lit, 0))), s(:iter, s(:call, s(:lvar, :wordArray), :each), s(:args, :aWord), s(:op_asgn1, s(:lvar, :countHash), s(:arglist, s(:lvar, :aWord)), :+, s(:lit, 1))), s(:lvar, :countHash)))
s(:block, s(:class, :String, nil, s(:defn, :palindrome?, s(:args), s(:call, s(:call, s(:self), :plain), :==, s(:call, s(:call, s(:self), :reverse), :plain))), s(:defn, :plain, s(:args), s(:call, s(:call, s(:self), :downcase), :gsub, s(:lit, /\W/), s(:str, ""))), s(:defn, :count_words, s(:args), s(:lasgn, :words, s(:call, s(:const, :Hash), :new)), s(:iter, s(:call, s(:call, s(:call, s(:self), :downcase), :split, s(:lit, /\b/)), :each), s(:args, :w), s(:if, s(:match2, s(:lit, /\w+/), s(:lvar, :w)), s(:if, s(:call, s(:call, s(:lvar, :words), :[], s(:lvar, :w)), :==, s(:nil)), s(:attrasgn, s(:lvar, :words), :[]=, s(:lvar, :w), s(:lit, 1)), s(:attrasgn, s(:lvar, :words), :[]=, s(:lvar, :w), s(:call, s(:call, s(:lvar, :words), :[], s(:lvar, :w)), :+, s(:lit, 1)))), nil)), s(:lvar, :words))), s(:defn, :palindrome?, s(:args, :phrase), s(:call, s(:lvar, :phrase), :palindrome?)), s(:defn, :count_words, s(:args, :phrase), s(:call, s(:lvar, :phrase), :count_words)), s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :words_hash, s(:iter, s(:call, s(:lvar, :words), :group_by), s(:args, :word), s(:call, s(:call, s(:call, s(:lvar, :word), :downcase), :chars), :sort))), s(:call, s(:lvar, :words_hash), :values)))
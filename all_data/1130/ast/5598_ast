s(:block, s(:defn, :combine_anagrams, s(:args, :words), s(:if, s(:call, s(:lvar, :words), :==, s(:array)), s(:return, s(:array)), nil), s(:lasgn, :result, s(:array)), s(:call, s(:lvar, :result), :push, s(:array, s(:call, s(:lvar, :words), :[], s(:lit, 0)))), s(:lasgn, :words, s(:call, s(:lvar, :words), :[], s(:lit, 1..-1))), s(:for, s(:lvar, :words), s(:lasgn, :w), s(:block, s(:lasgn, :std_w, s(:call, nil, :standardize, s(:lvar, :w))), s(:lasgn, :found, s(:false)), s(:for, s(:lvar, :result), s(:lasgn, :group), s(:if, s(:call, s(:call, nil, :standardize, s(:call, s(:lvar, :group), :[], s(:lit, 0))), :==, s(:lvar, :std_w)), s(:block, s(:call, s(:lvar, :group), :push, s(:lvar, :w)), s(:lasgn, :found, s(:true))), nil)), s(:if, s(:lvar, :found), nil, s(:call, s(:lvar, :result), :push, s(:array, s(:lvar, :w)))))), s(:return, s(:lvar, :result))), s(:defn, :standardize, s(:args, :word), s(:return, s(:call, s(:call, s(:call, s(:call, s(:call, s(:lvar, :word), :upcase), :chars), :to_a), :sort), :join, s(:str, "")))), s(:defn, :demo, s(:args), s(:lasgn, :words, s(:array, s(:str, "cars"), s(:str, "for"), s(:str, "potatoes"), s(:str, "racs"), s(:str, "four"), s(:str, "scar"), s(:str, "creams"), s(:str, "scream"))), s(:call, nil, :combine_anagrams, s(:lvar, :words))), s(:defn, :test, s(:args), s(:if, s(:call, s(:call, nil, :combine_anagrams, s(:array)), :==, s(:array)), nil, s(:call, nil, :raise, s(:const, :StandardError))), s(:call, nil, :puts, s(:str, "Empty list test passes"))))
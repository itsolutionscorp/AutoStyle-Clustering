s(:block, s(:defn, :combine_anagrams, s(:args, :words), s(:if, s(:call, s(:lvar, :words), :empty?), s(:array), nil), s(:lasgn, :combine, s(:call, s(:const, :Hash), :new)), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word), s(:block, s(:lasgn, :sorted, s(:call, s(:call, s(:call, s(:call, s(:lvar, :word), :downcase), :chars), :sort), :join)), s(:if, s(:call, s(:lvar, :combine), :has_key?, s(:lvar, :sorted)), s(:call, s(:call, s(:lvar, :combine), :[], s(:lvar, :sorted)), :<<, s(:lvar, :word)), s(:attrasgn, s(:lvar, :combine), :[]=, s(:lvar, :sorted), s(:array, s(:lvar, :word)))))), s(:call, s(:lvar, :combine), :values)), s(:defn, :test, s(:args), s(:lasgn, :words1, s(:array, s(:str, "cars"), s(:str, "for"), s(:str, "potatoes"), s(:str, "racs"), s(:str, "four"), s(:str, "scar"), s(:str, "creams"), s(:str, "scream"))), s(:lasgn, :words2, s(:array)), s(:lasgn, :words3, s(:array, s(:str, "A"), s(:str, "man"), s(:str, "a"), s(:str, "plan"), s(:str, "a"), s(:str, "Panama"))), s(:call, nil, :puts, s(:call, s(:call, nil, :combine_anagrams, s(:lvar, :words1)), :==, s(:array, s(:array, s(:str, "cars"), s(:str, "racs"), s(:str, "scar")), s(:array, s(:str, "for")), s(:array, s(:str, "potatoes")), s(:array, s(:str, "four")), s(:array, s(:str, "creams"), s(:str, "scream"))))), s(:call, nil, :puts, s(:call, s(:call, nil, :combine_anagrams, s(:lvar, :words2)), :==, s(:array))), s(:call, nil, :puts, s(:call, s(:call, nil, :combine_anagrams, s(:lvar, :words3)), :==, s(:array, s(:array, s(:str, "A"), s(:str, "a"), s(:str, "a")), s(:array, s(:str, "man")), s(:array, s(:str, "plan")), s(:array, s(:str, "Panama")))))))
s(:block, s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :results, s(:array)), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word), s(:block, s(:lasgn, :wordSorted, s(:call, s(:iter, s(:call, s(:call, s(:lvar, :word), :chars), :sort), s(:args, :a, :b), s(:call, s(:lvar, :a), :casecmp, s(:lvar, :b))), :join)), s(:if, s(:call, s(:call, s(:call, s(:lvar, :results), :flatten), :length), :==, s(:lit, 0)), s(:block, s(:lasgn, :sub, s(:array)), s(:call, s(:lvar, :sub), :push, s(:lvar, :word)), s(:call, s(:lvar, :results), :push, s(:lvar, :sub))), s(:block, s(:lasgn, :modified, s(:false)), s(:iter, s(:call, s(:lvar, :results), :each), s(:args, :subarray), s(:block, s(:lasgn, :subWordSorted, s(:call, s(:iter, s(:call, s(:call, s(:call, s(:lvar, :subarray), :[], s(:lit, 0)), :chars), :sort), s(:args, :a, :b), s(:call, s(:lvar, :a), :casecmp, s(:lvar, :b))), :join)), s(:if, s(:call, s(:lvar, :wordSorted), :==, s(:lvar, :subWordSorted)), s(:block, s(:call, s(:lvar, :subarray), :push, s(:lvar, :word)), s(:lasgn, :modified, s(:true)), s(:break)), nil))), s(:call, nil, :p, s(:lvar, :modified)), s(:if, s(:call, s(:lvar, :modified), :!=, s(:true)), s(:block, s(:lasgn, :sub, s(:array)), s(:call, s(:lvar, :sub), :push, s(:lvar, :word)), s(:call, s(:lvar, :results), :push, s(:lvar, :sub))), s(:call, s(:lvar, :modified), :==, s(:false))))))), s(:call, nil, :p, s(:lvar, :results))), s(:call, nil, :combine_anagrams, s(:array, s(:str, "cars"), s(:str, "for"), s(:str, "potatoes"), s(:str, "racs"), s(:str, "four"), s(:str, "scar"), s(:str, "creams"), s(:str, "scream"))))
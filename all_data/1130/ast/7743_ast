s(:block, s(:call, nil, :require, s(:str, "pp")), s(:defn, :norm, s(:args, :word), s(:lasgn, :newword, s(:str, "")), s(:lasgn, :offset, s(:lit, 0)), s(:iter, s(:call, s(:dot2, s(:str, "a"), s(:str, "z")), :each), s(:args, :c), s(:block, s(:while, s(:call, s(:call, s(:lvar, :word), :index, s(:lvar, :c), s(:lvar, :offset)), :!=, s(:nil)), s(:block, s(:lasgn, :newword, s(:call, s(:lvar, :newword), :+, s(:lvar, :c))), s(:lasgn, :offset, s(:call, s(:call, s(:lvar, :word), :index, s(:lvar, :c), s(:lvar, :offset)), :+, s(:lit, 1)))), true), s(:lasgn, :offset, s(:lit, 0)))), s(:return, s(:lvar, :newword))), s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :ordered, s(:iter, s(:call, s(:const, :Hash), :new), s(:args), s(:array))), s(:lasgn, :anagrams, s(:call, s(:const, :Array), :new)), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word), s(:block, s(:lasgn, :norm, s(:call, nil, :norm, s(:call, s(:lvar, :word), :downcase))), s(:if, s(:call, s(:call, s(:lvar, :ordered), :has_key?, s(:lvar, :norm)), :!), s(:attrasgn, s(:lvar, :ordered), :[]=, s(:lvar, :norm), s(:call, s(:const, :Array), :new)), nil), s(:call, s(:call, s(:lvar, :ordered), :[], s(:lvar, :norm)), :<<, s(:lvar, :word)))), s(:iter, s(:call, s(:lvar, :ordered), :each), s(:args, :key, :value), s(:call, s(:lvar, :anagrams), :<<, s(:lvar, :value))), s(:return, s(:lvar, :anagrams))), s(:lasgn, :w, s(:array, s(:str, "Cars"), s(:str, "foR"), s(:str, "potatoes"), s(:str, "racs"), s(:str, "four"), s(:str, "scar"), s(:str, "creams"), s(:str, "scream"))), s(:call, s(:const, :PP), :pp, s(:call, nil, :combine_anagrams, s(:lvar, :w))))
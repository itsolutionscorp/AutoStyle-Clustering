s(:block, s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :result, s(:array)), s(:for, s(:dot3, s(:lit, 0), s(:call, s(:lvar, :words), :length)), s(:lasgn, :i), s(:block, s(:lasgn, :new_entry, s(:true)), s(:for, s(:dot3, s(:lit, 0), s(:call, s(:lvar, :result), :length)), s(:lasgn, :j), s(:if, s(:call, s(:call, s(:call, s(:call, s(:call, s(:call, s(:call, s(:lvar, :result), :[], s(:lvar, :j)), :[], s(:lit, 0)), :downcase), :chars), :sort), :join), :==, s(:call, s(:call, s(:call, s(:call, s(:call, s(:lvar, :words), :[], s(:lvar, :i)), :downcase), :chars), :sort), :join)), s(:block, s(:call, s(:call, s(:lvar, :result), :[], s(:lvar, :j)), :<<, s(:call, s(:lvar, :words), :[], s(:lvar, :i))), s(:lasgn, :new_entry, s(:false))), nil)), s(:if, s(:lvar, :new_entry), s(:block, s(:call, s(:lvar, :result), :<<, s(:array)), s(:call, s(:call, s(:lvar, :result), :[], s(:call, s(:call, s(:lvar, :result), :length), :-, s(:lit, 1))), :<<, s(:call, s(:lvar, :words), :[], s(:lvar, :i)))), nil))), s(:lvar, :result)), s(:call, nil, :puts, s(:call, nil, :combine_anagrams, s(:array, s(:str, "cars"), s(:str, "for"), s(:str, "potatoes"), s(:str, "racs"), s(:str, "four"), s(:str, "scar"), s(:str, "creams"), s(:str, "scream")))), s(:defn, :count_words, s(:args, :string), s(:lasgn, :string, s(:call, s(:lvar, :string), :downcase)), s(:lasgn, :h, s(:hash)), s(:lasgn, :array, s(:iter, s(:call, s(:call, s(:call, s(:lvar, :string), :split, s(:lit, /\W+/)), :uniq), :each), s(:args, :s), s(:call, s(:lvar, :h), :merge!, s(:hash, s(:lvar, :s), s(:call, s(:call, s(:lvar, :string), :scan, s(:dregx, "\\b", s(:evstr, s(:lvar, :s)), s(:str, "\\b"))), :length))))), s(:lvar, :h)))
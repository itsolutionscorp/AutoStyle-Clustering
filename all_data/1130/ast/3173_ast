s(:block, s(:defn, :anagram?, s(:args, :a, :b), s(:call, s(:call, s(:call, s(:call, s(:lvar, :a), :downcase), :split, s(:str, "")), :sort), :==, s(:call, s(:call, s(:call, s(:lvar, :b), :downcase), :split, s(:str, "")), :sort))), s(:defn, :combine_anagrams, s(:args, :words), s(:call, s(:iter, s(:call, s(:lvar, :words), :collect), s(:args, :x), s(:iter, s(:call, s(:lvar, :words), :select), s(:args, :w), s(:if, s(:call, nil, :anagram?, s(:lvar, :x), s(:lvar, :w)), s(:lvar, :w), nil))), :uniq)), s(:if, s(:call, nil, :anagram?, s(:str, "cars"), s(:str, "racs")), nil, s(:call, nil, :raise, s(:str, "Failed is anagram"))), s(:if, s(:call, nil, :anagram?, s(:str, "carS"), s(:str, "scAr")), nil, s(:call, nil, :raise, s(:str, "Failed is anagram ignore case"))), s(:if, s(:call, s(:call, nil, :anagram?, s(:str, "cars"), s(:str, "scar ")), :!), nil, s(:call, nil, :raise, s(:str, "Failed is not anagram because of space"))), s(:if, s(:call, s(:call, nil, :combine_anagrams, s(:array, s(:str, "cars"), s(:str, "for"), s(:str, "potatoes"), s(:str, "racs"), s(:str, "four"), s(:str, "scar"), s(:str, "creams"), s(:str, "scream"))), :==, s(:array, s(:array, s(:str, "cars"), s(:str, "racs"), s(:str, "scar")), s(:array, s(:str, "for")), s(:array, s(:str, "potatoes")), s(:array, s(:str, "four")), s(:array, s(:str, "creams"), s(:str, "scream")))), nil, s(:call, nil, :raise, s(:str, "Failed test"))), s(:if, s(:call, s(:call, nil, :combine_anagrams, s(:array)), :==, s(:array)), nil, s(:call, nil, :raise, s(:str, "Failed empty array test"))), s(:if, s(:call, s(:call, nil, :combine_anagrams, s(:array, s(:str, "cars"))), :==, s(:array, s(:array, s(:str, "cars")))), nil, s(:call, nil, :raise, s(:str, "Failed single array test"))))
s(:block, s(:defn, :palindrome?, s(:args, :string), s(:lasgn, :s, s(:call, s(:call, s(:lvar, :string), :downcase), :gsub, s(:lit, /[^a-z]/i), s(:str, ""))), s(:call, s(:lvar, :s), :==, s(:call, s(:lvar, :s), :reverse))), s(:defn, :count_words, s(:args, :string), s(:lasgn, :h, s(:hash)), s(:iter, s(:call, s(:call, s(:call, s(:lvar, :string), :downcase), :gsub, s(:lit, /\b[a-z]+\b/)), :each), s(:args, :w), s(:attrasgn, s(:lvar, :h), :[]=, s(:lvar, :w), s(:call, s(:or, s(:call, s(:lvar, :h), :[], s(:lvar, :w)), s(:lit, 0)), :+, s(:lit, 1)))), s(:return, s(:lvar, :h))), s(:class, :WrongNumberOfPlayersError, s(:const, :StandardError)), s(:class, :NoSuchStrategyError, s(:const, :StandardError)), s(:defn, :_rps_game_winner, s(:args, :game), s(:if, s(:call, s(:call, s(:lvar, :game), :length), :==, s(:lit, 2)), nil, s(:call, nil, :raise, s(:const, :WrongNumberOfPlayersError))), s(:lasgn, :a, s(:str, "")), s(:iter, s(:call, s(:lvar, :game), :each), s(:args, :k, :v), s(:block, s(:lasgn, :v, s(:call, s(:lvar, :v), :downcase)), s(:if, s(:and, s(:call, s(:lvar, :v), :!=, s(:str, "p")), s(:and, s(:call, s(:lvar, :v), :!=, s(:str, "s")), s(:call, s(:lvar, :v), :!=, s(:str, "r")))), s(:call, nil, :raise, s(:const, :NoSuchStrategyError)), nil), s(:lasgn, :a, s(:call, s(:lvar, :a), :+, s(:lvar, :v))))), s(:if, s(:or, s(:call, s(:lvar, :a), :==, s(:str, "ss")), s(:or, s(:call, s(:lvar, :a), :==, s(:str, "pp")), s(:call, s(:lvar, :a), :==, s(:str, "rr")))), s(:return, s(:call, s(:lvar, :game), :[], s(:lit, 0))), nil), s(:if, s(:or, s(:call, s(:lvar, :a), :==, s(:str, "sp")), s(:or, s(:call, s(:lvar, :a), :==, s(:str, "pr")), s(:call, s(:lvar, :a), :==, s(:str, "rs")))), s(:return, s(:call, s(:lvar, :game), :[], s(:lit, 0))), nil), s(:return, s(:call, s(:lvar, :game), :[], s(:lit, 1)))), s(:defn, :rps_game_winner, s(:args, :game), s(:return, s(:call, nil, :_rps_game_winner, s(:lvar, :game)))), s(:defn, :rps_tournament_winner, s(:args, :tour), s(:if, s(:call, s(:call, s(:call, s(:lvar, :tour), :[], s(:lit, 0)), :[], s(:lit, 0)), :is_a?, s(:const, :String)), s(:block, s(:lasgn, :w, s(:call, nil, :_rps_game_winner, s(:lvar, :tour))), s(:call, nil, :print, s(:str, "Got "), s(:lvar, :w), s(:str, "\n")), s(:return, s(:lvar, :w)), s(:lasgn, :v, s(:call, s(:call, s(:lvar, :tour), :[], s(:if, s(:call, s(:lvar, :w), :==, s(:call, s(:call, s(:lvar, :tour), :[], s(:lit, 0)), :[], s(:lit, 0))), s(:lit, 0), s(:lit, 1))), :[], s(:lit, 1))), s(:call, nil, :print, s(:call, s(:call, s(:call, s(:call, s(:str, "Got "), :+, s(:lvar, :w)), :+, s(:str, " ")), :+, s(:lvar, :v)), :+, s(:str, "\n"))), s(:return, s(:array, s(:lvar, :w), s(:lvar, :v)))), nil), s(:lasgn, :tn, s(:array)), s(:iter, s(:call, s(:lvar, :tour), :each), s(:args, :t), s(:lasgn, :tn, s(:call, s(:lvar, :tn), :+, s(:array, s(:call, nil, :rps_tournament_winner, s(:lvar, :t)))))), s(:call, nil, :print, s(:str, "tn = "), s(:lvar, :tn), s(:str, "\n")), s(:return, s(:call, nil, :_rps_game_winner, s(:lvar, :tn)))), s(:if, s(:nil), s(:call, nil, :print, s(:call, nil, :rps_tournament_winner, s(:array, s(:array, s(:array, s(:array, s(:str, "Armando"), s(:str, "P")), s(:array, s(:str, "Dave"), s(:str, "S"))), s(:array, s(:array, s(:str, "Richard"), s(:str, "R")), s(:array, s(:str, "Michael"), s(:str, "S")))), s(:array, s(:array, s(:array, s(:str, "Allen"), s(:str, "S")), s(:array, s(:str, "Omer"), s(:str, "P"))), s(:array, s(:array, s(:str, "David E."), s(:str, "R")), s(:array, s(:str, "Richard X."), s(:str, "P")))))), s(:str, "\n")), nil), s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :res, s(:array)), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :w), s(:block, s(:lasgn, :pas, s(:lit, 0)), s(:iter, s(:call, s(:lvar, :res), :each), s(:args, :r), s(:if, s(:call, s(:call, s(:call, s(:call, s(:call, s(:call, s(:lvar, :r), :[], s(:lit, 0)), :downcase), :split, s(:str, "")), :sort), :join), :==, s(:call, s(:call, s(:call, s(:call, s(:lvar, :w), :downcase), :split, s(:str, "")), :sort), :join)), s(:block, s(:call, s(:lvar, :r), :<<, s(:lvar, :w)), s(:call, nil, :print, s(:call, s(:lvar, :r), :join, s(:str, ":")), s(:str, "\n")), s(:lasgn, :pas, s(:lit, 1)), s(:break)), nil)), s(:if, s(:call, s(:lvar, :pas), :==, s(:lit, 0)), s(:call, s(:lvar, :res), :<<, s(:array, s(:lvar, :w))), nil))), s(:lvar, :res)), s(:call, nil, :combine_anagrams, s(:array, s(:str, "creams"), s(:str, "cars"), s(:str, "for"), s(:str, "potatoes"), s(:str, "racs"), s(:str, "four"), s(:str, "scar"), s(:str, "scream"))))
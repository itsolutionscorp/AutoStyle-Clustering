s(:block, s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :resultHash, s(:call, s(:const, :Hash), :new)), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :x), s(:block, s(:lasgn, :keyStr, s(:call, s(:call, s(:call, s(:call, s(:lvar, :x), :to_s), :split, s(:lit, //)), :sort), :join)), s(:call, nil, :puts, s(:lvar, :keyStr)), s(:if, s(:call, s(:call, s(:lvar, :resultHash), :key?, s(:lvar, :keyStr)), :!), s(:block, s(:lasgn, :arr, s(:call, s(:const, :Array), :new)), s(:call, s(:lvar, :arr), :<<, s(:lvar, :x)), s(:attrasgn, s(:lvar, :resultHash), :[]=, s(:lvar, :keyStr), s(:lvar, :arr))), s(:call, s(:call, s(:lvar, :resultHash), :[], s(:lvar, :keyStr)), :<<, s(:lvar, :x))))), s(:lasgn, :arr2, s(:call, s(:const, :Array), :new)), s(:iter, s(:call, s(:lvar, :resultHash), :each_value), s(:args, :value), s(:call, s(:lvar, :arr2), :<<, s(:lvar, :value))), s(:return, s(:lvar, :arr2))), s(:iter, s(:call, s(:const, :ARGV), :each), s(:args, :a), s(:block, s(:lasgn, :words, s(:call, nil, :eval, s(:call, s(:call, s(:lvar, :a), :downcase), :gsub, s(:lit, /\w+/), s(:str, ":\\&")))), s(:call, nil, :p, s(:call, nil, :combine_anagrams, s(:lvar, :words))))))
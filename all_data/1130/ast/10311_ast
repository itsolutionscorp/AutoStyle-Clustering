s(:block, s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :result, s(:call, s(:const, :Hash), :new, s(:call, s(:const, :Array), :new))), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word), s(:block, s(:call, nil, :print, s(:call, s(:call, s(:str, "Checking "), :+, s(:lvar, :word)), :+, s(:str, "\n"))), s(:lasgn, :wordDown, s(:call, s(:lvar, :word), :downcase)), s(:if, s(:call, s(:call, s(:lvar, :result), :has_key?, s(:call, s(:call, s(:lvar, :wordDown), :chars), :sort)), :!), s(:block, s(:call, nil, :print, s(:call, s(:call, s(:str, "Creating "), :+, s(:lvar, :word)), :+, s(:str, "\n"))), s(:attrasgn, s(:lvar, :result), :[]=, s(:call, s(:call, s(:lvar, :wordDown), :chars), :sort), s(:call, s(:const, :Array), :new))), nil), s(:call, s(:call, s(:lvar, :result), :[], s(:call, s(:call, s(:lvar, :wordDown), :chars), :sort)), :<<, s(:lvar, :word)))), s(:lasgn, :result2, s(:array)), s(:iter, s(:call, s(:lvar, :result), :each_pair), s(:args, :key, :value), s(:call, s(:lvar, :result2), :push, s(:lvar, :value))), s(:call, nil, :print, s(:lvar, :result2)), s(:lvar, :result2)), s(:lasgn, :proof, s(:array, s(:str, "cars"), s(:str, "for"), s(:str, "potatoes"), s(:str, "racs"), s(:str, "four"), s(:str, "scar"), s(:str, "creams"), s(:str, "scream"))), s(:lasgn, :proof2, s(:array, s(:str, "hello"), s(:str, "heLLo"))), s(:call, nil, :combine_anagrams, s(:lvar, :proof2)))
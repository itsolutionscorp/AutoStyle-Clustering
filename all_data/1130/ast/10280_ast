s(:block, s(:defn, :is_anagram, s(:args, :w1, :w2), s(:if, s(:call, s(:call, s(:call, s(:call, s(:call, s(:lvar, :w1), :downcase), :chars), :sort), :join), :==, s(:call, s(:call, s(:call, s(:call, s(:lvar, :w2), :downcase), :chars), :sort), :join)), s(:return, s(:true)), s(:return, s(:false)))), s(:defn, :get_index, s(:args, :words, :word), s(:if, s(:call, s(:call, s(:lvar, :words), :length), :>, s(:lit, 0)), nil, s(:return, s(:nil))), s(:lasgn, :i, s(:lit, 0)), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :w), s(:block, s(:if, s(:call, s(:call, s(:lvar, :w), :[], s(:lit, 0)), :!=, s(:nil)), s(:if, s(:call, nil, :is_anagram, s(:call, s(:lvar, :w), :[], s(:lit, 0)), s(:lvar, :word)), s(:return, s(:lvar, :i)), nil), nil), s(:lasgn, :i, s(:call, s(:lvar, :i), :+, s(:lit, 1))))), s(:return, s(:nil))), s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :res, s(:call, s(:const, :Array), :new)), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word), s(:block, s(:lasgn, :i, s(:call, nil, :get_index, s(:lvar, :res), s(:lvar, :word))), s(:if, s(:call, s(:lvar, :i), :==, s(:nil)), s(:call, s(:lvar, :res), :<<, s(:call, s(:call, s(:const, :Array), :new), :<<, s(:lvar, :word))), s(:call, s(:call, s(:lvar, :res), :[], s(:lvar, :i)), :<<, s(:lvar, :word))))), s(:call, nil, :puts, s(:call, s(:lvar, :res), :inspect)), s(:return, s(:lvar, :res))), s(:call, nil, :puts, s(:call, nil, :combine_anagrams, s(:array, s(:str, "cars"), s(:str, "for"), s(:str, "potatoes"), s(:str, "racs"), s(:str, "four"), s(:str, "scar"), s(:str, "creams"), s(:str, "scream")))))
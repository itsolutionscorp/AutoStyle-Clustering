s(:block, s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :groups, s(:iter, s(:call, s(:const, :Hash), :new), s(:args, :h, :k), s(:attrasgn, s(:lvar, :h), :[]=, s(:lvar, :k), s(:array)))), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word), s(:block, s(:lasgn, :code, s(:call, s(:call, s(:call, s(:call, s(:lvar, :word), :downcase), :split, s(:str, "")), :sort), :join)), s(:call, s(:call, s(:lvar, :groups), :[], s(:lvar, :code)), :<<, s(:lvar, :word)))), s(:return, s(:iter, s(:call, s(:lvar, :groups), :map), s(:args, :arr), s(:call, s(:lvar, :arr), :[], s(:lit, 1))))), s(:if, s(:call, s(:gvar, :$0), :==, s(:str, "(string)")), s(:block, s(:lasgn, :anagram_tests, s(:array, s(:array, s(:array, s(:str, "cars"), s(:str, "for"), s(:str, "potatoes"), s(:str, "racs"), s(:str, "four"), s(:str, "scar"), s(:str, "creams"), s(:str, "scream")), s(:array, s(:array, s(:str, "cars"), s(:str, "racs"), s(:str, "scar")), s(:array, s(:str, "four")), s(:array, s(:str, "for")), s(:array, s(:str, "potatoes")), s(:array, s(:str, "creams"), s(:str, "scream")))), s(:array, s(:array, s(:str, "CARS"), s(:str, "for"), s(:str, "potatoes"), s(:str, "racs"), s(:str, "four"), s(:str, "SCAR"), s(:str, "creaMs"), s(:str, "scream")), s(:array, s(:array, s(:str, "CARS"), s(:str, "racs"), s(:str, "SCAR")), s(:array, s(:str, "four")), s(:array, s(:str, "for")), s(:array, s(:str, "potatoes")), s(:array, s(:str, "creaMs"), s(:str, "scream")))))), s(:iter, s(:call, s(:lvar, :anagram_tests), :each), s(:args, :words, :anagrams), s(:block, s(:lasgn, :result, s(:call, nil, :combine_anagrams, s(:lvar, :words))), s(:if, s(:call, s(:call, s(:lvar, :result), :sort), :==, s(:call, s(:lvar, :anagrams), :sort)), s(:call, nil, :puts, s(:str, "SUCCESS")), s(:block, s(:call, nil, :puts, s(:str, "FAILED")), s(:call, nil, :puts, s(:dstr, "Extected: ", s(:evstr, s(:call, s(:lvar, :anagrams), :inspect)))), s(:call, nil, :puts, s(:dstr, "Actual: ", s(:evstr, s(:call, s(:lvar, :result), :inspect))))))))), nil))
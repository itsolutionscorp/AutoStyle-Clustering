s(:block, s(:call, nil, :require, s(:str, "pp")), s(:class, :String, nil, s(:defn, :anagram?, s(:args, :word), s(:call, s(:call, s(:self), :isort), :==, s(:call, s(:lvar, :word), :isort))), s(:defn, :isort, s(:args), s(:call, s(:call, s(:call, s(:call, s(:self), :downcase), :split, s(:str, "")), :sort), :join, s(:str, "")))), s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :groups, s(:array)), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word), s(:block, s(:lasgn, :group, s(:iter, s(:call, s(:lvar, :words), :collect), s(:args, :other), s(:if, s(:call, s(:lvar, :word), :anagram?, s(:lvar, :other)), s(:lvar, :other), s(:nil)))), s(:call, s(:lvar, :groups), :<<, s(:call, s(:lvar, :group), :compact)))), s(:call, s(:lvar, :groups), :uniq)), s(:lasgn, :tests, s(:array, s(:array, s(:str, "cars"), s(:str, "scars")), s(:array, s(:str, "ars"), s(:str, "scars")), s(:array, s(:str, "cars"), s(:str, "cars")), s(:array, s(:str, "racs"), s(:str, "cars")), s(:array, s(:str, "mars"), s(:str, "cars")), s(:array, s(:str, "cReams"), s(:str, "SCREAM")), s(:array, s(:str, "a"), s(:str, "A")), s(:array, s(:str, "cars"), s(:str, "CARS"), s(:str, "CaRS")), s(:array, s(:str, "cars"), s(:str, "a"), s(:str, "A"), s(:str, "B"), s(:str, "B"), s(:str, "Cars"), s(:str, "for"), s(:str, "potatoes"), s(:str, "racs"), s(:str, "fourscar"), s(:str, "creams"), s(:str, "scream")))), s(:iter, s(:call, s(:lvar, :tests), :each), s(:args, :words), s(:block, s(:call, nil, :puts, s(:str, "Running: ")), s(:call, nil, :pp, s(:lvar, :words)), s(:call, nil, :pp, s(:call, nil, :combine_anagrams, s(:lvar, :words))))))
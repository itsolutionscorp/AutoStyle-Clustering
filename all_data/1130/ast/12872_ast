s(:block, s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :anagrams, s(:call, s(:const, :Array), :new)), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word), s(:block, s(:lasgn, :inserted, s(:false)), s(:iter, s(:call, s(:lvar, :anagrams), :each), s(:args, :set), s(:block, s(:iter, s(:call, s(:lvar, :set), :each), s(:args, :setword), s(:if, s(:call, s(:call, s(:call, s(:call, s(:call, s(:lvar, :setword), :downcase), :chars), :sort), :join), :==, s(:call, s(:call, s(:call, s(:call, s(:lvar, :word), :downcase), :chars), :sort), :join)), s(:block, s(:call, s(:lvar, :set), :push, s(:lvar, :word)), s(:lasgn, :inserted, s(:true)), s(:break)), nil)), s(:if, s(:lvar, :inserted), s(:break), nil))), s(:if, s(:call, s(:lvar, :inserted), :!), s(:block, s(:lasgn, :new_set, s(:call, s(:const, :Array), :new)), s(:call, s(:lvar, :new_set), :push, s(:lvar, :word)), s(:call, s(:lvar, :anagrams), :push, s(:lvar, :new_set))), nil))), s(:call, nil, :p, s(:lvar, :anagrams))), s(:call, nil, :combine_anagrams, s(:array, s(:str, "cars"), s(:str, "for"), s(:str, "potatoes"), s(:str, "racs"), s(:str, "four"), s(:str, "scar"), s(:str, "creams"), s(:str, "scream"))))
s(:block, s(:defn, :combine, s(:args, :popped, :found), s(:call, nil, :puts, s(:call, s(:lvar, :popped), :inspect)), s(:call, nil, :puts, s(:call, s(:lvar, :found), :inspect)), s(:lasgn, :solution, s(:array)), s(:call, s(:lvar, :solution), :push, s(:call, s(:lvar, :popped), :[], s(:lit, 0))), s(:iter, s(:call, s(:lvar, :found), :each), s(:args, :elem), s(:call, s(:lvar, :solution), :push, s(:call, s(:lvar, :elem), :[], s(:lit, 0)))), s(:return, s(:lvar, :solution))), s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :solution, s(:array)), s(:lasgn, :words_y_descomp, s(:iter, s(:call, s(:lvar, :words), :collect), s(:args, :elem), s(:array, s(:lvar, :elem), s(:call, s(:call, s(:call, s(:lvar, :elem), :upcase), :scan, s(:lit, /./)), :sort)))), s(:while, s(:call, s(:call, s(:lvar, :words_y_descomp), :length), :>, s(:lit, 0)), s(:block, s(:lasgn, :ultim, s(:call, s(:lvar, :words_y_descomp), :pop)), s(:lasgn, :iguales, s(:iter, s(:call, s(:lvar, :words_y_descomp), :collect), s(:args, :elem), s(:if, s(:call, s(:call, s(:lvar, :elem), :[], s(:lit, 1)), :==, s(:call, s(:lvar, :ultim), :[], s(:lit, 1))), s(:lvar, :elem), nil))), s(:lasgn, :words_y_descomp, s(:call, s(:lvar, :words_y_descomp), :-, s(:lvar, :iguales))), s(:call, s(:lvar, :iguales), :delete, s(:nil)), s(:call, s(:lvar, :solution), :push, s(:call, nil, :combine, s(:lvar, :ultim), s(:lvar, :iguales)))), true), s(:return, s(:lvar, :solution))))
s(:block, s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :result, s(:call, s(:const, :Array), :new, s(:lit, 0))), s(:lasgn, :notfound, s(:true)), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :myword), s(:block, s(:for, s(:dot2, s(:lit, 0), s(:call, s(:call, s(:lvar, :result), :length), :-, s(:lit, 1))), s(:lasgn, :i), s(:block, s(:lasgn, :notfound, s(:true)), s(:if, s(:call, s(:call, s(:call, s(:call, s(:call, s(:call, s(:call, s(:lvar, :result), :[], s(:lvar, :i)), :[], s(:lit, 0)), :downcase), :chars), :sort), :join), :==, s(:call, s(:call, s(:call, s(:call, s(:lvar, :myword), :downcase), :chars), :sort), :join)), s(:block, s(:attrasgn, s(:call, s(:lvar, :result), :[], s(:lvar, :i)), :[]=, s(:call, s(:call, s(:lvar, :result), :send, s(:lit, :[]), s(:lvar, :i)), :length), s(:lvar, :myword)), s(:lasgn, :notfound, s(:false)), s(:break)), nil))), s(:if, s(:lvar, :notfound), s(:block, s(:attrasgn, s(:lvar, :result), :[]=, s(:call, s(:lvar, :result), :length), s(:call, s(:const, :Array), :new, s(:lit, 0))), s(:attrasgn, s(:call, s(:lvar, :result), :[], s(:call, s(:call, s(:lvar, :result), :length), :-, s(:lit, 1))), :[]=, s(:lit, 0), s(:lvar, :myword))), nil))), s(:return, s(:lvar, :result))))
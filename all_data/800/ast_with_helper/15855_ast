s(:block, s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :a, s(:call, s(:const, :Hash), :new)), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word), s(:block, s(:lasgn, :done, s(:false)), s(:iter, s(:call, s(:lvar, :a), :each_key), s(:args, :key), s(:if, s(:call, s(:call, s(:call, s(:call, s(:call, s(:lvar, :word), :chars), :sort), :join), :downcase), :==, s(:lvar, :key)), s(:block, s(:attrasgn, s(:lvar, :a), :[]=, s(:lvar, :key), s(:call, s(:call, s(:lvar, :a), :[], s(:lvar, :key)), :+, s(:array, s(:lvar, :word)))), s(:lasgn, :done, s(:true))), nil)), s(:lasgn, :newkey, s(:call, s(:call, s(:call, s(:call, s(:lvar, :word), :chars), :sort), :join), :downcase)), s(:if, s(:call, s(:lvar, :done), :==, s(:false)), s(:attrasgn, s(:lvar, :a), :[]=, s(:lvar, :newkey), s(:array, s(:lvar, :word))), nil))), s(:lasgn, :result, s(:call, s(:const, :Array), :new)), s(:lasgn, :counter, s(:lit, 0)), s(:iter, s(:call, s(:lvar, :a), :each_value), s(:args, :value), s(:block, s(:attrasgn, s(:lvar, :result), :[]=, s(:lvar, :counter), s(:lvar, :value)), s(:lasgn, :counter, s(:call, s(:lvar, :counter), :+, s(:lit, 1))))), s(:return, s(:lvar, :result))))
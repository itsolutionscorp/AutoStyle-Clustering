s(:block, s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :rtn, s(:call, s(:const, :Array), :new)), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word), s(:block, s(:call, nil, :p, s(:lvar, :word)), s(:lasgn, :wordDowncase, s(:call, s(:lvar, :word), :downcase)), s(:lasgn, :letters, s(:call, s(:lvar, :wordDowncase), :split, s(:str, ""))), s(:lasgn, :exist, s(:false)), s(:iter, s(:call, s(:lvar, :rtn), :each), s(:args, :rtnAry), s(:block, s(:lasgn, :rl, s(:call, s(:call, s(:call, s(:lvar, :rtnAry), :[], s(:lit, 0)), :downcase), :split, s(:str, ""))), s(:if, s(:call, s(:call, s(:lvar, :rl), :length), :==, s(:call, s(:lvar, :letters), :length)), s(:block, s(:call, nil, :p, s(:lvar, :rl)), s(:call, s(:lvar, :rl), :sort!), s(:call, s(:lvar, :letters), :sort!), s(:lasgn, :match, s(:true)), s(:lasgn, :i, s(:lit, 0)), s(:iter, s(:call, s(:lvar, :rl), :each), s(:args, :rli), s(:block, s(:call, nil, :p, s(:call, s(:call, s(:lvar, :rli), :+, s(:str, " ")), :+, s(:call, s(:lvar, :letters), :[], s(:lvar, :i)))), s(:if, s(:call, s(:lvar, :rli), :!=, s(:call, s(:lvar, :letters), :[], s(:lvar, :i))), s(:lasgn, :match, s(:false)), nil), s(:lasgn, :i, s(:call, s(:lvar, :i), :+, s(:lit, 1))))), s(:if, s(:call, s(:lvar, :match), :==, s(:true)), s(:block, s(:call, s(:lvar, :rtnAry), :<<, s(:lvar, :word)), s(:lasgn, :exist, s(:true))), nil)), nil))), s(:if, s(:call, s(:lvar, :exist), :!), s(:call, s(:lvar, :rtn), :<<, s(:array, s(:lvar, :word))), nil))), s(:return, s(:lvar, :rtn))))
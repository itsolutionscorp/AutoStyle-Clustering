s(:block, s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :anagram, s(:call, s(:const, :Array), :new)), s(:while, s(:call, s(:call, s(:lvar, :words), :length), :>, s(:lit, 0)), s(:block, s(:lasgn, :group, s(:call, s(:const, :Array), :new)), s(:lasgn, :first, s(:call, s(:lvar, :words), :[], s(:lit, 0))), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word), s(:if, s(:call, s(:call, s(:call, s(:call, s(:call, s(:lvar, :first), :downcase), :chars), :sort), :join), :==, s(:call, s(:call, s(:call, s(:call, s(:lvar, :word), :downcase), :chars), :sort), :join)), s(:call, s(:lvar, :group), :<<, s(:lvar, :word)), nil)), s(:call, s(:lvar, :anagram), :<<, s(:lvar, :group)), s(:iter, s(:call, s(:lvar, :words), :reject!), s(:args, :word), s(:call, s(:call, s(:call, s(:call, s(:call, s(:lvar, :first), :downcase), :chars), :sort), :join), :==, s(:call, s(:call, s(:call, s(:call, s(:lvar, :word), :downcase), :chars), :sort), :join)))), true), s(:return, s(:lvar, :anagram))))
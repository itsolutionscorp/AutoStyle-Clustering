s(:block, s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :output, s(:call, s(:const, :Array), :new)), s(:lasgn, :included, s(:call, s(:const, :Array), :new)), s(:lasgn, :i, s(:call, s(:lvar, :words), :size)), s(:for, s(:dot2, s(:lit, 0), s(:call, s(:lvar, :i), :-, s(:lit, 2))), s(:lasgn, :x), s(:block, s(:lasgn, :word, s(:call, s(:lvar, :words), :[], s(:lvar, :x))), s(:if, s(:call, s(:call, s(:lvar, :included), :include?, s(:call, s(:call, s(:call, s(:call, s(:lvar, :word), :downcase), :chars), :sort), :join)), :!), s(:block, s(:call, s(:lvar, :included), :push, s(:call, s(:call, s(:call, s(:call, s(:lvar, :word), :downcase), :chars), :sort), :join)), s(:lasgn, :o, s(:call, s(:const, :Array), :new)), s(:call, s(:lvar, :o), :push, s(:lvar, :word))), s(:next)), s(:for, s(:dot2, s(:call, s(:lvar, :x), :+, s(:lit, 1)), s(:call, s(:lvar, :i), :-, s(:lit, 1))), s(:lasgn, :y), s(:block, s(:lasgn, :word2, s(:call, s(:lvar, :words), :[], s(:lvar, :y))), s(:if, s(:call, s(:call, s(:call, s(:call, s(:call, s(:lvar, :word), :downcase), :chars), :sort), :join), :==, s(:call, s(:call, s(:call, s(:call, s(:lvar, :word2), :downcase), :chars), :sort), :join)), s(:call, s(:lvar, :o), :push, s(:lvar, :word2)), nil))), s(:call, s(:lvar, :output), :push, s(:lvar, :o)))), s(:return, s(:lvar, :output))))
s(:block, s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :combined_hash, s(:call, s(:const, :Hash), :new)), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word), s(:block, s(:lasgn, :letter_count_key, s(:call, nil, :count_letters, s(:lvar, :word))), s(:if, s(:call, s(:lvar, :combined_hash), :key?, s(:lvar, :letter_count_key)), s(:call, s(:call, s(:lvar, :combined_hash), :[], s(:lvar, :letter_count_key)), :push, s(:lvar, :word)), s(:attrasgn, s(:lvar, :combined_hash), :[]=, s(:lvar, :letter_count_key), s(:call, s(:call, s(:const, :Array), :new), :push, s(:lvar, :word)))))), s(:return, s(:call, s(:lvar, :combined_hash), :values))), s(:defn, :count_letters, s(:args, :word), s(:lasgn, :letters, s(:call, s(:const, :Hash), :new)), s(:iter, s(:call, s(:lvar, :word), :gsub, s(:lit, /([a-z])/i)), s(:args, :letter), s(:block, s(:call, s(:lvar, :letter), :downcase!), s(:if, s(:call, s(:lvar, :letters), :key?, s(:lvar, :letter)), s(:attrasgn, s(:lvar, :letters), :[]=, s(:lvar, :letter), s(:call, s(:call, s(:lvar, :letters), :[], s(:lvar, :letter)), :+, s(:lit, 1))), s(:attrasgn, s(:lvar, :letters), :[]=, s(:lvar, :letter), s(:lit, 1))))), s(:return, s(:lvar, :letters))))
s(:block, s(:call, nil, :quire, s(:str, "test/unit")), s(:class, :TestCombineAnagrams, s(:colon2, s(:colon2, s(:const, :Test), :Unit), :TestCase), s(:defn, :test_simple_combine_anagrams, s(:args), s(:lasgn, :argument, s(:array, s(:str, "cars"), s(:str, "for"), s(:str, "potatoes"), s(:str, "racs"), s(:str, "four"), s(:str, "scar"), s(:str, "creams"), s(:str, "scream"))), s(:lasgn, :result, s(:array, s(:array, s(:str, "cars"), s(:str, "racs"), s(:str, "scar")), s(:array, s(:str, "four")), s(:array, s(:str, "for")), s(:array, s(:str, "potatoes")), s(:array, s(:str, "creams"), s(:str, "scream")))), s(:call, nil, :assert_equal, s(:call, s(:lvar, :result), :sort), s(:call, s(:call, nil, :combine_anagrams, s(:lvar, :argument)), :sort)))), s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :groups, s(:iter, s(:call, s(:const, :Hash), :new), s(:args), s(:lasgn, :default, s(:array)))), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word), s(:block, s(:lasgn, :key, s(:call, s(:call, s(:call, s(:call, s(:lvar, :word), :downcase), :chars), :sort), :join)), s(:attrasgn, s(:lvar, :groups), :[]=, s(:lvar, :key), s(:call, s(:call, s(:lvar, :groups), :[], s(:lvar, :key)), :push, s(:lvar, :word))))), s(:call, s(:lvar, :groups), :values)))
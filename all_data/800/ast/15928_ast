s(:block, s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :combined, s(:call, s(:const, :Array), :new)), s(:lasgn, :anagrams, s(:call, s(:const, :Hash), :new)), s(:iter, s(:call, s(:call, s(:lvar, :words), :sort), :each), s(:args, :w), s(:block, s(:lasgn, :a, s(:call, s(:call, s(:call, s(:call, s(:lvar, :w), :downcase), :chars), :sort), :join)), s(:if, s(:call, s(:call, s(:lvar, :anagrams), :[], s(:lvar, :a)), :!), s(:attrasgn, s(:lvar, :anagrams), :[]=, s(:lvar, :a), s(:array, s(:lvar, :w))), s(:op_asgn1, s(:lvar, :anagrams), s(:arglist, s(:lvar, :a)), :+, s(:array, s(:lvar, :w)))))), s(:iter, s(:call, s(:lvar, :anagrams), :each), s(:args, :a, :b), s(:lasgn, :combined, s(:call, s(:lvar, :combined), :+, s(:array, s(:call, s(:lvar, :b), :sort))))), s(:return, s(:lvar, :combined))), s(:class, :Test, nil, s(:defs, s(:self), :test_combine_anagrams, s(:args), s(:lasgn, :words, s(:array, s(:str, "cars"), s(:str, "for"), s(:str, "potatoes"), s(:str, "racs"), s(:str, "four"), s(:str, "scar"), s(:str, "creams"), s(:str, "scream"))), s(:lasgn, :expected, s(:array, s(:array, s(:str, "cars"), s(:str, "racs"), s(:str, "scar")), s(:array, s(:str, "creams"), s(:str, "scream")), s(:array, s(:str, "for")), s(:array, s(:str, "four")), s(:array, s(:str, "potatoes")))), s(:lasgn, :got, s(:call, nil, :combine_anagrams, s(:lvar, :words))), s(:if, s(:call, s(:lvar, :got), :!=, s(:lvar, :expected)), s(:block, s(:call, nil, :puts, s(:dstr, "FAILED:", s(:evstr, s(:lvar, :got)), s(:str, " should be "), s(:evstr, s(:lvar, :expected)))), s(:return, s(:false))), s(:return, s(:true))))))
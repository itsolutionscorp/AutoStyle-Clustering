s(:block, s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :hash, s(:hash)), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word), s(:block, s(:lasgn, :key, s(:call, s(:call, s(:call, s(:call, s(:lvar, :word), :downcase), :split, s(:str, "")), :sort), :join, s(:str, ""))), s(:op_asgn1, s(:lvar, :hash), s(:arglist, s(:lvar, :key)), :"||", s(:array)), s(:call, s(:call, s(:lvar, :hash), :[], s(:lvar, :key)), :<<, s(:lvar, :word)))), s(:call, s(:lvar, :hash), :values)), s(:lasgn, :expected, s(:call, s(:array, s(:array, s(:str, "cars"), s(:str, "racs"), s(:str, "scar")), s(:array, s(:str, "four")), s(:array, s(:str, "for")), s(:array, s(:str, "potatoes")), s(:array, s(:str, "creams"), s(:str, "scream"))), :sort)), s(:lasgn, :solution, s(:call, s(:call, nil, :combine_anagrams, s(:array, s(:str, "cars"), s(:str, "for"), s(:str, "potatoes"), s(:str, "racs"), s(:str, "four"), s(:str, "scar"), s(:str, "creams"), s(:str, "scream"))), :sort)), s(:or, s(:call, s(:lvar, :solution), :==, s(:lvar, :expected)), s(:call, nil, :raise, s(:call, s(:const, :Exception), :new, s(:dstr, "Expected: ", s(:evstr, s(:call, s(:lvar, :expected), :inspect)), s(:str, " got "), s(:evstr, s(:call, s(:lvar, :solution), :inspect)))))))
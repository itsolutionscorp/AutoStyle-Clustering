s(:block, s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :dict, s(:call, s(:const, :Hash), :new, s(:array))), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word), s(:block, s(:lasgn, :sorted_word, s(:call, s(:call, s(:call, s(:call, s(:lvar, :word), :upcase), :split, s(:str, "")), :sort), :join)), s(:if, s(:call, s(:lvar, :dict), :include?, s(:lvar, :sorted_word)), nil, s(:attrasgn, s(:lvar, :dict), :[]=, s(:lvar, :sorted_word), s(:array))), s(:call, s(:call, s(:lvar, :dict), :[], s(:lvar, :sorted_word)), :<<, s(:lvar, :word)))), s(:return, s(:call, s(:lvar, :dict), :values))), s(:defn, :test_method, s(:args, :method_name, :params, :expected), s(:call, nil, :puts, s(:dstr, "", s(:evstr, s(:lvar, :method_name)), s(:str, "("), s(:evstr, s(:lvar, :params)), s(:str, ")"))), s(:lasgn, :result, s(:call, s(:self), :send, s(:lvar, :method_name), s(:lvar, :params))), s(:lasgn, :ok, s(:call, s(:lvar, :result), :==, s(:lvar, :expected))), s(:call, nil, :puts, s(:call, s(:dstr, " (%s) => ", s(:evstr, s(:lvar, :result))), :%, s(:if, s(:lvar, :ok), s(:str, "OK"), s(:str, "FAIL")))), s(:if, s(:lvar, :ok), nil, s(:call, nil, :puts, s(:dstr, " Expected: ", s(:evstr, s(:lvar, :expected))))), s(:return, s(:lvar, :ok))), s(:if, s(:call, s(:str, "(string)"), :==, s(:gvar, :$0)), s(:block, s(:call, nil, :test_method, s(:lit, :combine_anagrams), s(:array, s(:str, "HeLLo"), s(:str, "hello")), s(:array, s(:array, s(:str, "HeLLo"), s(:str, "hello")))), s(:call, nil, :test_method, s(:lit, :combine_anagrams), s(:array, s(:str, "cars"), s(:str, "for"), s(:str, "potatoes"), s(:str, "racs"), s(:str, "four"), s(:str, "scar"), s(:str, "creams"), s(:str, "scream")), s(:array, s(:array, s(:str, "cars"), s(:str, "racs"), s(:str, "scar")), s(:array, s(:str, "four")), s(:array, s(:str, "for")), s(:array, s(:str, "potatoes")), s(:array, s(:str, "creams"), s(:str, "scream"))))), nil))
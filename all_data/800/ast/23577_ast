s(:block, s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :hash, s(:hash)), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word), s(:block, s(:lasgn, :anagram_id, s(:call, s(:call, s(:call, s(:call, s(:lvar, :word), :downcase), :chars), :sort), :join)), s(:if, s(:call, s(:call, s(:lvar, :hash), :has_key?, s(:lvar, :anagram_id)), :!), s(:attrasgn, s(:lvar, :hash), :[]=, s(:lvar, :anagram_id), s(:array)), nil), s(:call, s(:call, s(:lvar, :hash), :[], s(:lvar, :anagram_id)), :push, s(:lvar, :word)))), s(:return, s(:call, s(:call, s(:lvar, :hash), :each_value), :to_a))), s(:lasgn, :anagrams, s(:array, s(:str, "cars"), s(:str, "for"), s(:str, "potatoes"), s(:str, "racs"), s(:str, "four"), s(:str, "scar"), s(:str, "creams"), s(:str, "scream"))), s(:lasgn, :result, s(:call, nil, :combine_anagrams, s(:lvar, :anagrams))), s(:call, nil, :puts, s(:str, "expected: [[\"cars\", \"racs\", \"scar\"], [\"four\"], [\"for\"], [\"potatoes\"], [\"creams\", \"scream\"]]")), s(:call, nil, :puts, s(:dstr, "actual: ", s(:evstr, s(:lvar, :result)))))
s(:block, s(:call, nil, :require, s(:str, "pp")), s(:call, nil, :puts, s(:str, "hello"), s(:str, " "), s(:str, "world")), s(:defn, :palindrome?, s(:args, :string), s(:lasgn, :clean, s(:call, s(:call, s(:lvar, :string), :downcase), :gsub, s(:lit, /[^a-z]+/), s(:str, ""))), s(:call, s(:lvar, :clean), :==, s(:call, s(:lvar, :clean), :reverse))), s(:call, nil, :puts, s(:call, nil, :palindrome?, s(:str, "A man, a plan, a canal -- Panama"))), s(:call, nil, :puts, s(:call, nil, :palindrome?, s(:str, "Madam, I'm Adam!"))), s(:call, nil, :puts, s(:call, nil, :palindrome?, s(:str, "Abracadabra"))), s(:defn, :checker1, s(:args, :word, :df), s(:if, s(:call, s(:lvar, :df), :[], s(:lvar, :word)), s(:attrasgn, s(:lvar, :df), :[]=, s(:lvar, :word), s(:call, s(:call, s(:lvar, :df), :[], s(:lvar, :word)), :+, s(:lit, 1))), s(:attrasgn, s(:lvar, :df), :[]=, s(:lvar, :word), s(:lit, 1)))), s(:defn, :count_words, s(:args, :string), s(:lasgn, :result, s(:hash)), s(:lasgn, :clean, s(:call, s(:call, s(:call, s(:lvar, :string), :downcase), :gsub, s(:lit, /[^a-z]+/), s(:str, " ")), :split)), s(:lasgn, :clean2, s(:iter, s(:call, s(:lvar, :clean), :each), s(:args, :d), s(:call, nil, :checker1, s(:lvar, :d), s(:lvar, :result)))), s(:return, s(:lvar, :result))), s(:call, nil, :puts, s(:call, nil, :count_words, s(:str, "A man, a plan, a canal -- Panama"))), s(:call, nil, :puts, s(:call, nil, :count_words, s(:str, "Doo bee doo bee doo"))), s(:class, :WrongNumberOfPlayersError, s(:const, :StandardError)), s(:class, :NoSuchStrategyError, s(:const, :StandardError)), s(:defn, :member, s(:args, :item, :group), s(:lasgn, :n, s(:call, s(:lvar, :group), :length)), s(:if, s(:call, s(:call, s(:lvar, :group), :length), :==, s(:lit, 0)), s(:nil), s(:if, s(:call, s(:lvar, :item), :==, s(:call, s(:lvar, :group), :[], s(:lit, 0))), s(:true), s(:call, nil, :member, s(:lvar, :item), s(:call, s(:lvar, :group), :[], s(:lit, 1), s(:lvar, :n)))))), s(:defn, :getstrat, s(:args, :player, :game), s(:return, s(:call, s(:call, s(:lvar, :game), :[], s(:lvar, :player)), :[], s(:lit, 1)))), s(:defn, :getname, s(:args, :player, :game), s(:return, s(:call, s(:call, s(:lvar, :game), :[], s(:lvar, :player)), :[], s(:lit, 0)))), s(:defn, :winner, s(:args, :player, :game), s(:return, s(:array, s(:call, nil, :getname, s(:lvar, :player), s(:lvar, :game)), s(:call, nil, :getstrat, s(:lvar, :player), s(:lvar, :game))))), s(:defn, :rps_game_winner, s(:args, :game), s(:call, nil, :print, s(:str, "Game"), s(:call, s(:lvar, :game), :inspect), s(:str, "\n")), s(:if, s(:call, s(:call, s(:lvar, :game), :length), :==, s(:lit, 2)), nil, s(:call, nil, :raise, s(:const, :WrongNumberOfPlayersError))), s(:if, s(:call, nil, :member, s(:call, nil, :getstrat, s(:lit, 0), s(:lvar, :game)), s(:array, s(:str, "R"), s(:str, "P"), s(:str, "S"))), nil, s(:call, nil, :raise, s(:const, :NoSuchStrategyError))), s(:if, s(:call, nil, :member, s(:call, nil, :getstrat, s(:lit, 1), s(:lvar, :game)), s(:array, s(:str, "R"), s(:str, "P"), s(:str, "S"))), nil, s(:call, nil, :raise, s(:const, :NoSuchStrategyError))), s(:lasgn, :play1, s(:call, nil, :getstrat, s(:lit, 0), s(:lvar, :game))), s(:lasgn, :play2, s(:call, nil, :getstrat, s(:lit, 1), s(:lvar, :game))), s(:if, s(:call, s(:lvar, :play1), :==, s(:lvar, :play2)), s(:call, nil, :winner, s(:lit, 0), s(:lvar, :game)), s(:if, s(:call, s(:lvar, :play1), :==, s(:str, "R")), s(:if, s(:call, s(:lvar, :play2), :==, s(:str, "S")), s(:call, nil, :winner, s(:lit, 0), s(:lvar, :game)), s(:call, nil, :winner, s(:lit, 1), s(:lvar, :game))), s(:if, s(:call, s(:lvar, :play1), :==, s(:str, "P")), s(:if, s(:call, s(:lvar, :play2), :==, s(:str, "R")), s(:call, nil, :winner, s(:lit, 0), s(:lvar, :game)), s(:call, nil, :winner, s(:lit, 1), s(:lvar, :game))), s(:if, s(:call, s(:lvar, :play2), :==, s(:str, "P")), s(:call, nil, :winner, s(:lit, 0), s(:lvar, :game)), s(:call, nil, :winner, s(:lit, 1), s(:lvar, :game))))))), s(:call, nil, :puts, s(:call, s(:call, nil, :rps_game_winner, s(:array, s(:array, s(:str, "Armando"), s(:str, "P")), s(:array, s(:str, "Dave"), s(:str, "S")))), :inspect)), s(:call, nil, :print, s(:str, "Doing tournament\n")), s(:defn, :rps_tournament_winner, s(:args, :tournament), s(:if, s(:call, s(:call, s(:call, s(:call, s(:lvar, :tournament), :[], s(:lit, 0)), :[], s(:lit, 0)), :class), :==, s(:const, :Array)), s(:call, nil, :rps_game_winner, s(:array, s(:call, nil, :rps_tournament_winner, s(:call, s(:lvar, :tournament), :[], s(:lit, 0))), s(:call, nil, :rps_tournament_winner, s(:call, s(:lvar, :tournament), :[], s(:lit, 1))))), s(:call, nil, :rps_game_winner, s(:lvar, :tournament)))), s(:lasgn, :a, s(:array, s(:array, s(:array, s(:array, s(:str, "Armando"), s(:str, "P")), s(:array, s(:str, "Dave"), s(:str, "S"))), s(:array, s(:array, s(:str, "Richard"), s(:str, "R")), s(:array, s(:str, "Michael"), s(:str, "S")))), s(:array, s(:array, s(:array, s(:str, "Allen"), s(:str, "S")), s(:array, s(:str, "Omer"), s(:str, "P"))), s(:array, s(:array, s(:str, "David E."), s(:str, "R")), s(:array, s(:str, "Richard X."), s(:str, "P")))))), s(:call, nil, :puts, s(:call, s(:call, nil, :rps_tournament_winner, s(:lvar, :a)), :inspect)), s(:defn, :helper, s(:args, :thing), s(:lasgn, :clean, s(:call, s(:call, s(:lvar, :thing), :downcase), :split, s(:lit, //))), s(:array, s(:call, s(:lvar, :clean), :sort), s(:lvar, :thing))), s(:defn, :getkey, s(:args, :a), s(:call, s(:lvar, :a), :[], s(:lit, 0))), s(:defn, :getval, s(:args, :a), s(:call, s(:lvar, :a), :[], s(:lit, 1))), s(:defn, :checker, s(:args, :item, :item2), s(:lasgn, :key, s(:call, nil, :getkey, s(:lvar, :item))), s(:if, s(:call, s(:lvar, :key), :==, s(:call, nil, :getkey, s(:lvar, :item2))), s(:true), s(:false))), s(:defn, :scan, s(:args, :scanner, :strs), s(:lasgn, :result, s(:array)), s(:iter, s(:call, s(:lvar, :strs), :each), s(:args, :s), s(:if, s(:call, nil, :checker, s(:lvar, :scanner), s(:lvar, :s)), s(:call, s(:lvar, :result), :push, s(:call, nil, :getval, s(:lvar, :s))), nil)), s(:return, s(:lvar, :result))), s(:defn, :cleaner, s(:args, :scanner, :strs), s(:iter, s(:call, s(:lvar, :strs), :each), s(:args, :s), s(:if, s(:call, nil, :checker, s(:lvar, :scanner), s(:lvar, :s)), s(:call, s(:lvar, :strs), :delete, s(:lvar, :s)), nil)), s(:return, s(:lvar, :strs))), s(:defn, :combine_anagrams, s(:args, :str), s(:iter, s(:call, s(:lvar, :str), :map), s(:args, :d), s(:call, nil, :helper, s(:lvar, :d))), s(:if, s(:call, s(:call, s(:lvar, :str), :length), :==, s(:lit, 0)), s(:array), s(:array, s(:call, nil, :scan, s(:call, s(:lvar, :str), :[], s(:lit, 0)), s(:call, s(:lvar, :str), :[], s(:lit, 1), s(:call, s(:lvar, :str), :length))), s(:call, nil, :combine_anagrams, s(:call, nil, :cleaner, s(:call, s(:lvar, :str), :[], s(:lit, 0)), s(:call, s(:lvar, :str), :[], s(:lit, 1), s(:call, s(:lvar, :str), :length))))))), s(:call, nil, :puts, s(:call, s(:call, nil, :combine_anagrams, s(:array, s(:str, "cars"), s(:str, "for"), s(:str, "potatoes"), s(:str, "racs"), s(:str, "four"), s(:str, "scar"), s(:str, "creams"), s(:str, "scream"))), :inspect)), s(:class, :Dessert, nil, s(:defn, :initialize, s(:args, :name, :calories), s(:iasgn, :@name, s(:lvar, :name)), s(:iasgn, :@calories, s(:lvar, :calories))), s(:defn, :name, s(:args), s(:ivar, :@name)), s(:defn, :calories, s(:args), s(:ivar, :@calories)), s(:defn, :name=, s(:args, :new_name), s(:iasgn, :@name, s(:lvar, :new_name))), s(:defn, :calories=, s(:args, :new_amount), s(:iasgn, :@calories, s(:lvar, :new_amount))), s(:defn, :healthy?, s(:args), s(:if, s(:call, s(:ivar, :@calories), :<, s(:lit, 200)), s(:true), s(:false))), s(:defn, :delicious?, s(:args), s(:true))), s(:class, :JellyBean, s(:const, :Dessert), s(:defn, :initialize, s(:args, :name, :calories, :flavor), s(:iasgn, :@flavor, s(:lvar, :flavor))), s(:defn, :flavor, s(:args), s(:ivar, :@flavor)), s(:defn, :flavor=, s(:args, :new_flavor), s(:iasgn, :@flavor, s(:lvar, :new_flavor))), s(:defn, :delicious?, s(:args), s(:if, s(:call, s(:ivar, :@flavor), :==, s(:str, "black licorice")), s(:false), s(:true)))), s(:class, :Class, nil, s(:defn, :attr_accessor_with_history, s(:args, :attr_name), s(:lasgn, :attr_name, s(:call, s(:lvar, :attr_name), :to_s)), s(:call, nil, :attr_reader, s(:lvar, :attr_name)), s(:call, nil, :attr_reader, s(:call, s(:lvar, :attr_name), :+, s(:str, "_history"))), s(:call, nil, :class_eval, s(:dstr, "\n                  def ", s(:evstr, s(:lvar, :attr_name)), s(:str, "=(val)\n                    if @"), s(:evstr, s(:lvar, :attr_name)), s(:str, "_history == nil\n                      @"), s(:evstr, s(:lvar, :attr_name)), s(:str, "_history = [@"), s(:evstr, s(:lvar, :attr_name)), s(:str, "]\n                    end\n                    @"), s(:evstr, s(:lvar, :attr_name)), s(:str, "_history << val\n                    @"), s(:evstr, s(:lvar, :attr_name)), s(:str, " = val\n                  end\n                  \n                  def "), s(:evstr, s(:lvar, :attr_name)), s(:str, "_history\n                    @"), s(:evstr, s(:lvar, :attr_name)), s(:str, "_history\n                  end\n                  "))))), s(:class, :Foo, nil, s(:call, nil, :attr_accessor_with_history, s(:lit, :bar))), s(:call, nil, :puts, s(:lasgn, :f, s(:call, s(:const, :Foo), :new))), s(:call, nil, :puts, s(:attrasgn, s(:lvar, :f), :bar=, s(:lit, 1))), s(:call, nil, :puts, s(:attrasgn, s(:lvar, :f), :bar=, s(:lit, 2))), s(:call, nil, :puts, s(:lasgn, :f, s(:call, s(:const, :Foo), :new))), s(:call, nil, :puts, s(:attrasgn, s(:lvar, :f), :bar=, s(:lit, 4))), s(:call, nil, :puts, s(:call, s(:lvar, :f), :bar_history)), s(:class, :Numeric, nil, s(:cvdecl, :@@currencies, s(:hash, s(:str, "dollar"), s(:lit, 1), s(:str, "yen"), s(:lit, 0.013), s(:str, "euro"), s(:lit, 1.292), s(:str, "rupee"), s(:lit, 0.019))), s(:defn, :in, s(:args, :obj), s(:lasgn, :rate, s(:call, s(:cvar, :@@currencies), :[], s(:call, s(:call, s(:lvar, :obj), :to_s), :gsub, s(:lit, /s$/), s(:str, "")))), s(:call, s(:self), :/, s(:lvar, :rate))), s(:defn, :method_missing, s(:args, :method_id), s(:lasgn, :singular_currency, s(:call, s(:call, s(:lvar, :method_id), :to_s), :gsub, s(:lit, /s$/), s(:str, ""))), s(:if, s(:call, s(:cvar, :@@currencies), :has_key?, s(:lvar, :singular_currency)), s(:call, s(:self), :*, s(:call, s(:cvar, :@@currencies), :[], s(:lvar, :singular_currency))), s(:zsuper)))), s(:call, s(:call, s(:lit, 5), :dollars), :in, s(:lit, :euros)), s(:call, s(:call, s(:lit, 10), :euros), :in, s(:lit, :rupees)), s(:class, :String, nil, s(:defn, :palindrome?, s(:args), s(:lasgn, :clean, s(:call, s(:call, s(:self), :downcase), :gsub, s(:lit, /[^a-z]+/), s(:str, ""))), s(:call, s(:lvar, :clean), :==, s(:call, s(:lvar, :clean), :reverse)))), s(:module, :Enumerable, s(:defn, :palindrome?, s(:args), s(:call, s(:self), :==, s(:call, s(:self), :reverse)))), s(:class, :CartesianProduct, nil, s(:call, nil, :include, s(:const, :Enumerable)), s(:defn, :initialize, s(:args, :a, :b), s(:iasgn, :@a, s(:lvar, :a)), s(:iasgn, :@b, s(:lvar, :b))), s(:defn, :each, s(:args), s(:iter, s(:call, s(:ivar, :@a), :each), s(:args, :x), s(:iter, s(:call, s(:ivar, :@b), :each), s(:args, :y), s(:yield, s(:array, s(:lvar, :x), s(:lvar, :y))))))), s(:lasgn, :c, s(:call, s(:const, :CartesianProduct), :new, s(:array, s(:lit, :a), s(:lit, :b)), s(:array, s(:lit, 4), s(:lit, 5)))), s(:iter, s(:call, s(:lvar, :c), :each), s(:args, :elt), s(:call, nil, :puts, s(:call, s(:lvar, :elt), :inspect))), s(:lasgn, :c, s(:call, s(:const, :CartesianProduct), :new, s(:array, s(:lit, :a), s(:lit, :b)), s(:array))), s(:iter, s(:call, s(:lvar, :c), :each), s(:args, :elt), s(:call, nil, :puts, s(:call, s(:lvar, :elt), :inspect))))
s(:block, s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :output, s(:array)), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :w), s(:block, s(:lasgn, :normalized, s(:call, s(:call, s(:call, s(:call, s(:lvar, :w), :downcase), :split, s(:lit, //)), :sort), :join)), s(:lasgn, :is_new, s(:true)), s(:iter, s(:call, s(:lvar, :output), :each), s(:args, :group), s(:if, s(:call, s(:lvar, :normalized), :==, s(:call, s(:call, s(:call, s(:call, s(:lvar, :group), :[], s(:lit, 0)), :split, s(:lit, //)), :sort), :join)), s(:block, s(:lasgn, :is_new, s(:false)), s(:call, s(:lvar, :group), :<<, s(:lvar, :w)), s(:call, s(:lvar, :group), :sort!), s(:break)), nil)), s(:if, s(:lvar, :is_new), s(:call, s(:lvar, :output), :<<, s(:array, s(:lvar, :w))), nil))), s(:lvar, :output)), s(:lasgn, :i, s(:array, s(:str, "cars"), s(:str, "CaRS"), s(:str, "for"), s(:str, "potatoes"), s(:str, "racs"), s(:str, "four"), s(:str, "scar"), s(:str, "creams"), s(:str, "scream"))), s(:call, nil, :puts, s(:call, s(:call, nil, :combine_anagrams, s(:lvar, :i)), :inspect)))
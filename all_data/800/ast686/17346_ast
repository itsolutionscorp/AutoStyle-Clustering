s(:block, s(:defn, :palindrome?, s(:args, :string), s(:lasgn, :strippedString, s(:call, s(:call, s(:lvar, :string), :downcase), :gsub, s(:lit, /\W/), s(:str, ""))), s(:lasgn, :reversedString, s(:call, s(:lvar, :strippedString), :reverse)), s(:return, s(:call, s(:lvar, :reversedString), :==, s(:lvar, :strippedString)))), s(:defn, :count_words, s(:args, :string), s(:lasgn, :strippedString, s(:call, s(:call, s(:call, s(:call, s(:lvar, :string), :downcase), :gsub, s(:lit, /\W/), s(:str, " ")), :gsub, s(:lit, /\s+/), s(:str, " ")), :strip)), s(:lasgn, :counts, s(:call, s(:const, :Hash), :new, s(:lit, 0))), s(:iter, s(:call, s(:call, s(:lvar, :strippedString), :split, s(:lit, /\b/)), :each), s(:args, :word), s(:if, s(:call, s(:call, s(:lvar, :word), :==, s(:str, " ")), :!), s(:if, s(:call, s(:lvar, :counts), :has_key?, s(:lvar, :word)), s(:op_asgn1, s(:lvar, :counts), s(:arglist, s(:lvar, :word)), :+, s(:lit, 1)), s(:attrasgn, s(:lvar, :counts), :[]=, s(:lvar, :word), s(:lit, 1))), nil)), s(:lvar, :counts)), s(:defn, :rps_game_winner, s(:args, :games), s(:lasgn, :winner, s(:array)), s(:if, s(:call, s(:call, s(:lvar, :games), :length), :==, s(:lit, 2)), nil, s(:call, nil, :raise, s(:const, :WrongNumberOfPlayersError))), s(:if, s(:call, s(:call, s(:call, s(:lvar, :games), :[], s(:lit, 0)), :length), :==, s(:lit, 2)), nil, s(:call, nil, :rasie, s(:const, :WrongNumberOfInputsError))), s(:if, s(:call, s(:call, s(:call, s(:lvar, :games), :[], s(:lit, 1)), :length), :==, s(:lit, 2)), nil, s(:call, nil, :rasie, s(:const, :WrongNumberOfInputsError))), s(:iter, s(:call, s(:lvar, :games), :each), s(:args, :game), s(:block, s(:if, s(:call, s(:or, s(:call, s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 1)), :downcase), :==, s(:str, "r")), s(:or, s(:call, s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 1)), :downcase), :==, s(:str, "s")), s(:call, s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 1)), :downcase), :==, s(:str, "p")))), :!), s(:call, nil, :raise, s(:const, :NoSuchStrategyError)), nil), s(:if, s(:and, s(:call, s(:call, s(:call, s(:call, s(:lvar, :games), :[], s(:lit, 0)), :[], s(:lit, 1)), :downcase), :==, s(:str, "r")), s(:call, s(:call, s(:call, s(:call, s(:lvar, :games), :[], s(:lit, 1)), :[], s(:lit, 1)), :downcase), :==, s(:str, "s"))), s(:lasgn, :winner, s(:call, s(:lvar, :games), :[], s(:lit, 0))), s(:if, s(:and, s(:call, s(:call, s(:call, s(:call, s(:lvar, :games), :[], s(:lit, 0)), :[], s(:lit, 1)), :downcase), :==, s(:str, "s")), s(:call, s(:call, s(:call, s(:call, s(:lvar, :games), :[], s(:lit, 1)), :[], s(:lit, 1)), :downcase), :==, s(:str, "p"))), s(:lasgn, :winner, s(:call, s(:lvar, :games), :[], s(:lit, 0))), s(:if, s(:and, s(:call, s(:call, s(:call, s(:call, s(:lvar, :games), :[], s(:lit, 0)), :[], s(:lit, 1)), :downcase), :==, s(:str, "p")), s(:call, s(:call, s(:call, s(:call, s(:lvar, :games), :[], s(:lit, 1)), :[], s(:lit, 1)), :downcase), :==, s(:str, "r"))), s(:lasgn, :winner, s(:call, s(:lvar, :games), :[], s(:lit, 0))), s(:if, s(:call, s(:call, s(:call, s(:lvar, :games), :[], s(:lit, 0)), :[], s(:lit, 1)), :==, s(:call, s(:call, s(:lvar, :games), :[], s(:lit, 1)), :[], s(:lit, 1))), s(:lasgn, :winner, s(:call, s(:lvar, :games), :[], s(:lit, 0))), s(:lasgn, :winner, s(:call, s(:lvar, :games), :[], s(:lit, 1))))))))), s(:lvar, :winner)), s(:defn, :contains_game, s(:args, :game), s(:return, s(:call, s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 0)), :[], s(:lit, 0)), :is_a?, s(:const, :String)))), s(:defn, :rps_tournament_winner, s(:args, :games), s(:if, s(:call, nil, :contains_game, s(:lvar, :games)), s(:return, s(:call, nil, :rps_game_winner, s(:lvar, :games))), nil), s(:call, nil, :rps_game_winner, s(:array, s(:call, nil, :rps_tournament_winner, s(:call, s(:lvar, :games), :[], s(:lit, 0))), s(:call, nil, :rps_tournament_winner, s(:call, s(:lvar, :games), :[], s(:lit, 1)))))), s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :anagrams, s(:call, s(:const, :Hash), :new)), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word), s(:block, s(:if, s(:call, s(:call, s(:lvar, :word), :length), :==, s(:lit, 1)), s(:lasgn, :key, s(:call, s(:lvar, :word), :downcase)), s(:if, s(:lasgn, :key, s(:call, s(:call, s(:call, s(:call, s(:lvar, :word), :downcase), :chars), :sort), :join)), nil, nil)), s(:if, s(:call, s(:lvar, :anagrams), :has_key?, s(:lvar, :key)), s(:call, s(:call, s(:lvar, :anagrams), :[], s(:lvar, :key)), :push, s(:lvar, :word)), s(:attrasgn, s(:lvar, :anagrams), :[]=, s(:lvar, :key), s(:array, s(:lvar, :word)))))), s(:call, s(:lvar, :anagrams), :values)), s(:class, :WrongNumberOfPlayersError, s(:const, :StandardError)), s(:class, :WrongNumberOfInputsError, s(:const, :StandardError)), s(:class, :NoSuchStrategyError, s(:const, :StandardError)), s(:call, nil, :p, s(:call, nil, :palindrome?, s(:str, "A man, a plan, a canal -- Panama"))), s(:call, nil, :p, s(:call, nil, :palindrome?, s(:str, "Madam, I'm Adam!"))), s(:call, nil, :p, s(:call, nil, :palindrome?, s(:str, "Abracadabra"))), s(:call, nil, :p, s(:call, nil, :count_words, s(:str, "Doo bee doo bee doo"))), s(:call, nil, :p, s(:call, nil, :count_words, s(:str, "what the what the what"))), s(:call, nil, :p, s(:call, nil, :rps_game_winner, s(:array, s(:array, s(:str, "vijay"), s(:str, "S")), s(:array, s(:str, "akhila"), s(:str, "P"))))), s(:call, nil, :p, s(:call, nil, :rps_tournament_winner, s(:array, s(:array, s(:array, s(:array, s(:array, s(:str, "Armando"), s(:str, "P")), s(:array, s(:str, "Dave"), s(:str, "S"))), s(:array, s(:array, s(:str, "XYZ"), s(:str, "R")), s(:array, s(:str, "Michael"), s(:str, "S")))), s(:array, s(:array, s(:array, s(:str, "Allen"), s(:str, "S")), s(:array, s(:str, "Omer"), s(:str, "P"))), s(:array, s(:array, s(:str, "David E."), s(:str, "R")), s(:array, s(:str, "Richard X."), s(:str, "P")))), s(:array, s(:array, s(:array, s(:str, "Vijay"), s(:str, "P")), s(:array, s(:str, "Akkineni"), s(:str, "S"))), s(:array, s(:array, s(:str, "Lokesh"), s(:str, "R")), s(:array, s(:str, "Akkineni"), s(:str, "S")))), s(:array, s(:array, s(:array, s(:str, "Akhila"), s(:str, "S")), s(:array, s(:str, "Kambhampati"), s(:str, "P"))), s(:array, s(:array, s(:str, "Spandana"), s(:str, "R")), s(:array, s(:str, "Bondalapati"), s(:str, "P")))), s(:array, s(:array, s(:array, s(:str, "Armando"), s(:str, "P")), s(:array, s(:str, "Dave"), s(:str, "S"))), s(:array, s(:array, s(:str, "Richard"), s(:str, "R")), s(:array, s(:str, "Michael"), s(:str, "S")))), s(:array, s(:array, s(:array, s(:str, "Allen"), s(:str, "S")), s(:array, s(:str, "Omer"), s(:str, "P"))), s(:array, s(:array, s(:str, "David E."), s(:str, "R")), s(:array, s(:str, "Richard X."), s(:str, "P")))), s(:array, s(:array, s(:array, s(:str, "Vijay"), s(:str, "P")), s(:array, s(:str, "Akkineni"), s(:str, "S"))), s(:array, s(:array, s(:str, "Lokesh"), s(:str, "R")), s(:array, s(:str, "Akkineni"), s(:str, "S")))), s(:array, s(:array, s(:array, s(:str, "Akhila"), s(:str, "S")), s(:array, s(:str, "Kambhampati"), s(:str, "P"))), s(:array, s(:array, s(:str, "Spandana"), s(:str, "R")), s(:array, s(:str, "Bondalapati"), s(:str, "P"))))), s(:array, s(:array, s(:array, s(:array, s(:str, "Armando"), s(:str, "P")), s(:array, s(:str, "Dave"), s(:str, "S"))), s(:array, s(:array, s(:str, "XYZ"), s(:str, "R")), s(:array, s(:str, "Michael"), s(:str, "S")))), s(:array, s(:array, s(:array, s(:str, "Allen"), s(:str, "S")), s(:array, s(:str, "Omer"), s(:str, "P"))), s(:array, s(:array, s(:str, "David E."), s(:str, "R")), s(:array, s(:str, "Richard X."), s(:str, "P")))), s(:array, s(:array, s(:array, s(:str, "Vijay"), s(:str, "P")), s(:array, s(:str, "Akkineni"), s(:str, "S"))), s(:array, s(:array, s(:str, "Lokesh"), s(:str, "R")), s(:array, s(:str, "Akkineni"), s(:str, "S")))), s(:array, s(:array, s(:array, s(:str, "Akhila"), s(:str, "S")), s(:array, s(:str, "Kambhampati"), s(:str, "P"))), s(:array, s(:array, s(:str, "Spandana"), s(:str, "R")), s(:array, s(:str, "Bondalapati"), s(:str, "P")))), s(:array, s(:array, s(:array, s(:str, "Armando"), s(:str, "P")), s(:array, s(:str, "Dave"), s(:str, "S"))), s(:array, s(:array, s(:str, "Richard"), s(:str, "R")), s(:array, s(:str, "Michael"), s(:str, "S")))), s(:array, s(:array, s(:array, s(:str, "Allen"), s(:str, "S")), s(:array, s(:str, "Omer"), s(:str, "P"))), s(:array, s(:array, s(:str, "David E."), s(:str, "R")), s(:array, s(:str, "Richard X."), s(:str, "P")))), s(:array, s(:array, s(:array, s(:str, "Vijay"), s(:str, "P")), s(:array, s(:str, "Akkineni"), s(:str, "S"))), s(:array, s(:array, s(:str, "Lokesh"), s(:str, "R")), s(:array, s(:str, "Akkineni"), s(:str, "S")))), s(:array, s(:array, s(:array, s(:str, "Akhila"), s(:str, "S")), s(:array, s(:str, "Kambhampati"), s(:str, "P"))), s(:array, s(:array, s(:str, "Spandana"), s(:str, "R")), s(:array, s(:str, "Bondalapati"), s(:str, "P")))))))), s(:call, nil, :p, s(:call, nil, :combine_anagrams, s(:array, s(:str, "cars"), s(:str, "for"), s(:str, "potatoes"), s(:str, "racs"), s(:str, "four"), s(:str, "scar"), s(:str, "creams"), s(:str, "scream")))), s(:call, nil, :p, s(:call, nil, :combine_anagrams, s(:array, s(:str, "A"), s(:str, "a")))))
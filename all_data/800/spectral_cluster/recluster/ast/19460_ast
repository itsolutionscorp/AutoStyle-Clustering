s(:block, s(:defn, :combine, s(:args, :first, :words), s(:lasgn, :b, s(:call, s(:call, s(:call, s(:call, s(:lvar, :first), :downcase), :chars), :sort), :join)), s(:lasgn, :result, s(:array, s(:lvar, :first))), s(:lasgn, :cresult, s(:array)), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word), s(:if, s(:call, s(:call, s(:call, s(:call, s(:call, s(:lvar, :word), :downcase), :chars), :sort), :join), :==, s(:lvar, :b)), s(:lasgn, :result, s(:call, s(:lvar, :result), :+, s(:array, s(:lvar, :word)))), s(:lasgn, :cresult, s(:call, s(:lvar, :cresult), :+, s(:array, s(:lvar, :word)))))), s(:array, s(:array, s(:lvar, :result)), s(:lvar, :cresult))), s(:defn, :combine_anagrams, s(:args, :words), s(:if, s(:call, s(:call, s(:lvar, :words), :length), :==, s(:lit, 0)), s(:array), s(:if, s(:call, s(:call, s(:lvar, :words), :length), :==, s(:lit, 1)), s(:array, s(:lvar, :words)), s(:if, s(:call, s(:call, s(:lvar, :words), :length), :==, s(:lit, 2)), s(:lasgn, :c, s(:call, s(:call, nil, :combine, s(:call, s(:lvar, :words), :[], s(:lit, 0)), s(:array, s(:call, s(:lvar, :words), :[], s(:lit, 1)))), :[], s(:lit, 0))), s(:block, s(:lasgn, :result, s(:call, nil, :combine, s(:call, s(:lvar, :words), :[], s(:lit, 0)), s(:call, s(:lvar, :words), :[], s(:lit, 1..-1)))), s(:call, s(:call, s(:lvar, :result), :[], s(:lit, 0)), :+, s(:call, nil, :combine_anagrams, s(:call, s(:lvar, :result), :[], s(:lit, 1))))))))))
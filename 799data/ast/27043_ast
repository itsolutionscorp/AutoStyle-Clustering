s(:block, s(:defn, :palindrome?, s(:args, :string), s(:lasgn, :y, s(:call, s(:call, s(:lvar, :string), :downcase), :gsub, s(:lit, /\W/), s(:str, ""))), s(:call, s(:lvar, :y), :==, s(:call, s(:lvar, :y), :reverse))), s(:defn, :count_words, s(:args, :string), s(:lasgn, :y, s(:call, s(:call, s(:lvar, :string), :downcase), :scan, s(:lit, /\w+\b/))), s(:iter, s(:call, s(:lvar, :y), :reduce, s(:call, s(:const, :Hash), :new, s(:lit, 0))), s(:args, :h, :x), s(:block, s(:op_asgn1, s(:lvar, :h), s(:arglist, s(:lvar, :x)), :+, s(:lit, 1)), s(:lvar, :h)))), s(:class, :WrongNumberOfPlayersError, s(:const, :StandardError)), s(:class, :NoSuchStrategyError, s(:const, :StandardError)), s(:defn, :rps_game_winner, s(:args, :game), s(:if, s(:call, s(:lit, 2), :==, s(:call, s(:lvar, :game), :length)), nil, s(:call, nil, :raise, s(:const, :WrongNumberOfPlayersError))), s(:lasgn, :plays, s(:str, "RPS")), s(:lasgn, :r, s(:array, s(:array, s(:lit, 0), s(:lit, 1), s(:lit, 0)), s(:array, s(:lit, 0), s(:lit, 0), s(:lit, 1)), s(:array, s(:lit, 1), s(:lit, 0), s(:lit, 0)))), s(:lasgn, :i, s(:iter, s(:call, s(:lvar, :game), :collect), s(:args, :hand), s(:block, s(:if, s(:call, s(:lit, 0), :==, s(:match3, s(:dregx, "[", s(:evstr, s(:lvar, :plays)), s(:str, "]\\b"), 1), s(:call, s(:lvar, :hand), :[], s(:lit, 1)))), nil, s(:call, nil, :raise, s(:const, :NoSuchStrategyError))), s(:call, s(:lvar, :plays), :index, s(:call, s(:call, s(:lvar, :hand), :[], s(:lit, 1)), :upcase))))), s(:call, s(:lvar, :game), :[], s(:call, s(:call, s(:lvar, :r), :[], s(:call, s(:lvar, :i), :[], s(:lit, 0))), :[], s(:call, s(:lvar, :i), :[], s(:lit, 1))))), s(:defn, :rps_tournament_winner, s(:args, :tournament), s(:if, s(:call, s(:const, :Array), :==, s(:call, s(:call, s(:call, s(:lvar, :tournament), :[], s(:lit, 0)), :[], s(:lit, 1)), :class)), s(:block, s(:lasgn, :winners, s(:iter, s(:call, s(:lvar, :tournament), :collect), s(:args, :pairoff), s(:call, nil, :rps_tournament_winner, s(:lvar, :pairoff)))), s(:call, nil, :rps_tournament_winner, s(:lvar, :winners))), s(:call, nil, :rps_game_winner, s(:lvar, :tournament)))), s(:defn, :combine_anagrams, s(:args, :words), s(:call, s(:iter, s(:call, s(:lvar, :words), :reduce, s(:call, s(:const, :Hash), :new, s(:array))), s(:args, :anagrams, :aword), s(:block, s(:lasgn, :group, s(:call, s(:call, s(:call, s(:call, s(:lvar, :aword), :downcase), :chars), :sort), :join)), s(:attrasgn, s(:lvar, :anagrams), :[]=, s(:lvar, :group), s(:array, s(:splat, s(:call, s(:lvar, :anagrams), :[], s(:lvar, :group))), s(:lvar, :aword))), s(:lvar, :anagrams))), :values)), s(:class, :Dessert, nil, s(:defn, :initialize, s(:args, :name, s(:lasgn, :calories, s(:lit, 0))), s(:iasgn, :@calories, s(:lvar, :calories)), s(:iasgn, :@name, s(:lvar, :name))), s(:call, nil, :attr_accessor, s(:lit, :name)), s(:call, nil, :attr_accessor, s(:lit, :calories)), s(:defn, :healthy?, s(:args), s(:call, s(:call, nil, :calories), :<, s(:lit, 200))), s(:defn, :delicious?, s(:args), s(:true))), s(:class, :JellyBean, s(:const, :Dessert), s(:defn, :initialize, s(:args, :name, s(:lasgn, :calories, s(:lit, 0)), s(:lasgn, :flavor, s(:str, "black licorice"))), s(:iasgn, :@flavor, s(:lvar, :flavor)), s(:iasgn, :@calories, s(:lvar, :calories)), s(:iasgn, :@name, s(:lvar, :name))), s(:call, nil, :attr_accessor, s(:lit, :flavor)), s(:defn, :delicious?, s(:args), s(:if, s(:call, s(:ivar, :@flavor), :==, s(:str, "black licorice")), s(:false), s(:zsuper)))), s(:class, :Class, nil, s(:defn, :attr_accessor_with_history, s(:args, :attr_name), s(:lasgn, :name, s(:call, s(:lvar, :attr_name), :to_s)), s(:lasgn, :hist, s(:call, s(:lvar, :name), :+, s(:str, "_history"))), s(:call, nil, :attr_reader, s(:lvar, :name)), s(:call, nil, :attr_reader, s(:lvar, :hist)), s(:call, nil, :class_eval, s(:dstr, "\n         def ", s(:evstr, s(:lvar, :name)), s(:str, "=(value) \n            @"), s(:evstr, s(:lvar, :name)), s(:str, " = value\n            if defined? @"), s(:evstr, s(:lvar, :hist)), s(:str, "\n               @"), s(:evstr, s(:lvar, :hist)), s(:str, " = [*@"), s(:evstr, s(:lvar, :hist)), s(:str, ", value] \n            else\n               @"), s(:evstr, s(:lvar, :hist)), s(:str, " = [nil, value] \n            end\n         end\n      "))))), s(:class, :Numeric, nil, s(:cvdecl, :@@currencies, s(:hash, s(:str, "dollar"), s(:lit, 1.0), s(:str, "yen"), s(:lit, 0.013), s(:str, "euro"), s(:lit, 1.292), s(:str, "rupee"), s(:lit, 0.019))), s(:defn, :in, s(:args, :currsymb), s(:lasgn, :singular_currency, s(:call, s(:call, s(:lvar, :currsymb), :to_s), :gsub, s(:lit, /s$/), s(:str, ""))), s(:if, s(:call, s(:cvar, :@@currencies), :has_key?, s(:lvar, :singular_currency)), s(:call, s(:self), :/, s(:call, s(:cvar, :@@currencies), :[], s(:lvar, :singular_currency))), nil)), s(:defn, :method_missing, s(:args, :method_id), s(:lasgn, :singular_currency, s(:call, s(:call, s(:lvar, :method_id), :to_s), :gsub, s(:lit, /s$/), s(:str, ""))), s(:if, s(:call, s(:cvar, :@@currencies), :has_key?, s(:lvar, :singular_currency)), s(:call, s(:self), :*, s(:call, s(:cvar, :@@currencies), :[], s(:lvar, :singular_currency))), s(:zsuper)))), s(:class, :String, nil, s(:defn, :palindrome?, s(:args), s(:lasgn, :a, s(:call, s(:call, s(:self), :downcase), :gsub, s(:lit, /\W/), s(:str, ""))), s(:call, s(:lvar, :a), :==, s(:call, s(:lvar, :a), :reverse)))), s(:module, :Enumerable, s(:defn, :palindrome?, s(:args), s(:if, s(:call, s(:call, s(:self), :class), :==, s(:const, :Hash)), s(:lasgn, :a, s(:call, s(:self), :values)), s(:lasgn, :a, s(:iter, s(:call, s(:self), :collect), s(:args, :x), s(:lvar, :x)))), s(:call, s(:lvar, :a), :==, s(:call, s(:lvar, :a), :reverse)))), s(:class, :CartesianProduct, nil, s(:call, nil, :include, s(:const, :Enumerable)), s(:defn, :initialize, s(:args, :x, :y), s(:iasgn, :@x, s(:lvar, :x)), s(:iasgn, :@y, s(:lvar, :y))), s(:defn, :each, s(:args), s(:iter, s(:call, s(:ivar, :@x), :each), s(:args, :a), s(:iter, s(:call, s(:ivar, :@y), :each), s(:args, :b), s(:yield, s(:array, s(:lvar, :a), s(:lvar, :b))))))))
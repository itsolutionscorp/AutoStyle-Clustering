s(:defn, :compute, s(:args, :value1, :value2), s(:lasgn, :value1, s(:call, s(:lvar, :value1), :split, s(:str, ""))), s(:lasgn, :value2, s(:call, s(:lvar, :value2), :split, s(:str, ""))), s(:lasgn, :val1_count, s(:call, s(:lvar, :value1), :count)), s(:lasgn, :val2_count, s(:call, s(:lvar, :value2), :count)), s(:if, s(:call, s(:lvar, :val1_count), :!=, s(:lvar, :val2_count)), s(:if, s(:call, s(:lvar, :val1_count), :>, s(:lvar, :val2_count)), s(:iter, s(:call, s(:call, s(:lvar, :val1_count), :-, s(:lvar, :val2_count)), :times), s(:args), s(:call, s(:lvar, :value1), :pop)), s(:if, s(:call, s(:lvar, :val2_count), :>, s(:lvar, :val1_count)), s(:iter, s(:call, s(:call, s(:lvar, :val2_count), :-, s(:lvar, :val1_count)), :times), s(:args), s(:call, s(:lvar, :value2), :pop)), nil)), nil), s(:lasgn, :count, s(:lit, 0)), s(:iter, s(:call, s(:lvar, :value1), :each_with_index), s(:args, :value, :index), s(:if, s(:call, s(:call, s(:lvar, :value1), :[], s(:lvar, :index)), :==, s(:call, s(:lvar, :value2), :[], s(:lvar, :index))), nil, s(:lasgn, :count, s(:call, s(:lvar, :count), :+, s(:lit, 1))))), s(:return, s(:lvar, :count)))
s(:class, :Hamming, nil, s(:defn, :compute, s(:args, :first_strand, :second_strand), s(:lasgn, :fs, s(:call, s(:lvar, :first_strand), :split, s(:lit, //))), s(:lasgn, :ss, s(:call, s(:lvar, :second_strand), :split, s(:lit, //))), s(:lasgn, :fs_size, s(:call, s(:lvar, :fs), :count)), s(:lasgn, :ss_size, s(:call, s(:lvar, :ss), :count)), s(:lasgn, :ary_fs, s(:call, s(:lvar, :fs), :[], s(:dot2, s(:lit, 0), s(:call, s(:lvar, :ss_size), :-, s(:lit, 1))))), s(:if, s(:call, s(:lvar, :fs_size), :<=, s(:lvar, :ss_size)), s(:block, s(:lasgn, :counter, s(:iter, s(:call, s(:call, s(:lvar, :fs), :zip, s(:lvar, :ss)), :map), s(:args, :fs, :ss), s(:call, s(:lvar, :fs), :==, s(:lvar, :ss)))), s(:call, s(:lvar, :counter), :count, s(:false))), s(:block, s(:lasgn, :counter, s(:iter, s(:call, s(:call, s(:lvar, :ary_fs), :zip, s(:lvar, :ss)), :map), s(:args, :fs, :ss), s(:call, s(:lvar, :fs), :==, s(:lvar, :ss)))), s(:call, s(:lvar, :counter), :count, s(:false))))))
s(:block, s(:call, nil, :require, s(:str, "pp")), s(:module, :Hamming, s(:sclass, s(:self), s(:defn, :compute, s(:args, :a, :b), s(:if, s(:call, s(:lvar, :a), :==, s(:lvar, :b)), s(:return, s(:lit, 0)), nil), s(:masgn, s(:array, s(:lasgn, :a_chars), s(:lasgn, :b_chars)), s(:array, s(:call, s(:lvar, :a), :chars), s(:call, s(:lvar, :b), :chars))), s(:if, s(:call, s(:call, s(:lvar, :a_chars), :count), :>, s(:call, s(:lvar, :b_chars), :count)), s(:lasgn, :a_chars, s(:call, s(:lvar, :a_chars), :first, s(:call, s(:lvar, :b_chars), :count))), s(:if, s(:call, s(:call, s(:lvar, :a_chars), :count), :<, s(:call, s(:lvar, :b_chars), :count)), s(:lasgn, :b_chars, s(:call, s(:lvar, :b_chars), :first, s(:call, s(:lvar, :a_chars), :count))), nil)), s(:lasgn, :evaluation, s(:iter, s(:call, s(:call, s(:lvar, :a_chars), :map), :with_index), s(:args, :c, :i), s(:if, s(:call, s(:lvar, :c), :==, s(:call, s(:lvar, :b_chars), :[], s(:lvar, :i))), s(:lit, 0), s(:lit, 1)))), s(:call, s(:lvar, :evaluation), :inject, s(:block_pass, s(:lit, :+)))))))
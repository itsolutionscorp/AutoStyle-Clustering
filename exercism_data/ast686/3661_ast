s(:block, s(:call, nil, :require_relative, s(:str, "testing_library")), s(:defn, :hamming, s(:args, :strand_1, :strand_2), s(:lasgn, :split1, s(:call, s(:lvar, :strand_1), :split, s(:lit, //))), s(:lasgn, :split2, s(:call, s(:lvar, :strand_2), :split, s(:lit, //))), s(:if, s(:call, s(:call, s(:lvar, :split1), :length), :>, s(:call, s(:lvar, :split2), :length)), s(:call, s(:lvar, :split1), :pop), s(:if, s(:call, s(:call, s(:lvar, :split2), :length), :>, s(:call, s(:lvar, :split1), :length)), s(:call, s(:lvar, :split2), :pop), nil)), s(:lasgn, :differences, s(:call, s(:lvar, :split1), :-, s(:lvar, :split2))), s(:call, s(:lvar, :differences), :length)), s(:call, nil, :check, s(:str, "Hamming distance between identical strands"), s(:call, s(:call, nil, :hamming, s(:str, "A"), s(:str, "A")), :==, s(:lit, 0))), s(:call, nil, :check, s(:str, "Hamming distance for single nucleotide strand"), s(:call, s(:call, nil, :hamming, s(:str, "A"), s(:str, "G")), :==, s(:lit, 1))), s(:call, nil, :check, s(:str, "Hamming distance between small strands"), s(:call, s(:call, nil, :hamming, s(:str, "AG"), s(:str, "CT")), :==, s(:lit, 2))), s(:call, nil, :check, s(:str, "Hamming distance between two other small strands"), s(:call, s(:call, nil, :hamming, s(:str, "AT"), s(:str, "CT")), :==, s(:lit, 1))), s(:call, nil, :check, s(:str, "Hamming distance in longer strands"), s(:call, s(:call, nil, :hamming, s(:str, "GGACG"), s(:str, "GGTCG")), :==, s(:lit, 1))), s(:call, nil, :check, s(:str, "Ignoring extra length in the first strand when it's longer"), s(:call, s(:call, nil, :hamming, s(:str, "AAAG"), s(:str, "AAA")), :==, s(:lit, 0))), s(:call, nil, :check, s(:str, "Ignoring extra length in the second strand when it's longer"), s(:call, s(:call, nil, :hamming, s(:str, "AAA"), s(:str, "AAAG")), :==, s(:lit, 0))))
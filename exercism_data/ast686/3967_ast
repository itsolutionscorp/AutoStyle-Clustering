s(:class, :Hamming, nil, s(:defn, :compute, s(:args, :strand1, :strand2), s(:if, s(:call, s(:lvar, :strand1), :==, s(:lvar, :strand2)), s(:return, s(:lit, 0)), s(:block, s(:lasgn, :s1, s(:call, s(:lvar, :strand1), :split, s(:lit, /\s*/))), s(:lasgn, :s2, s(:call, s(:lvar, :strand2), :split, s(:lit, /\s*/))), s(:lasgn, :hammingCount, s(:lit, 0)), s(:if, s(:call, s(:call, s(:lvar, :s1), :count), :>, s(:call, s(:lvar, :s2), :count)), s(:block, s(:lasgn, :zippedStrands, s(:call, s(:lvar, :s2), :zip, s(:lvar, :s1))), s(:iter, s(:call, s(:lvar, :zippedStrands), :each), s(:args, :x, :y), s(:if, s(:call, s(:lvar, :x), :==, s(:lvar, :y)), nil, s(:lasgn, :hammingCount, s(:call, s(:lvar, :hammingCount), :+, s(:lit, 1))))), s(:return, s(:lvar, :hammingCount))), s(:block, s(:lasgn, :zippedStrands, s(:call, s(:lvar, :s1), :zip, s(:lvar, :s2))), s(:iter, s(:call, s(:lvar, :zippedStrands), :each), s(:args, :x, :y), s(:if, s(:call, s(:lvar, :x), :==, s(:lvar, :y)), nil, s(:lasgn, :hammingCount, s(:call, s(:lvar, :hammingCount), :+, s(:lit, 1))))), s(:return, s(:lvar, :hammingCount))))))))
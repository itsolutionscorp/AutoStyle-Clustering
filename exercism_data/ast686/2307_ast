s(:block, s(:class, :HammingCompare, nil, s(:defn, :compute, s(:args, :a, :b), s(:if, s(:call, s(:lvar, :a), :===, s(:lvar, :b)), s(:return, s(:lit, 0)), nil), s(:lasgn, :length, s(:if, s(:call, s(:call, s(:lvar, :a), :length), :<, s(:call, s(:lvar, :b), :length)), s(:call, s(:lvar, :a), :length), s(:call, s(:lvar, :b), :length))), s(:lasgn, :difference, s(:lit, 0)), s(:for, s(:dot2, s(:lit, 0), s(:call, s(:lvar, :length), :-, s(:lit, 1))), s(:lasgn, :i), s(:if, s(:call, s(:call, s(:lvar, :a), :[], s(:lvar, :i)), :!=, s(:call, s(:lvar, :b), :[], s(:lvar, :i))), s(:lasgn, :difference, s(:call, s(:lvar, :difference), :+, s(:lit, 1))), nil)), s(:return, s(:lvar, :difference)))), s(:cdecl, :Hamming, s(:call, s(:const, :HammingCompare), :new)))
s(:class, :Hamming, nil, s(:defn, :compute, s(:args, :seqone, :seqtwo), s(:lasgn, :oneSplit, s(:call, s(:lvar, :seqone), :scan, s(:lit, /./))), s(:lasgn, :twoSplit, s(:call, s(:lvar, :seqtwo), :scan, s(:lit, /./))), s(:lasgn, :count, s(:lit, 0)), s(:lasgn, :errors, s(:lit, 0)), s(:if, s(:call, s(:lvar, :oneSplit), :respond_to?, s(:str, "each")), s(:iter, s(:call, s(:lvar, :oneSplit), :each), s(:args, :oneDNA), s(:if, s(:and, s(:call, s(:lvar, :count), :<, s(:call, s(:lvar, :seqone), :length)), s(:call, s(:lvar, :count), :<, s(:call, s(:lvar, :seqtwo), :length))), s(:block, s(:if, s(:call, s(:lvar, :oneDNA), :!=, s(:call, s(:lvar, :twoSplit), :[], s(:lvar, :count))), s(:lasgn, :errors, s(:call, s(:lvar, :errors), :+, s(:lit, 1))), nil), s(:lasgn, :count, s(:call, s(:lvar, :count), :+, s(:lit, 1)))), nil)), nil), s(:return, s(:lvar, :errors))))
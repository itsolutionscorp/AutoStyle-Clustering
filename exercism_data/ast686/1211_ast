s(:class, :Hamming, nil, s(:defn, :compute, s(:args, :strand_a, :strand_b), s(:lasgn, :a, s(:call, s(:lvar, :strand_a), :split, s(:str, ""))), s(:lasgn, :b, s(:call, s(:lvar, :strand_b), :split, s(:str, ""))), s(:lasgn, :length_diff, s(:lit, 0)), s(:if, s(:call, s(:call, s(:lvar, :a), :length), :>, s(:call, s(:lvar, :b), :length)), s(:block, s(:lasgn, :length_diff, s(:call, s(:call, s(:call, s(:lvar, :a), :length), :-, s(:call, s(:lvar, :b), :length)), :+, s(:lit, 1))), s(:lasgn, :a, s(:call, s(:lvar, :a), :[], s(:dot2, s(:lit, 0), s(:call, s(:lvar, :length_diff), :-@))))), s(:if, s(:call, s(:call, s(:lvar, :b), :length), :>, s(:call, s(:lvar, :a), :length)), s(:block, s(:lasgn, :length_diff, s(:call, s(:call, s(:call, s(:lvar, :b), :length), :-, s(:call, s(:lvar, :a), :length)), :+, s(:lit, 1))), s(:lasgn, :b, s(:call, s(:lvar, :b), :[], s(:dot2, s(:lit, 0), s(:call, s(:lvar, :length_diff), :-@))))), nil)), s(:lasgn, :hamming_distance, s(:lit, 0)), s(:for, s(:dot2, s(:lit, 0), s(:call, s(:lvar, :a), :length)), s(:lasgn, :i), s(:if, s(:call, s(:call, s(:lvar, :a), :[], s(:lvar, :i)), :!=, s(:call, s(:lvar, :b), :[], s(:lvar, :i))), s(:lasgn, :hamming_distance, s(:call, s(:lvar, :hamming_distance), :+, s(:lit, 1))), nil)), s(:return, s(:lvar, :hamming_distance))))
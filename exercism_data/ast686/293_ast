s(:class, :Hamming, nil, s(:defn, :compute, s(:args, :first, :second), s(:lasgn, :first_array, s(:call, s(:lvar, :first), :split, s(:lit, //))), s(:lasgn, :second_array, s(:call, s(:lvar, :second), :split, s(:lit, //))), s(:if, s(:call, s(:call, s(:lvar, :first_array), :count), :<=, s(:call, s(:lvar, :second_array), :count)), s(:lasgn, :nucleo_size, s(:call, s(:lvar, :first_array), :count)), s(:if, s(:call, s(:call, s(:lvar, :first_array), :count), :>, s(:call, s(:lvar, :second_array), :count)), s(:lasgn, :nucleo_size, s(:call, s(:lvar, :second_array), :count)), nil)), s(:lasgn, :n, s(:lit, 0)), s(:lasgn, :diff_counter, s(:lit, 0)), s(:iter, s(:call, s(:lvar, :nucleo_size), :times), s(:args), s(:block, s(:if, s(:call, s(:call, s(:lvar, :first_array), :[], s(:lvar, :n)), :!=, s(:call, s(:lvar, :second_array), :[], s(:lvar, :n))), s(:lasgn, :diff_counter, s(:call, s(:lvar, :diff_counter), :+, s(:lit, 1))), nil), s(:lasgn, :n, s(:call, s(:lvar, :n), :+, s(:lit, 1))))), s(:return, s(:lvar, :diff_counter))))
s(:defn, :compute, s(:args, :x, :y), s(:lasgn, :first_string, s(:call, s(:const, :Array), :new)), s(:lasgn, :first_string, s(:call, s(:call, s(:lvar, :x), :chars), :to_a)), s(:lasgn, :second_string, s(:call, s(:const, :Array), :new)), s(:lasgn, :second_string, s(:call, s(:call, s(:lvar, :y), :chars), :to_a)), s(:lasgn, :strings_equal, s(:call, s(:call, s(:lvar, :first_string), :length), :==, s(:call, s(:lvar, :second_string), :length))), s(:lasgn, :difference, s(:call, s(:call, s(:call, s(:lvar, :first_string), :length), :-, s(:call, s(:lvar, :second_string), :length)), :abs)), s(:lasgn, :first_end_element, s(:call, s(:call, s(:call, s(:lvar, :first_string), :length), :-, s(:lvar, :difference)), :abs)), s(:lasgn, :second_end_element, s(:call, s(:call, s(:call, s(:lvar, :second_string), :length), :-, s(:lvar, :difference)), :abs)), s(:lasgn, :first_string, s(:call, s(:lvar, :first_string), :slice, s(:lit, 0), s(:lvar, :first_end_element))), s(:lasgn, :second_string, s(:call, s(:lvar, :second_string), :slice, s(:lit, 0), s(:lvar, :second_end_element))), s(:iasgn, :@counter, s(:lit, 0)), s(:iasgn, :@hamming_distance, s(:lit, 0)), s(:iter, s(:call, s(:lvar, :first_string), :each), s(:args, :f), s(:block, s(:if, s(:call, s(:call, s(:lvar, :second_string), :[], s(:ivar, :@counter)), :!=, s(:lvar, :f)), s(:iasgn, :@hamming_distance, s(:call, s(:ivar, :@hamming_distance), :+, s(:lit, 1))), nil), s(:iasgn, :@counter, s(:call, s(:ivar, :@counter), :+, s(:lit, 1))))), s(:return, s(:ivar, :@hamming_distance)))
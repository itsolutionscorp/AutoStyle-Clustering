s(:defn, :compute, s(:args, :first_sequence, :second_sequence), s(:lasgn, :hamming_counter, s(:lit, 0)), s(:if, s(:call, s(:call, s(:lvar, :first_sequence), :length), :!=, s(:call, s(:lvar, :second_sequence), :length)), nil, s(:if, s(:call, s(:lvar, :first_sequence), :===, s(:lvar, :second_sequence)), s(:lvar, :hamming_counter), s(:block, s(:lasgn, :split_first_sequence, s(:call, s(:lvar, :first_sequence), :split, s(:str, ""))), s(:lasgn, :split_second_sequence, s(:call, s(:lvar, :second_sequence), :split, s(:str, ""))), s(:lasgn, :counter, s(:call, s(:lvar, :split_first_sequence), :length)), s(:while, s(:call, s(:lvar, :counter), :>, s(:lit, 0)), s(:block, s(:lasgn, :counter, s(:call, s(:lvar, :counter), :-, s(:lit, 1))), s(:lasgn, :guard, s(:call, s(:lvar, :split_first_sequence), :pop)), s(:lasgn, :guard_second, s(:call, s(:lvar, :split_second_sequence), :pop)), s(:if, s(:call, s(:lvar, :guard), :!=, s(:lvar, :guard_second)), s(:lasgn, :hamming_counter, s(:call, s(:lvar, :hamming_counter), :+, s(:lit, 1))), nil)), true), s(:lvar, :hamming_counter)))))
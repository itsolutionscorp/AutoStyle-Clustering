s(:class, :Hamming, nil, s(:defn, :compute, s(:args, :first, :second), s(:if, s(:call, s(:lvar, :first), :is_a?, s(:const, :String)), nil, s(:call, nil, :raise, s(:call, s(:call, s(:call, s(:str, "Expected a String as the first parameter, but got "), :<<, s(:call, s(:call, s(:lvar, :first), :class), :to_s)), :<<, s(:str, ": ")), :<<, s(:call, s(:lvar, :first), :to_s)))), s(:if, s(:call, s(:lvar, :second), :is_a?, s(:const, :String)), nil, s(:call, nil, :raise, s(:call, s(:call, s(:call, s(:str, "Expected a String as the second parameter, but got "), :<<, s(:call, s(:call, s(:lvar, :second), :class), :to_s)), :<<, s(:str, ": ")), :<<, s(:call, s(:lvar, :second), :to_s)))), s(:if, s(:call, s(:call, s(:lvar, :first), :length), :==, s(:call, s(:lvar, :second), :length)), nil, s(:call, nil, :raise, s(:call, s(:call, s(:call, s(:str, "Expected two strings of equal length, but the first one was length "), :<<, s(:call, s(:call, s(:lvar, :first), :length), :to_s)), :<<, s(:str, ", while the second one was length ")), :<<, s(:call, s(:call, s(:lvar, :second), :length), :to_s)))), s(:lasgn, :differenceCount, s(:lit, 0)), s(:lasgn, :differenceIndexes, s(:str, "|")), s(:iter, s(:call, s(:call, s(:lvar, :first), :split, s(:str, "")), :each_with_index), s(:args, :character, :index), s(:if, s(:call, s(:lvar, :character), :!=, s(:call, s(:lvar, :second), :[], s(:lvar, :index))), s(:block, s(:lasgn, :differenceCount, s(:call, s(:lvar, :differenceCount), :+, s(:lit, 1))), s(:call, s(:lvar, :differenceIndexes), :<<, s(:str, "x"))), s(:call, s(:lvar, :differenceIndexes), :<<, s(:str, " ")))), s(:call, s(:lvar, :differenceIndexes), :<<, s(:str, "|")), s(:if, s(:and, s(:gvar, :$DEBUG), s(:call, s(:lvar, :differenceCount), :!=, s(:lit, 0))), s(:call, nil, :puts, s(:call, s(:call, s(:call, s(:call, s(:call, s(:call, s(:str, "|"), :<<, s(:lvar, :first)), :<<, s(:str, "| -> ")), :<<, s(:lvar, :differenceIndexes)), :<<, s(:str, " <- |")), :<<, s(:lvar, :second)), :<<, s(:str, "|"))), nil), s(:lvar, :differenceCount)))
s(:class, :Hamming, nil, s(:defn, :compute, s(:args, s(:lasgn, :seq1, s(:nil)), s(:lasgn, :seq2, s(:nil))), s(:if, s(:or, s(:call, s(:lvar, :seq1), :nil?), s(:or, s(:call, s(:lvar, :seq2), :nil?), s(:or, s(:call, s(:and, s(:call, s(:lvar, :seq1), :is_a?, s(:const, :String)), s(:call, s(:lvar, :seq2), :is_a?, s(:const, :String))), :!), s(:or, s(:call, s(:call, s(:lvar, :seq1), :length), :==, s(:lit, 0)), s(:call, s(:call, s(:lvar, :seq2), :length), :==, s(:lit, 0)))))), s(:return, s(:lit, -1)), nil), s(:lasgn, :upper_seq1, s(:call, s(:lvar, :seq1), :upcase)), s(:lasgn, :upper_seq2, s(:call, s(:lvar, :seq2), :upcase)), s(:if, s(:call, s(:and, s(:call, s(:lvar, :upper_seq1), :match, s(:lit, /[ACGT]+/)), s(:call, s(:lvar, :upper_seq2), :match, s(:lit, /[ACGT]+/))), :!), s(:return, s(:lit, -1)), nil), s(:lasgn, :difference, s(:lit, 0)), s(:for, s(:dot2, s(:lit, 0), s(:call, s(:call, s(:lvar, :upper_seq1), :length), :-, s(:lit, 1))), s(:lasgn, :x), s(:block, s(:if, s(:call, s(:lvar, :x), :>=, s(:call, s(:lvar, :upper_seq2), :length)), s(:break), nil), s(:if, s(:call, s(:call, s(:lvar, :upper_seq1), :[], s(:lvar, :x)), :==, s(:call, s(:lvar, :upper_seq2), :[], s(:lvar, :x))), nil, s(:lasgn, :difference, s(:call, s(:lvar, :difference), :+, s(:lit, 1)))))), s(:return, s(:lvar, :difference))))
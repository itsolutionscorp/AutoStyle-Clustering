s(:class, :Hamming, nil, s(:defn, :compute, s(:args, :a, :b), s(:lasgn, :distance, s(:lit, 0)), s(:if, s(:call, s(:call, s(:lvar, :a), :size), :<, s(:call, s(:lvar, :b), :size)), s(:block, s(:lasgn, :shortest, s(:lvar, :a)), s(:lasgn, :other, s(:lvar, :b))), s(:block, s(:lasgn, :shortest, s(:lvar, :b)), s(:lasgn, :other, s(:lvar, :a)))), s(:while, s(:call, s(:call, s(:lvar, :shortest), :empty?), :!), s(:block, s(:lasgn, :sChar, s(:call, s(:lvar, :shortest), :slice!, s(:lit, 0))), s(:lasgn, :oChar, s(:call, s(:lvar, :other), :slice!, s(:lit, 0))), s(:if, s(:call, s(:lvar, :sChar), :!=, s(:lvar, :oChar)), s(:lasgn, :distance, s(:call, s(:lvar, :distance), :+, s(:lit, 1))), nil)), true), s(:lvar, :distance)))
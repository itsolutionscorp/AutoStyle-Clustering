s(:class, :Hamming, nil, s(:defn, :compute, s(:args, :strand1, :strand2), s(:lasgn, :count, s(:lit, 0)), s(:if, s(:call, s(:call, s(:lvar, :strand1), :length), :>, s(:call, s(:lvar, :strand2), :length)), s(:block, s(:lasgn, :size, s(:call, s(:lvar, :strand2), :length)), s(:lasgn, :strand1, s(:call, s(:lvar, :strand1), :[], s(:dot2, s(:lit, 0), s(:call, s(:lvar, :size), :-, s(:lit, 1)))))), s(:if, s(:call, s(:call, s(:lvar, :strand1), :length), :<, s(:call, s(:lvar, :strand2), :length)), s(:block, s(:lasgn, :size, s(:call, s(:lvar, :strand1), :length)), s(:lasgn, :strand2, s(:call, s(:lvar, :strand2), :[], s(:dot2, s(:lit, 0), s(:call, s(:lvar, :size), :-, s(:lit, 1)))))), nil)), s(:iter, s(:call, s(:call, s(:lvar, :strand1), :length), :times), s(:args, :i), s(:if, s(:call, s(:call, s(:lvar, :strand1), :[], s(:lvar, :i)), :!=, s(:call, s(:lvar, :strand2), :[], s(:lvar, :i))), s(:lasgn, :count, s(:call, s(:lvar, :count), :+, s(:lit, 1))), nil)), s(:lvar, :count)))
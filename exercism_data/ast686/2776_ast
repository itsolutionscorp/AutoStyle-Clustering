s(:class, :Hamming, nil, s(:defn, :compute, s(:args, :s1, :s2), s(:if, s(:and, s(:call, s(:lvar, :s1), :is_a?, s(:const, :String)), s(:call, s(:lvar, :s2), :is_a?, s(:const, :String))), nil, s(:call, nil, :raise, s(:const, :ArgumentError), s(:str, "strands must be strings"))), s(:lasgn, :s1_array, s(:call, s(:lvar, :s1), :split, s(:lit, //))), s(:lasgn, :s2_array, s(:call, s(:lvar, :s2), :split, s(:lit, //))), s(:lasgn, :len, s(:call, s(:array, s(:call, s(:lvar, :s1_array), :length), s(:call, s(:lvar, :s2_array), :length)), :min)), s(:lasgn, :dist, s(:lit, 0)), s(:if, s(:call, s(:lvar, :len), :>, s(:lit, 0)), nil, s(:return, s(:lvar, :dist))), s(:for, s(:dot3, s(:lit, 0), s(:lvar, :len)), s(:lasgn, :i), s(:if, s(:call, s(:call, s(:lvar, :s1_array), :[], s(:lvar, :i)), :!=, s(:call, s(:lvar, :s2_array), :[], s(:lvar, :i))), s(:lasgn, :dist, s(:call, s(:lvar, :dist), :+, s(:lit, 1))), nil)), s(:lvar, :dist)))
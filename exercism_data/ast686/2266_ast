s(:defn, :compute, s(:args, :str1, :str2), s(:lasgn, :strand1, s(:call, s(:lvar, :str1), :split, s(:str, ""))), s(:lasgn, :strand2, s(:call, s(:lvar, :str2), :split, s(:str, ""))), s(:if, s(:call, s(:lvar, :strand1), :==, s(:lvar, :strand2)), s(:return, s(:lit, 0)), nil), s(:if, s(:call, s(:call, s(:lvar, :strand1), :length), :>, s(:call, s(:lvar, :strand2), :length)), s(:block, s(:lasgn, :filler, s(:call, s(:call, s(:lvar, :strand1), :length), :-, s(:call, s(:lvar, :strand2), :length))), s(:iter, s(:call, s(:lvar, :filler), :times), s(:args), s(:call, s(:lvar, :strand2), :<<, s(:str, "X")))), nil), s(:lasgn, :distance, s(:lit, 0)), s(:iter, s(:call, s(:lvar, :strand1), :each_with_index), s(:args, :nuc_one, :index), s(:block, s(:if, s(:or, s(:call, s(:call, s(:lvar, :strand2), :[], s(:lvar, :index)), :==, s(:str, "X")), s(:call, s(:lvar, :nuc_one), :==, s(:str, "X"))), s(:return, s(:lit, 0)), nil), s(:if, s(:call, s(:lvar, :nuc_one), :==, s(:call, s(:lvar, :strand2), :[], s(:lvar, :index))), s(:lasgn, :distance, s(:call, s(:lvar, :distance), :+, s(:lit, 0))), s(:lasgn, :distance, s(:call, s(:lvar, :distance), :+, s(:lit, 1)))))), s(:lvar, :distance))
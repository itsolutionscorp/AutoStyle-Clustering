s(:class, :Hamming, nil, s(:defn, :compute, s(:args, :a, :b), s(:masgn, s(:array, s(:lasgn, :a), s(:lasgn, :b)), s(:to_ary, s(:array, s(:call, s(:lvar, :a), :chars), s(:call, s(:lvar, :b), :chars)))), s(:masgn, s(:array, s(:lasgn, :longest), s(:lasgn, :shortest)), s(:to_ary, s(:if, s(:call, s(:call, s(:array, s(:call, s(:lvar, :a), :size), s(:call, s(:lvar, :b), :size)), :max), :==, s(:call, s(:lvar, :a), :size)), s(:array, s(:lvar, :a), s(:lvar, :b)), s(:array, s(:lvar, :b), s(:lvar, :a))))), s(:lasgn, :hamming_count, s(:lit, 0)), s(:iter, s(:call, s(:call, s(:lvar, :shortest), :to_ary), :each_with_index), s(:args, :ch, :i), s(:if, s(:call, s(:lvar, :ch), :!=, s(:call, s(:lvar, :longest), :[], s(:lvar, :i))), s(:lasgn, :hamming_count, s(:call, s(:lvar, :hamming_count), :+, s(:lit, 1))), nil)), s(:lvar, :hamming_count)))
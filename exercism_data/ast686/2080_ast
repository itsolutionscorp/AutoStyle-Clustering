s(:defn, :compute, s(:args, :var1, :var2), s(:if, s(:and, s(:call, s(:call, s(:lvar, :var1), :length), :===, s(:lit, 1)), s(:call, s(:call, s(:lvar, :var2), :length), :===, s(:lit, 1))), s(:if, s(:call, s(:lvar, :var1), :===, s(:lvar, :var2)), s(:lit, 0), s(:lit, 1)), s(:if, s(:or, s(:call, s(:call, s(:lvar, :var1), :length), :===, s(:lit, 1)), s(:call, s(:call, s(:lvar, :var2), :length), :===, s(:lit, 1))), s(:case, s(:call, s(:lvar, :var1), :length), s(:when, s(:array, s(:lit, 1)), s(:if, s(:call, s(:call, s(:lvar, :var1), :[], s(:lit, 0)), :===, s(:call, s(:lvar, :var2), :[], s(:lit, 0))), s(:lit, 0), s(:lit, 1))), s(:if, s(:call, s(:call, s(:lvar, :var1), :[], s(:lit, 0)), :===, s(:call, s(:lvar, :var2), :[], s(:lit, 0))), s(:lit, 0), s(:lit, 1))), s(:if, s(:call, s(:lvar, :var1), :is_a?, s(:const, :Array)), s(:call, s(:call, s(:self), :compute, s(:call, s(:lvar, :var1), :[], s(:lit, 0)), s(:call, s(:lvar, :var2), :[], s(:lit, 0))), :+, s(:call, s(:self), :compute, s(:call, s(:lvar, :var1), :[], s(:lit, 1), s(:call, s(:lvar, :var1), :length)), s(:call, s(:lvar, :var2), :[], s(:lit, 1), s(:call, s(:lvar, :var2), :length)))), s(:call, s(:call, s(:self), :compute, s(:call, s(:call, s(:lvar, :var1), :split, s(:str, "")), :[], s(:lit, 0)), s(:call, s(:call, s(:lvar, :var2), :split, s(:str, "")), :[], s(:lit, 0))), :+, s(:call, s(:self), :compute, s(:call, s(:call, s(:lvar, :var1), :split, s(:str, "")), :[], s(:lit, 1), s(:call, s(:lvar, :var1), :length)), s(:call, s(:call, s(:lvar, :var2), :split, s(:str, "")), :[], s(:lit, 1), s(:call, s(:lvar, :var2), :length))))))))
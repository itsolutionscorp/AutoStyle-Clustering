s(:block, s(:call, nil, :require, s(:str, "set")), s(:class, :Hamming, nil, s(:defn, :compute, s(:args, :strand_a, :strand_b), s(:lasgn, :distance, s(:array)), s(:lasgn, :length, s(:call, s(:array, s(:call, s(:lvar, :strand_a), :length), s(:call, s(:lvar, :strand_b), :length)), :min)), s(:lasgn, :strand_a, s(:call, s(:call, s(:lvar, :strand_a), :[], s(:dot2, s(:lit, 0), s(:call, s(:lvar, :length), :-, s(:lit, 1)))), :split, s(:str, ""))), s(:lasgn, :strand_b, s(:call, s(:call, s(:lvar, :strand_b), :[], s(:dot2, s(:lit, 0), s(:call, s(:lvar, :length), :-, s(:lit, 1)))), :split, s(:str, ""))), s(:iter, s(:call, s(:lvar, :strand_b), :each_with_index), s(:args, :nuc, :index), s(:if, s(:call, s(:lvar, :nuc), :!=, s(:call, s(:lvar, :strand_a), :[], s(:lvar, :index))), s(:call, s(:lvar, :distance), :<<, s(:lvar, :nuc)), nil)), s(:call, s(:lvar, :distance), :count))))
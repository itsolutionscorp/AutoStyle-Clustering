s(:class, :Hamming, nil, s(:defs, s(:const, :Hamming), :compute, s(:args, :a, :b), s(:case, s(:call, s(:call, s(:lvar, :a), :length), :<=>, s(:call, s(:lvar, :b), :length)), s(:when, s(:array, s(:lit, -1)), s(:lasgn, :b, s(:call, s(:lvar, :b), :[], s(:dot2, s(:lit, 0), s(:call, s(:call, s(:lvar, :a), :length), :-, s(:lit, 1)))))), s(:when, s(:array, s(:lit, 1)), s(:lasgn, :a, s(:call, s(:lvar, :a), :[], s(:dot2, s(:lit, 0), s(:call, s(:call, s(:lvar, :b), :length), :-, s(:lit, 1)))))), nil), s(:lasgn, :distance, s(:lit, 0)), s(:for, s(:dot2, s(:lit, 0), s(:call, s(:call, s(:lvar, :a), :length), :-, s(:lit, 1))), s(:lasgn, :i), s(:if, s(:call, s(:call, s(:lvar, :a), :[], s(:lvar, :i)), :!=, s(:call, s(:lvar, :b), :[], s(:lvar, :i))), s(:lasgn, :distance, s(:call, s(:lvar, :distance), :+, s(:lit, 1))), nil)), s(:return, s(:lvar, :distance))))
s(:class, :Hamming, nil, s(:defn, :compute, s(:args, :string1, :string2), s(:if, s(:and, s(:call, s(:lvar, :string1), :is_a?, s(:const, :String)), s(:call, s(:lvar, :string2), :is_a?, s(:const, :String))), s(:block, s(:lasgn, :strand1, s(:call, s(:lvar, :string1), :upcase)), s(:lasgn, :strand2, s(:call, s(:lvar, :string2), :upcase)), s(:if, s(:or, s(:call, s(:lvar, :strand1), :==, s(:lvar, :strand2)), s(:call, s(:call, s(:lvar, :strand1), :length), :!=, s(:call, s(:lvar, :strand2), :length))), s(:return, s(:lit, 0)), s(:block, s(:lasgn, :hamming_distance, s(:lit, 0)), s(:iter, s(:call, s(:dot2, s(:lit, 0), s(:call, s(:lvar, :strand1), :length)), :each), s(:args, :index), s(:if, s(:call, s(:call, s(:lvar, :strand1), :[], s(:lvar, :index)), :!=, s(:call, s(:lvar, :strand2), :[], s(:lvar, :index))), s(:lasgn, :hamming_distance, s(:call, s(:lvar, :hamming_distance), :+, s(:lit, 1))), nil)), s(:return, s(:lvar, :hamming_distance))))), s(:call, nil, :puts, s(:str, "Please enter valid string")))))
s(:class, :Hamming, nil, s(:defn, :compute, s(:args, :strand_1, :strand_2), s(:lasgn, :x, s(:call, s(:lvar, :strand_1), :scan, s(:lit, /./))), s(:lasgn, :y, s(:call, s(:lvar, :strand_2), :scan, s(:lit, /./))), s(:lasgn, :value, s(:lit, 0)), s(:call, nil, :puts, s(:dstr, "x = ", s(:evstr, s(:lvar, :x)))), s(:call, nil, :puts, s(:dstr, "y = ", s(:evstr, s(:lvar, :y)))), s(:if, s(:call, s(:call, s(:lvar, :x), :length), :>, s(:call, s(:lvar, :y), :length)), s(:block, s(:lasgn, :pair_length, s(:call, s(:call, s(:array, s(:call, s(:lvar, :x), :length), s(:call, s(:lvar, :y), :length)), :min), :-, s(:lit, 1))), s(:call, nil, :puts, s(:dstr, "pair length ", s(:evstr, s(:lvar, :pair_length)))), s(:lasgn, :new_strand_x, s(:call, s(:lvar, :x), :slice, s(:dot2, s(:lit, 0), s(:lvar, :pair_length)))), s(:call, nil, :puts, s(:dstr, "new strand x = ", s(:evstr, s(:lvar, :new_strand_x)))), s(:call, nil, :puts, s(:dstr, "strand y = ", s(:evstr, s(:lvar, :y)))), s(:lasgn, :comparison_hash, s(:call, s(:lvar, :new_strand_x), :zip, s(:lvar, :y))), s(:call, nil, :puts, s(:dstr, "comparison hash = ", s(:evstr, s(:lvar, :comparison_hash)))), s(:iter, s(:call, s(:lvar, :comparison_hash), :each), s(:args, :x, :y), s(:if, s(:call, s(:lvar, :x), :!=, s(:lvar, :y)), s(:lasgn, :value, s(:call, s(:lvar, :value), :+, s(:lit, 1))), nil)), s(:call, nil, :puts, s(:dstr, "counter value = ", s(:evstr, s(:lvar, :value)))), s(:return, s(:lvar, :value))), s(:if, s(:call, s(:call, s(:lvar, :y), :length), :>=, s(:call, s(:lvar, :x), :length)), s(:block, s(:lasgn, :pair_length, s(:call, s(:call, s(:array, s(:call, s(:lvar, :y), :length), s(:call, s(:lvar, :x), :length)), :min), :-, s(:lit, 1))), s(:call, nil, :puts, s(:dstr, "pair length ", s(:evstr, s(:lvar, :pair_length)))), s(:lasgn, :new_strand_y, s(:call, s(:lvar, :y), :slice, s(:dot2, s(:lit, 0), s(:lvar, :pair_length)))), s(:call, nil, :puts, s(:dstr, "new strand y = ", s(:evstr, s(:lvar, :new_strand_y)))), s(:call, nil, :puts, s(:dstr, "strand x = ", s(:evstr, s(:lvar, :x)))), s(:lasgn, :comparison_hash, s(:call, s(:lvar, :new_strand_y), :zip, s(:lvar, :x))), s(:call, nil, :puts, s(:dstr, "comparison hash = ", s(:evstr, s(:lvar, :comparison_hash)))), s(:iter, s(:call, s(:lvar, :comparison_hash), :each), s(:args, :x, :y), s(:if, s(:call, s(:lvar, :x), :!=, s(:lvar, :y)), s(:lasgn, :value, s(:call, s(:lvar, :value), :+, s(:lit, 1))), nil)), s(:call, nil, :puts, s(:dstr, "counter value = ", s(:evstr, s(:lvar, :value)))), s(:return, s(:lvar, :value))), nil))))
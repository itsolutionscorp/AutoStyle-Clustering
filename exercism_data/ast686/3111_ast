s(:defn, :compute, s(:args, :argument1, :argument2), s(:lasgn, :index, s(:call, s(:call, s(:lvar, :argument1), :length), :-, s(:lit, 1))), s(:lasgn, :how_many, s(:lit, 0)), s(:if, s(:call, s(:call, s(:lvar, :argument1), :length), :!=, s(:call, s(:lvar, :argument2), :length)), s(:call, nil, :puts, s(:str, "Sorry, I can't compare these strands")), nil), s(:if, s(:and, s(:call, s(:call, s(:lvar, :argument1), :length), :==, s(:lit, 1)), s(:call, s(:call, s(:lvar, :argument1), :[], s(:lit, 0)), :==, s(:call, s(:lvar, :argument2), :[], s(:lit, 0)))), s(:return, s(:lit, 0)), s(:block, s(:for, s(:dot2, s(:lit, 0), s(:lvar, :index)), s(:lasgn, :i), s(:if, s(:call, s(:call, s(:lvar, :argument1), :[], s(:lvar, :i)), :!=, s(:call, s(:lvar, :argument2), :[], s(:lvar, :i))), s(:lasgn, :how_many, s(:call, s(:lvar, :how_many), :+, s(:lit, 1))), nil)), s(:return, s(:lvar, :how_many)))))
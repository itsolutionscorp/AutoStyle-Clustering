s(:block, s(:class, :Hamming, nil, s(:defn, :compute, s(:args, :a_strand, :b_strand), s(:lasgn, :base_strand, s(:call, s(:call, s(:lvar, :a_strand), :each_char), :to_a)), s(:lasgn, :comp_strand, s(:call, s(:call, s(:lvar, :b_strand), :each_char), :to_a)), s(:lasgn, :hamming_distance, s(:lit, 0)), s(:lasgn, :strand_dif, s(:call, s(:call, s(:lvar, :base_strand), :length), :<=>, s(:call, s(:lvar, :comp_strand), :length))), s(:case, s(:lvar, :strand_dif), s(:when, s(:array, s(:lit, 1)), s(:lasgn, :overflow, s(:call, s(:call, s(:lvar, :base_strand), :length), :-, s(:call, s(:lvar, :comp_strand), :length))), s(:call, s(:lvar, :base_strand), :pop, s(:lvar, :overflow))), s(:when, s(:array, s(:lit, -1)), s(:lasgn, :overflow, s(:call, s(:call, s(:lvar, :comp_strand), :length), :-, s(:call, s(:lvar, :base_strand), :length))), s(:call, s(:lvar, :comp_strand), :pop, s(:lvar, :overflow))), nil), s(:iter, s(:call, s(:lvar, :base_strand), :each_with_index), s(:args, :base, :idx), s(:if, s(:call, s(:lvar, :base), :!=, s(:call, s(:lvar, :comp_strand), :[], s(:lvar, :idx))), s(:lasgn, :hamming_distance, s(:call, s(:lvar, :hamming_distance), :+, s(:lit, 1))), s(:lvar, :hamming_distance))), s(:return, s(:lvar, :hamming_distance)))), s(:lasgn, :a_strand, s(:str, "GAGCCTACTAACGGGATAAAAAA")), s(:lasgn, :b_strand, s(:str, "CATCGTAATGACGGCCTAAAAA")), s(:call, nil, :p, s(:call, s(:const, :Hamming), :compute, s(:lvar, :a_strand), s(:lvar, :b_strand))))
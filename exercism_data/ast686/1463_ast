s(:class, :Hamming, nil, s(:defn, :compute, s(:args, :strand_1, :strand_2), s(:lasgn, :strand_1, s(:call, s(:lvar, :strand_1), :split, s(:lit, //))), s(:lasgn, :strand_2, s(:call, s(:lvar, :strand_2), :split, s(:lit, //))), s(:lasgn, :difference, s(:lit, 0)), s(:lasgn, :normalize_length, s(:call, s(:call, s(:lvar, :strand_2), :length), :-, s(:call, s(:lvar, :strand_1), :length))), s(:if, s(:call, s(:call, nil, :narmalize_length), :>, s(:lit, 0)), s(:call, s(:lvar, :strand_2), :pop, s(:lvar, :normalize_length)), s(:block, s(:call, s(:lvar, :normalize_length), :<, s(:lit, 0)), s(:call, s(:lvar, :strand_1), :pop, s(:call, s(:lvar, :normalize_length), :abs)))), s(:iter, s(:call, s(:lvar, :strand_2), :each_with_index), s(:args, :nucleotide, :index), s(:if, s(:call, s(:lvar, :nucleotide), :!=, s(:call, s(:lvar, :strand_1), :[], s(:lvar, :index))), s(:lasgn, :difference, s(:call, s(:lvar, :difference), :+, s(:lit, 1))), nil)), s(:lvar, :difference)))
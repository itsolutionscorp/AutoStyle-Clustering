s(:class, :Hamming, nil, s(:defn, :compute, s(:args, :sequence_1, :sequence_2), s(:lasgn, :distance, s(:lit, 0)), s(:lasgn, :difference, s(:call, s(:call, s(:call, s(:call, s(:lvar, :sequence_1), :length), :-, s(:call, s(:lvar, :sequence_2), :length)), :abs), :to_i)), s(:iter, s(:call, s(:lit, 0), :upto, s(:call, s(:lvar, :sequence_1), :length)), s(:args, :base), s(:or, s(:call, s(:call, s(:lvar, :sequence_1), :[], s(:lvar, :base)), :==, s(:call, s(:lvar, :sequence_2), :[], s(:lvar, :base))), s(:lasgn, :distance, s(:call, s(:lvar, :distance), :+, s(:lit, 1))))), s(:call, s(:lvar, :distance), :-, s(:lvar, :difference))))
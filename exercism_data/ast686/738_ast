s(:class, :Hamming, nil, s(:defn, :compute, s(:args, :strand_one, :strand_two), s(:call, s(:lvar, :strand_one), :upcase!), s(:call, s(:lvar, :strand_two), :upcase!), s(:lasgn, :strand_one_length, s(:call, s(:lvar, :strand_one), :length)), s(:lasgn, :strand_two_length, s(:call, s(:lvar, :strand_two), :length)), s(:lasgn, :difference, s(:lit, 0)), s(:lasgn, :count, s(:lit, 0)), s(:while, s(:call, s(:lvar, :count), :<=, s(:lvar, :strand_one_length)), s(:block, s(:if, s(:and, s(:call, s(:call, s(:lvar, :strand_one), :[], s(:lvar, :count)), :!=, s(:nil)), s(:call, s(:call, s(:lvar, :strand_two), :[], s(:lvar, :count)), :!=, s(:nil))), s(:if, s(:call, s(:call, s(:lvar, :strand_one), :[], s(:lvar, :count)), :!=, s(:call, s(:lvar, :strand_two), :[], s(:lvar, :count))), s(:lasgn, :difference, s(:call, s(:lvar, :difference), :+, s(:lit, 1))), nil), nil), s(:lasgn, :count, s(:call, s(:lvar, :count), :+, s(:lit, 1)))), true), s(:return, s(:lvar, :difference))))
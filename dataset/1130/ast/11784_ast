s(:block, s(:defn, :order_letters_alphabetically, s(:args, :str), s(:call, s(:iter, s(:call, s(:call, s(:lvar, :str), :chars), :sort), s(:args, :a, :b), s(:call, s(:lvar, :a), :casecmp, s(:lvar, :b))), :join)), s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :groups_hash, s(:call, s(:const, :Hash), :new)), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word), s(:block, s(:lasgn, :ordered_word, s(:call, nil, :order_letters_alphabetically, s(:lvar, :word))), s(:if, s(:call, s(:lvar, :groups_hash), :has_key?, s(:lvar, :ordered_word)), s(:call, s(:call, s(:lvar, :groups_hash), :[], s(:lvar, :ordered_word)), :push, s(:lvar, :word)), s(:block, s(:attrasgn, s(:lvar, :groups_hash), :[]=, s(:lvar, :ordered_word), s(:call, s(:const, :Array), :new)), s(:call, s(:call, s(:lvar, :groups_hash), :[], s(:lvar, :ordered_word)), :push, s(:lvar, :word)))))), s(:lasgn, :groups, s(:call, s(:const, :Array), :new)), s(:iter, s(:call, s(:lvar, :groups_hash), :each), s(:args, :key, :value), s(:call, s(:lvar, :groups), :<<, s(:lvar, :value))), s(:lvar, :groups)), s(:iter, s(:call, s(:call, nil, :combine_anagrams, s(:array, s(:str, "cars"), s(:str, "for"), s(:str, "potatoes"), s(:str, "racs"), s(:str, "four"), s(:str, "scar"), s(:str, "creams"), s(:str, "scream"))), :each), s(:args, :g), s(:block, s(:call, nil, :puts, s(:dstr, "group ", s(:evstr, s(:call, s(:lvar, :g), :class)), s(:str, " has "), s(:evstr, s(:call, s(:lvar, :g), :size)), s(:str, " element(s)"))), s(:call, nil, :puts, s(:lvar, :g)))))
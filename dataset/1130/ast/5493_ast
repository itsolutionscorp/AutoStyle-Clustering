s(:block, s(:defn, :palindrome?, s(:args, :string), s(:lasgn, :fixed, s(:call, s(:call, s(:lvar, :string), :gsub, s(:lit, /[\W]+/), s(:str, "")), :downcase)), s(:call, s(:lvar, :fixed), :==, s(:call, s(:lvar, :fixed), :reverse))), s(:defn, :count_words, s(:args, :string), s(:lasgn, :ret, s(:hash)), s(:lasgn, :fixed, s(:iter, s(:call, s(:call, s(:call, s(:lvar, :string), :downcase), :split, s(:lit, /\b/)), :reject), s(:args, :s), s(:match3, s(:lit, /[\W+]/), s(:lvar, :s)))), s(:iter, s(:call, s(:lvar, :fixed), :each), s(:args, :word), s(:if, s(:call, s(:lvar, :ret), :include?, s(:lvar, :word)), s(:attrasgn, s(:lvar, :ret), :[]=, s(:lvar, :word), s(:call, s(:call, s(:lvar, :ret), :[], s(:lvar, :word)), :+, s(:lit, 1))), s(:attrasgn, s(:lvar, :ret), :[]=, s(:lvar, :word), s(:lit, 1)))), s(:lvar, :ret)), s(:class, :WrongNumberOfPlayersError, s(:const, :StandardError)), s(:class, :NoSuchStrategyError, s(:const, :StandardError)), s(:defn, :rps_game_winner, s(:args, :game), s(:if, s(:call, s(:call, s(:lvar, :game), :length), :==, s(:lit, 2)), nil, s(:call, nil, :raise, s(:const, :WrongNumberOfPlayersError))), s(:lasgn, :valid, s(:array, s(:str, "R"), s(:str, "P"), s(:str, "S"))), s(:lasgn, :p1play, s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 0)), :[], s(:lit, 1))), s(:if, s(:call, s(:lvar, :p1play), :nil?), nil, s(:call, s(:lvar, :p1play), :upcase!)), s(:lasgn, :p2play, s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 1)), :[], s(:lit, 1))), s(:if, s(:call, s(:lvar, :p2play), :nil?), nil, s(:call, s(:lvar, :p2play), :upcase!)), s(:if, s(:and, s(:call, s(:lvar, :valid), :include?, s(:lvar, :p1play)), s(:call, s(:lvar, :valid), :include?, s(:lvar, :p2play))), nil, s(:call, nil, :raise, s(:const, :NoSuchStrategyError))), s(:case, s(:lvar, :p1play), s(:when, s(:array, s(:str, "R")), s(:case, s(:lvar, :p2play), s(:when, s(:array, s(:str, "R")), s(:call, s(:lvar, :game), :[], s(:lit, 0))), s(:when, s(:array, s(:str, "P")), s(:call, s(:lvar, :game), :[], s(:lit, 1))), s(:when, s(:array, s(:str, "S")), s(:call, s(:lvar, :game), :[], s(:lit, 0))), nil)), s(:when, s(:array, s(:str, "P")), s(:case, s(:lvar, :p2play), s(:when, s(:array, s(:str, "R")), s(:call, s(:lvar, :game), :[], s(:lit, 0))), s(:when, s(:array, s(:str, "P")), s(:call, s(:lvar, :game), :[], s(:lit, 0))), s(:when, s(:array, s(:str, "S")), s(:call, s(:lvar, :game), :[], s(:lit, 1))), nil)), s(:when, s(:array, s(:str, "S")), s(:case, s(:lvar, :p2play), s(:when, s(:array, s(:str, "R")), s(:call, s(:lvar, :game), :[], s(:lit, 1))), s(:when, s(:array, s(:str, "P")), s(:call, s(:lvar, :game), :[], s(:lit, 0))), s(:when, s(:array, s(:str, "S")), s(:call, s(:lvar, :game), :[], s(:lit, 0))), nil)), nil)), s(:defn, :rps_tournament_winner, s(:args, :tournament), s(:if, s(:call, s(:call, s(:call, s(:call, s(:lvar, :tournament), :[], s(:lit, 0)), :[], s(:lit, 0)), :class), :==, s(:const, :String)), s(:call, nil, :rps_game_winner, s(:lvar, :tournament)), s(:block, s(:lasgn, :win0, s(:call, nil, :rps_tournament_winner, s(:call, s(:lvar, :tournament), :[], s(:lit, 0)))), s(:lasgn, :win1, s(:call, nil, :rps_tournament_winner, s(:call, s(:lvar, :tournament), :[], s(:lit, 1)))), s(:call, nil, :rps_game_winner, s(:call, s(:array, s(:lvar, :win0)), :+, s(:array, s(:lvar, :win1))))))), s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :ret, s(:array)), s(:lasgn, :buff, s(:array)), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word), s(:block, s(:lasgn, :base, s(:call, s(:call, s(:call, s(:call, s(:lvar, :word), :downcase), :chars), :sort), :join)), s(:lasgn, :index, s(:call, s(:lvar, :buff), :index, s(:lvar, :base))), s(:if, s(:call, s(:call, s(:lvar, :index), :nil?), :!), s(:call, s(:call, s(:lvar, :ret), :[], s(:lvar, :index)), :<<, s(:lvar, :word)), s(:block, s(:call, s(:lvar, :ret), :<<, s(:array, s(:lvar, :word))), s(:call, s(:lvar, :buff), :<<, s(:lvar, :base)))))), s(:lvar, :ret)), s(:class, :Dessert, nil, s(:call, nil, :attr_accessor, s(:lit, :name), s(:lit, :calories)), s(:defn, :initialize, s(:args, :name, :calories), s(:iasgn, :@name, s(:lvar, :name)), s(:iasgn, :@calories, s(:lvar, :calories))), s(:defn, :healthy?, s(:args), s(:if, s(:call, s(:ivar, :@calories), :<, s(:lit, 200)), s(:true), s(:false))), s(:defn, :delicious?, s(:args), s(:true))), s(:class, :JellyBean, s(:const, :Dessert), s(:call, nil, :attr_accessor, s(:lit, :flavor)), s(:defn, :initialize, s(:args, :name, :calories, :flavor), s(:super, s(:lvar, :name), s(:lvar, :calories)), s(:iasgn, :@flavor, s(:lvar, :flavor))), s(:defn, :delicious?, s(:args), s(:if, s(:call, s(:call, nil, :flavor), :==, s(:str, "black licorice")), s(:false), s(:zsuper)))))
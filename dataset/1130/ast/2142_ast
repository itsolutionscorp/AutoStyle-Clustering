s(:block, s(:call, nil, :require, s(:str, "pp")), s(:defn, :clean_string, s(:args, :string), s(:return, s(:call, s(:call, s(:lvar, :string), :downcase), :gsub, s(:lit, /[^a-z]/), s(:str, "")))), s(:defn, :palindrome?, s(:args, :string), s(:lasgn, :string, s(:call, nil, :clean_string, s(:lvar, :string))), s(:return, s(:call, s(:lvar, :string), :==, s(:call, s(:lvar, :string), :reverse)))), s(:defn, :count_words, s(:args, :string), s(:lasgn, :words, s(:call, s(:lvar, :string), :split, s(:lit, /\b/))), s(:lasgn, :count_hash, s(:call, s(:const, :Hash), :new, s(:lit, 0))), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word), s(:block, s(:lasgn, :word, s(:call, nil, :clean_string, s(:lvar, :word))), s(:lasgn, :word, s(:call, s(:call, s(:lvar, :word), :strip), :squeeze, s(:str, " "))), s(:if, s(:or, s(:call, s(:lvar, :word), :==, s(:str, " ")), s(:or, s(:call, s(:lvar, :word), :nil?), s(:call, s(:lvar, :word), :empty?))), s(:next), nil), s(:op_asgn1, s(:lvar, :count_hash), s(:arglist, s(:lvar, :word)), :+, s(:lit, 1)))), s(:return, s(:lvar, :count_hash))), s(:defn, :valid_rps, s(:args, :rps), s(:lasgn, :rps, s(:call, s(:lvar, :rps), :downcase)), s(:return, s(:or, s(:call, s(:lvar, :rps), :==, s(:str, "s")), s(:or, s(:call, s(:lvar, :rps), :==, s(:str, "p")), s(:call, s(:lvar, :rps), :==, s(:str, "r")))))), s(:defn, :rps_game_winner, s(:args, :game), s(:if, s(:call, s(:call, s(:lvar, :game), :length), :==, s(:lit, 2)), nil, s(:call, nil, :raise, s(:const, :WrongNumberOfPlayersError))), s(:lasgn, :rps1, s(:call, s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 0)), :[], s(:lit, 1)), :downcase)), s(:lasgn, :rps2, s(:call, s(:call, s(:call, s(:lvar, :game), :[], s(:lit, 1)), :[], s(:lit, 1)), :downcase)), s(:if, s(:and, s(:call, nil, :valid_rps, s(:lvar, :rps1)), s(:call, nil, :valid_rps, s(:lvar, :rps2))), nil, s(:call, nil, :raise, s(:const, :NoSuchStrategyError))), s(:if, s(:or, s(:call, s(:lvar, :rps1), :==, s(:lvar, :rps2)), s(:or, s(:and, s(:call, s(:lvar, :rps1), :==, s(:str, "s")), s(:call, s(:lvar, :rps2), :==, s(:str, "p"))), s(:or, s(:and, s(:call, s(:lvar, :rps1), :==, s(:str, "p")), s(:call, s(:lvar, :rps2), :==, s(:str, "r"))), s(:and, s(:call, s(:lvar, :rps1), :==, s(:str, "r")), s(:call, s(:lvar, :rps2), :==, s(:str, "s")))))), s(:return, s(:call, s(:lvar, :game), :[], s(:lit, 0))), s(:return, s(:call, s(:lvar, :game), :[], s(:lit, 1))))), s(:defn, :rps_tournament_winner, s(:args, :tournament), s(:if, s(:call, s(:call, s(:call, s(:call, s(:lvar, :tournament), :[], s(:lit, 0)), :[], s(:lit, 0)), :class), :==, s(:const, :String)), s(:lasgn, :winner, s(:call, nil, :rps_game_winner, s(:lvar, :tournament))), s(:block, s(:lasgn, :winner1, s(:call, nil, :rps_tournament_winner, s(:call, s(:lvar, :tournament), :[], s(:lit, 0)))), s(:lasgn, :winner2, s(:call, nil, :rps_tournament_winner, s(:call, s(:lvar, :tournament), :[], s(:lit, 1)))), s(:lasgn, :winner, s(:call, nil, :rps_tournament_winner, s(:array, s(:lvar, :winner1), s(:lvar, :winner2)))))), s(:return, s(:lvar, :winner))), s(:class, :WrongNumberOfPlayersError, s(:const, :StandardError)), s(:class, :NoSuchStrategyError, s(:const, :StandardError)), s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :collected, s(:call, s(:const, :Hash), :new, s(:call, s(:const, :Array), :new))), s(:iter, s(:call, s(:lvar, :words), :each_index), s(:args, :i), s(:op_asgn1, s(:lvar, :collected), s(:arglist, s(:call, s(:call, s(:call, s(:call, s(:lvar, :words), :[], s(:lvar, :i)), :downcase), :split, s(:str, "")), :sort)), :+, s(:array, s(:call, s(:lvar, :words), :[], s(:lvar, :i))))), s(:return, s(:call, s(:lvar, :collected), :values))), s(:if, s(:call, s(:str, "(string)"), :==, s(:gvar, :$0)), s(:block, s(:lasgn, :test_strings, s(:hash, s(:str, "A man, a plan, a canal -- Panama"), s(:true), s(:str, "Madam, I'm Adam!"), s(:true), s(:str, "Abracadabra"), s(:false), s(:str, "ala"), s(:true))), s(:iter, s(:call, s(:lvar, :test_strings), :each_pair), s(:args, :string, :answer), s(:block, s(:call, nil, :print, s(:call, s(:lvar, :string), :+, s(:str, " -- "))), s(:if, s(:call, s(:call, nil, :palindrome?, s(:lvar, :string)), :==, s(:lvar, :answer)), s(:call, nil, :puts, s(:str, "right")), s(:call, nil, :puts, s(:str, "wrong"))))), s(:lasgn, :count_test, s(:hash, s(:str, "A man, a plan, a canal -- Panama"), s(:hash, s(:str, "a"), s(:lit, 3), s(:str, "man"), s(:lit, 1), s(:str, "canal"), s(:lit, 1), s(:str, "panama"), s(:lit, 1), s(:str, "plan"), s(:lit, 1)))), s(:iter, s(:call, s(:lvar, :count_test), :each_pair), s(:args, :string, :answer), s(:block, s(:call, nil, :print, s(:call, s(:lvar, :string), :+, s(:str, " -- "))), s(:if, s(:call, s(:call, nil, :count_words, s(:lvar, :string)), :==, s(:lvar, :answer)), s(:call, nil, :puts, s(:str, "right")), s(:call, nil, :puts, s(:str, "wrong"))), s(:lasgn, :result, s(:call, nil, :count_words, s(:lvar, :string))), s(:call, s(:const, :PP), :pp, s(:lvar, :result)))), s(:lasgn, :rpsgames, s(:hash, s(:array, s(:array, s(:str, "Armando"), s(:str, "P")), s(:array, s(:str, "Dave"), s(:str, "S"))), s(:array, s(:str, "Dave"), s(:str, "S")))), s(:iter, s(:call, s(:lvar, :rpsgames), :each_pair), s(:args, :game, :result), s(:block, s(:call, s(:const, :PP), :pp, s(:lvar, :game)), s(:if, s(:call, s(:call, nil, :rps_game_winner, s(:lvar, :game)), :!=, s(:lvar, :result)), s(:call, nil, :puts, s(:str, "failed game")), s(:call, nil, :puts, s(:str, "correct game"))))), s(:lasgn, :test_tournaments, s(:hash, s(:array, s(:array, s(:array, s(:array, s(:str, "Armando"), s(:str, "P")), s(:array, s(:str, "Dave"), s(:str, "S"))), s(:array, s(:array, s(:str, "Richard"), s(:str, "R")), s(:array, s(:str, "Michael"), s(:str, "S")))), s(:array, s(:array, s(:array, s(:str, "Allen"), s(:str, "S")), s(:array, s(:str, "Omer"), s(:str, "P"))), s(:array, s(:array, s(:str, "David E."), s(:str, "R")), s(:array, s(:str, "Richard X."), s(:str, "P"))))), s(:array, s(:str, "Richard"), s(:str, "R")), s(:array, s(:array, s(:array, s(:str, "Armando"), s(:str, "P")), s(:array, s(:str, "Dave"), s(:str, "S"))), s(:array, s(:array, s(:str, "Richard"), s(:str, "R")), s(:array, s(:str, "Michael"), s(:str, "S")))), s(:array, s(:str, "Richard"), s(:str, "R")))), s(:iter, s(:call, s(:lvar, :test_tournaments), :each_pair), s(:args, :tournament, :result), s(:block, s(:call, s(:const, :PP), :pp, s(:lvar, :tournament)), s(:if, s(:call, s(:call, nil, :rps_tournament_winner, s(:lvar, :tournament)), :!=, s(:lvar, :result)), s(:call, nil, :puts, s(:str, "failed tournament")), s(:call, nil, :puts, s(:str, "correct tournament"))))), s(:lasgn, :test_anagrams, s(:hash, s(:array, s(:str, "Cars"), s(:str, "for"), s(:str, "potatoes"), s(:str, "racs"), s(:str, "four"), s(:str, "scar"), s(:str, "creams"), s(:str, "scream")), s(:array, s(:array, s(:str, "Cars"), s(:str, "racs"), s(:str, "scar")), s(:array, s(:str, "four")), s(:array, s(:str, "for")), s(:array, s(:str, "potatoes")), s(:array, s(:str, "creams"), s(:str, "scream"))))), s(:iter, s(:call, s(:lvar, :test_anagrams), :each_pair), s(:args, :anagrams, :result), s(:block, s(:call, s(:const, :PP), :pp, s(:lvar, :anagrams)), s(:lasgn, :myresult, s(:call, s(:call, nil, :combine_anagrams, s(:lvar, :anagrams)), :sort!)), s(:call, s(:lvar, :result), :sort!), s(:if, s(:call, s(:lvar, :myresult), :!=, s(:lvar, :result)), s(:call, nil, :puts, s(:str, "failed anagrams")), s(:call, nil, :puts, s(:str, "correct anagrams")))))), nil))
s(:block, s(:defn, :anagrams?, s(:args, :word), s(:if, s(:call, s(:call, s(:call, s(:lvar, :word), :downcase), :sort), :==, s(:call, s(:call, s(:self), :downcase), :sort)), s(:block, s(:call, nil, :puts, s(:dstr, "", s(:evstr, s(:call, s(:call, s(:lvar, :word), :downcase), :sort)), s(:str, " == "), s(:evstr, s(:call, s(:call, s(:self), :downcase), :sort)))), s(:return, s(:true))), nil), s(:call, nil, :puts, s(:dstr, "", s(:evstr, s(:call, s(:call, s(:lvar, :word), :downcase), :sort)), s(:str, " != "), s(:evstr, s(:call, s(:call, s(:self), :downcase), :sort)))), s(:false)), s(:defn, :combine_anagrams, s(:args, :list_of_words), s(:lasgn, :result, s(:array)), s(:iter, s(:call, s(:lvar, :list_of_words), :each), s(:args, :word), s(:block, s(:lasgn, :found, s(:false)), s(:for, s(:lvar, :result), s(:lasgn, :added_words), s(:if, s(:call, s(:lvar, :word), :anagrams?, s(:call, s(:lvar, :added_words), :[], s(:lit, 0))), s(:block, s(:call, s(:lvar, :added_words), :<<, s(:lvar, :word)), s(:call, nil, :puts, s(:dstr, "==>", s(:evstr, s(:lvar, :added_words)))), s(:lasgn, :found, s(:true)), s(:break)), nil)), s(:if, s(:call, s(:lvar, :found), :!), s(:call, s(:lvar, :result), :<<, s(:array, s(:lvar, :word))), nil))), s(:return, s(:lvar, :result))))
s(:block, s(:defn, :get_key, s(:args, :word), s(:return, s(:call, s(:call, s(:call, s(:call, s(:lvar, :word), :downcase), :chars), :sort), :join))), s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :h, s(:call, s(:const, :Hash), :new, s(:lit, 0))), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word), s(:block, s(:call, nil, :puts, s(:dstr, "Processing ", s(:evstr, s(:lvar, :word)))), s(:lasgn, :key, s(:call, nil, :get_key, s(:lvar, :word))), s(:call, nil, :puts, s(:dstr, "Key=", s(:evstr, s(:lvar, :key)))), s(:if, s(:call, s(:lvar, :h), :has_key?, s(:lvar, :key)), s(:block, s(:call, nil, :puts, s(:str, "exists")), s(:call, s(:call, s(:lvar, :h), :[], s(:lvar, :key)), :push, s(:lvar, :word))), s(:block, s(:call, nil, :puts, s(:str, "non existent")), s(:lasgn, :a, s(:call, s(:const, :Array), :new)), s(:call, s(:lvar, :a), :push, s(:lvar, :word)), s(:attrasgn, s(:lvar, :h), :[]=, s(:lvar, :key), s(:lvar, :a)))))), s(:lasgn, :b, s(:call, s(:const, :Array), :new)), s(:iter, s(:call, s(:lvar, :h), :each_value), s(:args, :value), s(:call, s(:lvar, :b), :push, s(:lvar, :value))), s(:return, s(:lvar, :b))))
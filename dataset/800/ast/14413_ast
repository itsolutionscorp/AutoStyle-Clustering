s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :anagrams, s(:array)), s(:lasgn, :map, s(:call, s(:const, :Hash), :new)), s(:for, s(:lvar, :words), s(:lasgn, :original_word), s(:block, s(:lasgn, :sorted_word, s(:call, s(:call, s(:call, s(:call, s(:lvar, :original_word), :downcase), :chars), :sort), :join)), s(:call, nil, :puts, s(:lvar, :sorted_word)), s(:if, s(:call, s(:call, s(:lvar, :map), :has_key?, s(:lvar, :sorted_word)), :!), s(:attrasgn, s(:lvar, :map), :[]=, s(:lvar, :sorted_word), s(:array)), nil), s(:attrasgn, s(:lvar, :map), :[]=, s(:lvar, :sorted_word), s(:call, s(:call, s(:lvar, :map), :[], s(:lvar, :sorted_word)), :push, s(:lvar, :original_word))))), s(:lasgn, :count, s(:lit, 0)), s(:for, s(:call, s(:lvar, :map), :keys), s(:lasgn, :key), s(:block, s(:attrasgn, s(:lvar, :anagrams), :[]=, s(:lvar, :count), s(:call, s(:call, s(:lvar, :map), :values_at, s(:lvar, :key)), :[], s(:lit, 0))), s(:lasgn, :count, s(:call, s(:lvar, :count), :+, s(:lit, 1))))), s(:return, s(:lvar, :anagrams)))
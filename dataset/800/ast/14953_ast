s(:block, s(:defn, :count_letters, s(:args, :str), s(:lasgn, :rex, s(:call, s(:const, :Regexp), :new, s(:lit, /(\w)/i))), s(:lasgn, :result, s(:call, s(:const, :Hash), :new)), s(:iter, s(:call, s(:call, s(:lvar, :str), :scan, s(:lit, /(\w)/i)), :each), s(:args, :s), s(:block, s(:lasgn, :letter, s(:call, s(:call, s(:lvar, :s), :[], s(:lit, 0)), :downcase)), s(:if, s(:call, s(:lvar, :result), :has_key?, s(:lvar, :letter)), s(:attrasgn, s(:lvar, :result), :[]=, s(:lvar, :letter), s(:call, s(:call, s(:lvar, :result), :[], s(:lvar, :letter)), :+, s(:lit, 1))), s(:attrasgn, s(:lvar, :result), :[]=, s(:lvar, :letter), s(:lit, 1))))), s(:return, s(:lvar, :result))), s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :letter_counts, s(:call, s(:const, :Hash), :new)), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word), s(:block, s(:lasgn, :value, s(:call, nil, :count_letters, s(:lvar, :word))), s(:if, s(:call, s(:lvar, :letter_counts), :has_key?, s(:lvar, :value)), s(:call, s(:call, s(:lvar, :letter_counts), :[], s(:lvar, :value)), :push, s(:lvar, :word)), s(:attrasgn, s(:lvar, :letter_counts), :[]=, s(:lvar, :value), s(:array, s(:lvar, :word)))))), s(:lasgn, :result, s(:array)), s(:iter, s(:call, s(:lvar, :letter_counts), :each_value), s(:args, :value), s(:call, s(:lvar, :result), :push, s(:lvar, :value))), s(:return, s(:lvar, :result))))
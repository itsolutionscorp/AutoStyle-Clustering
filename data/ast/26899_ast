s(:defn, :combine_anagrams, s(:args, :words), s(:lasgn, :found, s(:lit, 0)), s(:lasgn, :words_added, s(:call, s(:const, :Array), :new)), s(:lasgn, :words_group, s(:call, s(:const, :Array), :new)), s(:lasgn, :something_added, s(:false)), s(:lasgn, :group_id, s(:lit, 0)), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :word), s(:block, s(:lasgn, :permut, s(:call, s(:call, s(:call, s(:call, s(:call, s(:lvar, :word), :downcase), :chars), :to_a), :permutation), :map, s(:block_pass, s(:lit, :join)))), s(:lasgn, :permutation_group, s(:call, s(:const, :Array), :new)), s(:lasgn, :element_id, s(:lit, 0)), s(:iter, s(:call, s(:lvar, :permut), :each), s(:args, :valid), s(:iter, s(:call, s(:lvar, :words), :each), s(:args, :valid_word), s(:block, s(:lasgn, :word_dc, s(:call, s(:lvar, :valid_word), :downcase)), s(:if, s(:call, s(:lvar, :valid), :==, s(:lvar, :word_dc)), s(:block, s(:lasgn, :word_found, s(:call, s(:lvar, :words), :fetch, s(:call, s(:lvar, :words), :index, s(:lvar, :valid_word)))), s(:if, s(:call, s(:call, s(:lvar, :words_added), :include?, s(:lvar, :word_found)), :!), s(:block, s(:attrasgn, s(:lvar, :words_added), :[]=, s(:lvar, :found), s(:lvar, :word_found)), s(:attrasgn, s(:lvar, :permutation_group), :[]=, s(:lvar, :element_id), s(:lvar, :word_found)), s(:lasgn, :element_id, s(:call, s(:lvar, :element_id), :+, s(:lit, 1))), s(:lasgn, :found, s(:call, s(:lvar, :found), :+, s(:lit, 1))), s(:lasgn, :something_added, s(:true))), nil)), nil)))), s(:if, s(:lvar, :something_added), s(:block, s(:attrasgn, s(:lvar, :words_group), :[]=, s(:lvar, :group_id), s(:lvar, :permutation_group)), s(:lasgn, :group_id, s(:call, s(:lvar, :group_id), :+, s(:lit, 1))), s(:lasgn, :something_added, s(:false))), nil))), s(:return, s(:lvar, :words_group)))